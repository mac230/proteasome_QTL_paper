* Code, Figures, and Data Analysis for "Substrate-Specific Effects of Natural Genetic Variation on Proteasome Activity"
** Median Number of Reads Per Sample                                  :R:
   :LOGBOOK:
   - State "DONE"       from              [2021-11-16 Tue 15:35]
   :END:
#+NAME: seq_table
|  N | Sample         |    reads | q_read_1 | q_read_2 | median_coverage |
|----+----------------+----------+----------+----------+-----------------|
|  1 | SFA0061_pop_05 |  7003198 |    33.50 |    33.10 |              20 |
|  2 | SFA0061_pop_06 |  7458089 |    33.50 |    33.20 |              18 |
|  3 | SFA0061_pop_07 | 14753319 |    33.50 |    33.20 |              22 |
|  4 | SFA0061_pop_08 | 13021901 |    33.60 |    33.20 |              21 |
|  5 | SFA0062_pop_05 |  9715455 |    33.60 |    33.20 |              16 |
|  6 | SFA0062_pop_06 | 10683668 |    33.60 |    33.30 |              23 |
|  7 | SFA0062_pop_07 | 10024470 |    33.50 |    33.20 |              20 |
|  8 | SFA0062_pop_08 |  9048156 |    33.40 |    33.00 |              21 |
|  9 | SFA0065_pop_05 |  7195581 |    33.50 |    33.10 |              22 |
| 10 | SFA0065_pop_06 |  5994921 |    33.50 |    33.20 |              20 |
| 11 | SFA0065_pop_07 | 10007676 |    33.50 |    33.20 |              20 |
| 12 | SFA0065_pop_08 |  7209531 |    33.50 |    33.10 |              20 |
| 13 | SFA0066_pop_05 | 11521191 |    33.60 |    33.20 |              24 |
| 14 | SFA0066_pop_06 | 12741835 |    33.50 |    33.30 |              22 |
| 15 | SFA0066_pop_07 |  9798726 |    33.50 |    33.20 |              25 |
| 16 | SFA0066_pop_08 |  7710111 |    33.40 |    33.00 |              23 |
#+TBLFM: $1 = @# - 1

#+BEGIN_SRC R :var dat=seq_table :results output

## reads <- c(7003198, 7458089, 14753319, 13021901, 9715455,
##            10683668, 10024470, 9048156, 7195581, 5994921,
##            10007676, 7209531, 11521191, 12741835, 9798726, 7710111)

reads <- dat$reads
cover <- dat$median_coverage
paste0("total reads = ", sum(reads))

paste0("median reads = ", median(reads))
## 9757090

paste0("min reads = ", min(reads))
## 5994921

paste0("max reads = ", max(reads))
## 14753319

paste0("coverage median = ", median(cover), 
       "; coverage range = ", min(cover), " to ", max(cover))

#+END_SRC

#+RESULTS:
: [1] "total reads = 153887828"
: [1] "median reads = 9757090.5"
: [1] "min reads = 5994921"
: [1] "max reads = 14753319"
: [1] "coverage median = 21; coverage range = 16 to 25"

** TFT Ratio Barchart                                                 :R:
   :LOGBOOK:
   - State "DONE"       from              [2021-10-25 Mon 17:37]
   :END:

#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/TFT_cartoon_barchart.R
library("lattice")
vals <- c(0.3, 0.6, -log2(0.3 / 0.6), 0.8, 0.8, -log2(1))
fac  <- as.factor(1:length(vals))

low_col <- "#ec6ab7ff"
high_col <-  "#5AC168ff"
TFT_col <- gray(0.9)

## 'high_TFT' = high UPS activity, so low TFT ratio
low_col  <- "#ec6ab7"
high_col <- "#88d392"

## plot
TFT_bar <- barchart(vals ~ fac,
                    type = c("g"),
                    xlab = "Degradation Rate",
                    ylab = "Intensity (a.u.)",
                    ylim = c(-0.1, 1.1),
                    xlim = c(0.7, 5.7),
                    ## border col and lwd for the border around the bars
                    border = gray(0.25),
                    lwd = 2.5,
                    ## Ratio of bar width to inter-bar space
                    ## default seems to be > 1
                    box.ratio = 1.2,
                    col = c(low_col, high_col, TFT_col),
                    scales = list(x = list(cex = 3,
                                           at = c(2, 4.4),
                                           labels = c("High", "Low")),
                                  y = list(at = seq(from = 0, to = 1, by = 0.2),
                                           cex = 3),
                                  tck = c(1, 0)),
                    par.settings = list(par.ylab.text = list(cex = 3),
                                        par.xlab.text = list(cex = 3)),
                    key = list(rectangles = list(col = c(low_col,
                                                         high_col,
                                                         TFT_col),
                                                 border = gray(0.25),
                                                 lwd = 10,
                                                 size = 6,
                                                 height = 0.7),
                               text = list(labels = c("RFP",
                                                      "GFP",
                                                      expression("-log"[2]*" RFP / GFP")),
                                           cex = 3),
                               ## corner = c(0.99, 0.99),
                               columns = 3,
                               padding.text = 5,
                               cex.border = 10,
                               between = 1),
                               ## background = "white",
                               ## border = gray(0.4)),
                    panel = function(x, y, ...) {
                        panel.abline(h = seq(from = 0, to = 1, by = 0.2),
                                     v = c(0.8, 2, 3.2, 4.4, 5.6),
                                     col = gray(0.9))
                        ## taken from the 'panel.barchart' help
                        ## specify the exact location of the bars
                        ## x: Extent of Bars. By default, bars start at left of panel,
                        ## unless ‘origin’ is specified, in which case they start there.
                        ## y: Horizontal location of bars. Possibly a factor.
                        ## but, flip them, since 'horizontal = F'
                        panel.barchart(x = c(1.4, 2, 2.6, 3.8, 4.4, 5),
                                       y = vals,
                                       ...)
                    })


pdf(file = paste0("~/emacs/ubi_QTL_paper/results/",
                  gsub(pattern = " .*",
                       replacement = "",
                       x = Sys.time()),
                  "_TFT_schematic_barplot.pdf"
                  ),
    height = 9, width = 9)
print(TFT_bar)
dev.off()
#+END_SRC
** Flow Cytometry Characterizing the Rpn4 and ODC Degron TFTs         :R:
   :LOGBOOK:
   - State "DONE"       from              [2021-10-26 Tue 17:09]
   :END:
#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/reporter_characterization.R
## -----
## load all the required packages
source("~/emacs/R/functions/load_flow_packages.R")

#############
## USER INPUT
#############
## the only things that should need to be changed for this script to work
## for later when we plot
reporter_names <- c("ODC_TFT", "Rpn4_TFT")
## no trailing '/' at the end of 'base_dir'!
base_dir <- "/home/mahlon/data/flow/2021.10.17_TDH3pr_mCh_TFT_ODC_rpn4_fcs"
needed_dirs <- c("/fcs", "/results", "/tables",
                 "/scripts", "/dataframes", "/sessions",
                 "/dataframes/gated", "/dataframes/ungated")
dir_maker <- function(x){
    ifelse(!dir.exists(paths = paste0(base_dir, x)),
           dir.create(path = paste0(base_dir, x)),
           paste0("dir ", paste0(base_dir, x), " exists."))
}
sapply(X = needed_dirs, FUN = dir_maker)
work_dir       <- paste0(base_dir, "/fcs")
results_dir    <- paste0(base_dir, "/results")
tables_dir     <- paste0(base_dir, "/tables")
sessions_dir   <- paste0(base_dir, "/sessions")
frame_dir      <- paste0(base_dir, "/dataframes")
gated_dir      <- paste0(frame_dir, "/gated/")
ungated_dir    <- paste0(frame_dir, "/ungated/")
#################
## END USER INPUT
#################

## -----
## run the loop to generate dataframes for
## each set of fcs files for a given reporter
## we'll merge these sets of dataframes to
## a single dataframe using 'rbind' below.
source("~/emacs/UPS_QTL_paper/scripts/process_fcs_files.R")

## load colors for strains
source("~/emacs/UPS_QTL_paper/scripts/flow_color_setup.R")

## make sure the strains look good:
all_cols

## now, read each reporter's dataframe in and
## combine into a single dataframe
## generate a list of files in a directory using
## the 'dir' command, e.g.:
## dir(gated_dir)
## dir(ungated_dir)

## '_u' = ungated
out_u <- vector(mode = "list", length = length(dir(ungated_dir)))
for (o in 1:length(dir(gated_dir))) {
    out_u[[o]] <- read.table(file = paste0(ungated_dir, dir(ungated_dir)[o]),
                             header = T, sep = ",")
       }
## 5 strains * 8 replicates * 2 reporters * 10,000 cells = 800000
str(out_u) ## looks good

## '_g' = gated
out_g <- vector(mode = "list", length = length(dir(gated_dir)))
for (o in 1:length(dir(gated_dir))) {
    out_g[[o]] <- read.table(file = paste0(gated_dir, dir(gated_dir)[o]),
                             header = T, sep = ",")
       }

str(out_g)

## for the ungated set, it'll be
## 1e5 cells * 5 strains/reporter * 20 reporters = 1e7 rows
## fsc gating reduces 1e5 to ~2e4, so ~2e6 rows
## nrow(out_all) = 2284942
## if you want to look at ungated cells
## out_all <- do.call("rbind", out_u)
out_all <- do.call("rbind", out_g)

str(out_all)
levels(out_all$reporter)
levels(out_all$strain)
levels(out_all$file)

aa_order <- c(1, 2)
out_all$aa_order <- factor(out_all$reporter,
                           levels = levels(out_all$reporter)[aa_order])

out_all$strain_char <- as.character(out_all$strain)
out_all <- out_all[out_all$strain == "BY_strain"   |
                   out_all$strain == "RM_strain"   |
                   out_all$strain == "rpn4_strain" , ]


## get the strain factor in the desired order
## levels(out_all$strain)[c(2, 1, 6, 5, 4, 7)]
strain_order <- c(1, 3, 4, 5, 2)
levels(out_all$strain)[strain_order]
out_all$strain_order <- factor(out_all$strain,
                               levels = levels(out_all$strain)[strain_order])

strain_paste <- expand.grid(unique(out_all$replicate),
                          levels(out_all$strain_order))

strain_paste <- paste0(strain_paste$Var2, "_", strain_paste$Var1)

out_all$strain_rep <- factor(paste0(out_all$strain_order, "_", out_all$replicate),
                             levels = strain_paste)

params <- colnames(out_all)[unlist(lapply(X = out_all, FUN = is.numeric))]
params[10] <- "log2 TFT Ratio"

## -----
## extract the median from each biological replicate and use this
## value to build a dataframe w/ 8 observations per strain per
## reporter.  This dataframe is what we'll use for stats and for
## creating stripcharts and heatmaps

## 'aggregate' creates a new dataframe from x by applying FUN to
## all unique combinations of the factors supplied to the 'by'
## argument - in this case, grab the mean of numeric data and
## keep everything else a factor
out_agg <- aggregate.data.frame(x = out_all,
                                by = list(out_all$strain_order,
                                          out_all$replicate,
                                          out_all$aa_order),
                                FUN = function(x) {
                                    ifelse(is.numeric(x), median(x), as.character(x))
                                },
                                simplify = T)

## 'aggregate' seems to strip the levels from factors, so add
## these back using the values present in the original dataframe
out_agg$strain_fac <- factor(x = out_agg$strain,
                             levels = unique(out_agg$strain),
                             labels = unique(out_agg$strain))

out_agg$file_fac <- factor(out_agg$file,
                           levels = unique(out_agg$file),
                           labels = unique(out_agg$file))

out_agg$aa_order_fac <- factor(out_agg$aa_order,
                               levels = unique(out_agg$aa_order),
                               labels = unique(out_agg$aa_order))

out_agg$strain_rep_fac <- factor(out_agg$strain_rep,
                                 levels = unique(out_agg$strain_rep),
                                 labels = unique(out_agg$strain_rep))


out_agg$n_TFT_ratio <- -1 * out_agg$TFT_ratio

## -----
## transform the data
## Now we need to transform the data so that
## the TFT ratio scales such that:
## high TFT ratio = high UPS activity
## low TFT ratio = low UPS activity
## We'll do this by:
## 1. multiplying log2 TFT ratios by -1
## 2. subtracting the min. TFT value from each replicate
## this has to be done on a per-reporter basis, so
## we'll use the usual for() loop followed by do.call("rbind")
out_agg_sub <- out_agg[out_agg$strain_order == "BY_strain"   |
                       out_agg$strain_order == "RM_strain"   |
                       out_agg$strain_order == "rpn4_strain", ]

m <- 1
out_medians <- list()
for (m in 1:length(unique(out_agg_sub$aa_order))) {
    reporter <- unique(out_agg_sub$aa_order)[m]
    current_frame <- out_agg_sub[out_agg_sub$aa_order == reporter, ]
    current_mean <- mean(current_frame$n_TFT_ratio)
    current_sd   <- sd(current_frame$n_TFT_ratio)
    current_frame$z_TFT <- (current_frame$n_TFT_ratio - current_mean) / current_sd
    out_medians[[m]] <- current_frame
}

out_medians <- do.call("rbind", out_medians)

save(out_medians,
     file = "~/emacs/ubi_QTL_paper/results/2021.11.20_ODC_rpn4_flow_out.RData")

## -----
## statistical analysis
## statistical analysis of out medians on s_TFT_ratio

## -----
## ODC TFT
ODC_out <- out_medians[out_medians$aa_order == "ODC TFT", ]
ODC_aov <- aov(ODC_out$TFT_ratio ~ ODC_out$strain_order)
ODC_ph  <- TukeyHSD(ODC_aov)
ODC_ph_out <- as.data.frame(ODC_ph$ODC_out)
ODC_ph_out$reporter <- rep("ODC TFT", nrow(ODC_ph_out))

## save output
write.table(x = as.data.frame(ODC_ph$ODC_out),
            file = paste0(tables_dir,
                          "/",
                          gsub(pattern = " .*",
                               replacement = "",
                               x = Sys.time()), "_ODC_TFT_ph_out.csv"),
            append = F, quote = F, sep = ",",
            row.names = F, col.names = T)


## -----
## rpn4 TFT
rpn4_out <- out_medians[out_medians$aa_order == "Rpn4 TFT", ]
rpn4_out <- out_medians[out_medians$aa_order == "Rpn4 TFT", ]
rpn4_aov <- aov(rpn4_out$n_TFT_ratio ~ rpn4_out$strain_order)
rpn4_ph  <- TukeyHSD(rpn4_aov)
rpn4_ph_out <- as.data.frame(rpn4_ph$rpn4_out)
rpn4_ph_out$reporter <- rep("rpn4 TFT", nrow(rpn4_ph_out))

t.test(x = rpn4_out$TFT_ratio[rpn4_out$strain == "BY_strain"],
       y = ODC_out$TFT_ratio[ODC_out$strain == "BY_strain"],
       alternative = "two.sided")


## -----
## interaction
out_subset <- out_medians[out_medians$strain == "BY_strain" |
                          out_medians$strain == "RM_strain", ]

int_aov <- aov(TFT_ratio ~ strain * reporter,
               data = out_subset)

## save output
write.table(x = as.data.frame(rpn4_ph$rpn4_out),
            file = paste0(tables_dir,
                          "/",
                          gsub(pattern = " .*",
                               replacement = "",
                               x = Sys.time()), "_rpn4_TFT_ph_out.csv"),
            append = F, quote = F, sep = ",",
            row.names = F, col.names = T)


save(out_agg, file = paste0(tables_dir, "/",
                            gsub(pattern = " .*",
                                 replacement = "",
                                 x = Sys.time()), "ODC_rpn4_TFT_out_agg.Rdata"))


## color setup prior to plotting
color_subset <- as.logical(sapply(X = names(all_cols),
                                  FUN = function(x) {
                                      max(x == as.character(unique(out_subset_medians$strain_order)))
                                  }))

out_medians$sub_strain <- as.factor(out_medians$strain_char)

all_cols <- c("#4579AC", "#B65656", "#BA9C5E")

## -----
## strip plot

s_plot <- xyplot(n_TFT_ratio ~ sub_strain | aa_order,
                 data = out_medians,
                 type = c("p"),
                 ylim = c(0.8, 3.3),
                 cex = 2,
                 col = "black",
                 ylab = expression("UPS Activty (-log"[2]*" RFP / GFP)"),
                 xlab = "",
                 scales = list(alternating = F,
                               tck = c(1, 0),
                               x = list(labels = c("BY",
                                                   "RM",
                                                   expression(paste("BY "*italic("rpn4")*Delta))),
                                        cex = 1.75),
                               y = list(at = seq(from = 0.0, to = 3.5, by = 0.5),
                                        cex = 1.75)),
                 par.strip.text = list(cex = 1.75),
                 horizontal = F,
                 par.settings = list(strip.background = list(col = gray(0.9)),
                                     par.ylab.text = list(cex = 1.75)),
                 panel = function(...) {
                     panel.stripplot(...,
                                     jitter.data = T,
                                     fill = all_cols[1:3],
                                     pch = 21,
                                     factor = 1.25)
                 })

pdf(file = paste0(results_dir, "/",
                  gsub(pattern = " .*",
                       replacement = "",
                       x = Sys.time()),
                  "_ODC_rpn4_stripchart.pdf"),
    width = 12, height = 7)
print(s_plot)
grid.text(label = rep("#", 3),
          x = c(0.45, 0.75, 0.9),
          y = c(0.64, 0.64, 0.64),
          default.units = "npc",
          gp = gpar(cex = 2.0))
dev.off()


## -----
## density plot
out_all_sub <- out_all[out_all$strain == "BY_strain" |
                       out_all$strain == "RM_strain" |
                       out_all$strain == "rpn4_strain", ]

out_all_sub$sub_strain <- as.factor(out_all_sub$strain_char)

out_all_sub$n_TFT_ratio <- -1 * out_all_sub$TFT_ratio

all_t_cols <- c("#2166AC77", "#BF323277", "#CCA14A77")

rep_cols <- unlist(lapply(X = 1:3, FUN = function(x) {
                              rep(all_cols[x],
                                  times = sum(grepl(pattern = names(all_cols[x]),
                                                    x = levels(out_all$strain_rep))))
                          }))

d_plot <- densityplot(~ n_TFT_ratio | aa_order,
                      data = out_all_sub,
                      plot.points = F,
                      xlim = c(-0.25, 5.25),
                      ylim = c(-0.1, 1.7),
                      col = all_t_cols,
                      index.cond = list(aa_order),
                      xlab = expression("UPS Activty (-log"[2]*" RFP / GFP)"),
                      scales = list(tck = c(1, 0),
                                    alternating = F,
                                    x = list(at = seq(from = 0.0, to = 5, by = 1),
                                             cex = 1.75),
                                    y = list(at = seq(from = 0.0, to = 1.5, by = 0.5),
                                             cex = 1.75)),
                      par.strip.text = list(cex = 2),
                      par.settings = list(strip.background = list(col = gray(0.9)),
                                          par.xlab.text = list(cex = 1.75),
                                          par.ylab.text = list(cex = 1.75)),
                      panel = function(x, y, q, subscripts, ...) {
                          panel.densityplot(x,
                                            plot.points = F,
                                            groups = out_all_sub$strain_rep,
                                            subscripts = subscripts,
                                            lty = 1,
                                            lwd = 1.5,
                                            col = rep_cols,
                                            ylim = c(0, 2))
                          panel.densityplot(x,
                                            groups = out_all_sub$sub_strain,
                                            data = out_all_sub,
                                            subscripts = subscripts,
                                            ...,
                                            lwd = 7.5)
                      })
pdf(file = paste0(results_dir, "/",
                  gsub(pattern = " .*",
                       replacement = "",
                       x = Sys.time()),
                  "_ODC_rpn4_density_plot.pdf"),
    height = 7, width = 12)
print(d_plot)
grid.lines(x = c(0.09, 0.13),
           y = c(0.85, 0.85),
           default.units = "npc",
           gp = gpar(col = all_cols[1],
                     lwd = 10,
                     lineend = "butt"))
grid.lines(x = c(0.09, 0.13),
           y = c(0.80, 0.80),
           default.units = "npc",
           gp = gpar(col = all_cols[2],
                     lwd = 10,
                     lineend = "butt"))
grid.lines(x = c(0.09, 0.13),
           y = c(0.75, 0.75),
           default.units = "npc",
           gp = gpar(col = all_cols[3],
                     lwd = 10,
                     lineend = "butt"))
grid.text(label = c("BY", "RM",
                    expression(paste("BY "*italic("rpn4")*Delta))),
          x = rep(0.135, 3),
          y = c(0.85, 0.80, 0.745),
          just = "left",
          default.units = "npc",
          gp = gpar(cex = 1.6))
dev.off()
#+END_SRC

** t-Tests of Flow Cytometry Results                                  :R:

#+NAME: flow_cytometry_pvals
|---+--------------------+----------+-----------|
| N | Comparison         | reporter |     p.val |
|---+--------------------+----------+-----------|
| 1 | BY-RM              | ODC      | 0.0001986 |
| 2 | BY-rpn4            | ODC      | 1.422e-06 |
| 3 | RM-rpn4            | ODC      | 1.218e-06 |
|---+--------------------+----------+-----------|
| 4 | BY-RM              | rpn4     | 1.184e-08 |
| 5 | BY-rpn4            | rpn4     | 1.647e-13 |
| 6 | RM-rpn4            | rpn4     |  7.42e-13 |
|---+--------------------+----------+-----------|
| 7 | BY_ODC-BY_rpn4     | both     | 6.914e-10 |
| 8 | RM_ODC-RM_rpn4     | both     |  5.29e-14 |
| 9 | rpn4_ODC-rpn4_rpn4 | both     |    0.3604 |
|---+--------------------+----------+-----------|
#+TBLFM: $1 = @# - 1

   :LOGBOOK:
   - State "DONE"       from              [2021-11-20 Sat 14:06]
   :END:
#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/reporter_characterization_t-tests.R
## load in the summarized flow data
load("~/emacs/ubi_QTL_paper/results/2021.11.20_ODC_rpn4_flow_out.RData")

str(out_medians)

## -----
## ODC TFT
ODC_out <- out_medians[out_medians$reporter == "ODC TFT", ]
str(ODC_out)

## BY vs. RM; p = 0.0001986
t.test(x = ODC_out$TFT_ratio[ODC_out$strain == "BY_strain"],
       y = ODC_out$TFT_ratio[ODC_out$strain == "RM_strain"],
       alternative = "two.sided")

## BY vs. rpn4; p = 1.422e-06
t.test(x = ODC_out$TFT_ratio[ODC_out$strain == "BY_strain"],
       y = ODC_out$TFT_ratio[ODC_out$strain == "rpn4_strain"],
       alternative = "two.sided")

## BY vs. rpn4; p = 1.218e-06
t.test(x = ODC_out$TFT_ratio[ODC_out$strain == "RM_strain"],
       y = ODC_out$TFT_ratio[ODC_out$strain == "rpn4_strain"],
       alternative = "two.sided")


## -----
## rpn4 TFT
rpn4_out <- out_medians[out_medians$reporter == "Rpn4 TFT", ]
str(rpn4_out)

## BY vs. RM; p = 1.184e-08
t.test(x = rpn4_out$TFT_ratio[rpn4_out$strain == "BY_strain"],
       y = rpn4_out$TFT_ratio[rpn4_out$strain == "RM_strain"],
       alternative = "two.sided")

## BY vs. rpn4; p = 1.647e-13
t.test(x = rpn4_out$TFT_ratio[rpn4_out$strain == "BY_strain"],
       y = rpn4_out$TFT_ratio[rpn4_out$strain == "rpn4_strain"],
       alternative = "two.sided")

## BY vs. rpn4; p = 7.42e-13
t.test(x = rpn4_out$TFT_ratio[rpn4_out$strain == "RM_strain"],
       y = rpn4_out$TFT_ratio[rpn4_out$strain == "rpn4_strain"],
       alternative = "two.sided")


## -----
## BY per reporter; p = 6.914e-10
by_out <- out_medians[out_medians$strain == "BY_strain", ]

t.test(x = by_out$TFT_ratio[by_out$reporter == "ODC TFT"],
       y = by_out$TFT_ratio[by_out$reporter == "Rpn4 TFT"],
       alternative = "two.sided")


## -----
## RM per reporter; p = 5.29e-14
rm_out <- out_medians[out_medians$strain == "RM_strain", ]

t.test(x = rm_out$TFT_ratio[rm_out$reporter == "ODC TFT"],
       y = rm_out$TFT_ratio[rm_out$reporter == "Rpn4 TFT"],
       alternative = "two.sided")


## -----
## rpn4 per reporter; p = 0.3604
rpn4_out <- out_medians[out_medians$strain == "rpn4_strain", ]

t.test(x = rpn4_out$TFT_ratio[rpn4_out$reporter == "ODC TFT"],
       y = rpn4_out$TFT_ratio[rpn4_out$reporter == "Rpn4 TFT"],
       alternative = "two.sided")
#+END_SRC
** Sort Plots                                                         :R:
   :LOGBOOK:
   - State "DONE"       from              [2022-04-25 Mon 14:46]
   :END:

    - [1] SFA0061/SFA0062 (ODC)
    - [2] SFA0065/SFA0066 (rpn4)

#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/sort_plots.R
## -----
##############
## USER INPUT:
##############

## the only things that should need to be changed for this script to work
## no trailing '/' at the end!
base_dir <- "~/emacs/ubi_QTL_paper"
setwd(base_dir)
needed_dirs <- c("/fcs", "/results", "/tables", "/scripts")
dir_maker <- function(x){
    ifelse(!dir.exists(paths = paste0("./", x)),
           dir.create(path = paste0("./", x)),
           paste0("dir ", paste0(getwd(), x), " exists_"))
}
sapply(X = needed_dirs, FUN = dir_maker)
work_dir       <- paste0(base_dir, "/fcs")
results_dir    <- paste0(base_dir, "/results")
tables_dir     <- paste0(base_dir, "/tables")


## -----
## <<Required_Packages>>
## check for Bioconductor and install if not available
ifelse(!requireNamespace("BiocManager", quietly = TRUE),
       install.packages("BiocManager",
                        dependencies = TRUE,
                        repos = "http://cran.wustl.edu/",
                        quiet = TRUE),
       paste0("Bioconductor available"))
require("BiocManager")


## -----
## load packages or install if not available
## have to split these out by bioconductor vs. non-bioconductor
## non-bioconductor
package_installer <- function(x){
    if(!requireNamespace(x, quietly = TRUE))
        install.packages(x, dependencies = TRUE,
                         repos = "http://cran.wustl.edu/",
                         quiet = TRUE, INSTALL_opts = '--no-lock')}
packages <- c("colorspace", "lattice", "ggvis", "dygraphs", "DescTools", "viridis")
sapply(X = packages, FUN = package_installer)
sapply(X = packages, FUN = require, character.only = TRUE)


## -----
## bioconductor
source("~/emacs/R/functions/load_flow_packages.R")


## -----
## required for merging flowsets into a single flowframe
source(file = "https://raw.githubusercontent.com/mac230/flow_scripts/master/set2frame.R")


## -----
## read in the data
dat <- read.flowSet(path = work_dir,
                    min.limit = 1,
                    alter.names = T)


##-----
## <<TFT_Transformation>>
## use the transform function to get the TFT/PSV parameters we want
## start by converting 0's in fluors to 1's via truncate transform
trunc.trans   <- truncateTransform("Convert 0's to 1's.", a = 1)
trunc.fluors  <- function(x){
    transform(x,
              `GFP.A` = trunc.trans(`GFP.A`),
              `mCherry.A` = trunc.trans(`mCherry.A`))}
dat <- fsApply(x = dat, FUN = trunc.fluors)

dat_list <- list()
for(i in 1:length(dat)) {
    dat_in <- as.data.frame(exprs(dat[[i]]))
    dat_in$log_GFP   <- log(dat_in$GFP.A, 10)
    dat_in$log_RFP   <- log(dat_in$mCherry.A, 10)
    dat_in$TFT_ratio <- -1 * log(dat_in$mCherry.A / dat_in$GFP.A, 2)
    dat_list[[i]] <- dat_in[dat_in$log_GFP > 2.5, ]
}


## -----
## now gate / subset and plot 
## a function to gate the cells to include only haploids.
## we identify these as a sharp peak in the lower end of
## the fsc density plot.  I take 10% above and below the
## max density value
dat_sub       <- list()
high_list     <- list()
low_list      <- list()
high_val      <- list()
low_val       <- list()

for (i in 1:length(dat)) {

    ## gate on FSC and get fluorescence-positive cells
    high_FSC <- quantile(x = dat_list[[i]]$FSC.A, probs = 0.70)
    low_FSC  <- quantile(x = dat_list[[i]]$FSC.A, probs = 0.30)
    dat_sub[[i]] <- dat_list[[i]][dat_list[[i]]$FSC.A > low_FSC &
                                  dat_list[[i]]$FSC.A < high_FSC &
                                  dat_list[[i]]$log_GFP > 3, ]

    ## values for overplotting extreme phenotype pools
    high_val[[i]]   <- quantile(x = dat_sub[[i]]$TFT_ratio, probs = 0.975)
    low_val[[i]]    <- quantile(x = dat_sub[[i]]$TFT_ratio, probs = 0.025)
    high_list[[i]] <- dat_sub[[i]][dat_sub[[i]]$TFT_ratio >= high_val[[i]], ]
    low_list[[i]]  <- dat_sub[[i]][dat_sub[[i]]$TFT_ratio <= low_val[[i]], ]
}

## lapply(X = dat_list,
##        FUN = nrow)
## lapply(X = dat_sub,
##        FUN = nrow)

## plot all 4 SFA samples and see which looks best
## 'high_TFT' = high UPS activity, so low TFT ratio
low_col <- "#ec6ab7ff"
high_col <-  "#5AC168ff"

low_t_col <- "#ec6ab722"
high_t_col <-  "#5AC16811"

## 61 / 62 = ODC
## 65 / 66 = rpn4
dat[[1]]@description$GUID.original
## 1 / 2 = ODC
## 3 / 4 = rpn4


## -----
## RFP ~ GFP plots
pdf(file = paste0(results_dir, "/",
                  gsub(pattern = " .*",
                       replacement = "",
                       x = Sys.time()),
                  "_ODC_sort_xy.pdf"))


## -----
## ODC TFT
print(
xyplot(log_RFP ~ log_GFP,
       data = dat_sub[[1]],
       type = c("p", "g"),
       xlim = c(2.4, 4.6),
       ylim = c(2.4, 4.6),       
       ## xlim = c(2.75, 4.7),
       ## ylim = c(2.8, 4.75),
       ## ylim = c(2.9, 4.85),
       pch = 19,
       col = gray(0.3, alpha = 0.2),
       cex = 0.25,
       xlab = expression("log"["10"]*" GFP"),
       ylab = expression("log"["10"]*" RFP"),
       key = list(lines = list(col = c(low_col,
                                       high_col),
                               lwd = 10,
                               size = 2.5),
                  text = list(labels = c("2% Low UPS Activity Gate",
                                         "2% High UPS Activity Gate"),
                              cex = 1.75)),
       scales = list(tck = c(1, 0),
                     alternating = F,
                     x = list(cex = 1.75,
                              at = seq(from = 2, to = 7, by = 0.5)),
                     y = list(cex = 1.75,
                              at = seq(from = 2, to = 7, by = 0.5))),
       par.settings = list(par.ylab.text = list(cex = 1.75),
                           par.xlab.text = list(cex = 1.75)),
       panel = function(...) {
           panel.xyplot(...)
           panel.points(x = high_list[[1]]$log_GFP,
                        y = high_list[[1]]$log_RFP,
                        pch = 19, col = high_col, cex = 0.25)
           panel.points(x = low_list[[1]]$log_GFP,
                        y = low_list[[1]]$log_RFP,
                        pch = 19, col = low_col, cex = 0.25)
}
))
## code end
dev.off()


## -----
## Rpn4 TFT
pdf(file = paste0(results_dir, "/",
                  gsub(pattern = " .*",
                       replacement = "",
                       x = Sys.time()),
                  "_Rpn4_sort_xy.pdf"))

print(
xyplot(log_RFP ~ log_GFP,
       data = dat_sub[[3]],
       type = c("p", "g"),
       xlim = c(2.75, 4.7),
       ylim = c(2.8, 4.75),
       pch = 19,
       col = gray(0.3, alpha = 0.2),
       cex = 0.25,
       xlab = expression("log"["10"]*" GFP"),
       ylab = expression("log"["10"]*" RFP"),
       key = list(lines = list(col = c(low_col,
                                       high_col),
                               lwd = 10,
                               size = 2.5),
                  text = list(labels = c("2% Low UPS Activity Gate",
                                         "2% High UPS Activity Gate"),
                              cex = 1.75)),
       scales = list(tck = c(1, 0),
                     alternating = F,
                     x = list(cex = 1.75,
                              at = seq(from = 2, to = 7, by = 0.5)),
                     y = list(cex = 1.75,
                              at = seq(from = 2, to = 7, by = 0.5))),
       par.settings = list(par.ylab.text = list(cex = 1.75),
                           par.xlab.text = list(cex = 1.75)),
       panel = function(...) {
           panel.xyplot(...)
           panel.points(x = high_list[[3]]$log_GFP,
                        y = high_list[[3]]$log_RFP,
                        pch = 19, col = high_col, cex = 0.25)
           panel.points(x = low_list[[3]]$log_GFP,
                        y = low_list[[3]]$log_RFP,
                        pch = 19, col = low_col, cex = 0.25)
}
))
## code end
dev.off()


## -----
## density plots


## -----
## ODC TFT
pdf(file = paste0(results_dir, "/",
                  gsub(pattern = " .*",
                       replacement = "",
                       x = Sys.time()),
                  "_ODC_sort_density.pdf"))

print(
densityplot(dat_sub[[1]]$TFT_ratio,
            plot.points = F,
            ## xlim = c(-2.25, 0.25),
            xlim = c(-2.5, 2.5),
            xlab = expression("UPS Activity (-log"["2"]*" RFP / GFP)"),
            key = list(lines = list(col = c(low_col,
                                            high_col),
                                    lty = 1,
                                    lwd = 4),
                       text = list(labels = c("2% Low UPS activity gate",
                                              "2% High UPS activity gate"),
                                   cex = 1.75)),
            scales = list(tck = c(1, 0),
                          x = list(cex = 1.75),
                          y = list(cex = 1.75)),

            col = gray(0.1),
            par.settings = list(par.xlab.text = list(cex = 1.75),
                                par.ylab.text = list(cex = 1.75)),
            lwd = 2,
            panel = function(...) {
                panel.densityplot(...)
                panel.abline(h = 0,
                             col = gray(0.9),
                             lwd = 2)
                panel.abline(v = c(high_val[[1]],
                                   low_val[[1]]),
                             col = c(high_col,
                                     low_col),
                             lwd = 2.5, lty = 1)

})
)
## code end 

dev.off()


## -----
## rpn4
pdf(file = paste0(results_dir, "/",
                  gsub(pattern = " .*",
                       replacement = "",
                       x = Sys.time()),
                  "_Rpn4_sort_density.pdf"))

print(
densityplot(dat_sub[[3]]$TFT_ratio,
            plot.points = F,
            xlim = c(-2.25, 0.25),
            xlab = expression("UPS Activity (-log"["2"]*" RFP / GFP)"),
            key = list(lines = list(col = c(low_col,
                                            high_col),
                                    lty = 1,
                                    lwd = 4),
                       text = list(labels = c("2% Low UPS activity gate",
                                              "2% High UPS activity gate"),
                                   cex = 1.75)),
            scales = list(tck = c(1, 0),
                          x = list(cex = 1.75),
                          y = list(cex = 1.75)),

            col = gray(0.1),
            par.settings = list(par.xlab.text = list(cex = 1.75),
                                par.ylab.text = list(cex = 1.75)),
            lwd = 2,
            panel = function(...) {
                panel.densityplot(...)
                panel.abline(h = 0,
                             col = gray(0.9),
                             lwd = 2)
                panel.abline(v = c(high_val[[3]],
                                   low_val[[3]]),
                             col = c(high_col,
                                     low_col),
                             lwd = 2.5, lty = 1)

})
)
## code end
dev.off()
#+END_SRC

** QTL Analysis Replicate AFD/LOD Plots and Delta_AF Tables           :R:
   :LOGBOOK:
   - State "DONE"       from              [2021-10-28 Thu 13:32]
   :END:

#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/LOD_AFD_plots.R
## trailing slash at the ends of all dirs!!!!
## ifelse to determine which system we're on
## if not on home machine, assume msi
system   <- Sys.info()["nodename"]
base_dir <- "~/data/illumina/"
## determine if we're on msi; set wd appropriately
base_dir <- ifelse(system != "mahlon-linux",
                   "/home/albertf/mahlon/data/illumina/",
                   base_dir)

#############
## USER INPUT
#############
## set the specific directory you'll work
## in and name the comparison table
## TRAILING SLASH AT END OF DIR
## below, your project, e.g.,
## "2020.08.17_FPFA002_TDH3pr_Arg_N-end_TFT_sorts/"
proj           <- "2021.10.26_FPFA005_UBI_replicate_analyses/"
proj_dir       <- paste0(base_dir, proj)
data_dir       <- paste0(proj_dir, "rdata/")
comp_table     <- "scripts/2021.10.26_FPFA005_ubi_reporters_comparison_table.txt"
mpr            <- "_multipoolResults"
rd             <- ".RData"
pop            <- "_pop_0"
#################
## END USER INPUT
#################

needed.dirs <- c("results/", "rdata/", "/peaks")

dir.maker <- function(x){if(!dir.exists(paths = paste0(proj_dir, x)))
                             dir.create(path = paste0(proj_dir, x))}

sapply(X = needed.dirs, FUN = dir.maker)

results_dir     <- paste0(proj_dir, "results/")
output_dir      <- paste0(proj_dir, "r_output/")
peaks_dir       <- paste0(proj_dir, "peaks/")
experiment_file <- as.data.frame(read.table(paste0(proj_dir,
                                                   comp_table),
                                            stringsAsFactors=FALSE,
                                            head=TRUE))

## SNPs is a giant table w/ SNP positions
SNPs <- read.table("~/QTL_scripts/SNPs_Maggie_170809_BY_positions.txt",
                   stringsAsFactors = FALSE,
                   head = FALSE)

## as of 8/31/17, the SNPs seem not to be fully
## filtered and are out of sorting order
## I think the next section duplicates this code
## w/o the loop.  Frank's comment suggests he
## thinks the 'for' loop isn't working, but I
## think it is.  Does Maggie's code fix it?
## I guess not, given the dates.
for (thisChr in unique(SNPs[,1])){
    SNPs[SNPs[,1] == thisChr, 2] <- sort(SNPs[SNPs[,1] == thisChr, 2])
}

withMultipool <- TRUE

## common annotations, functions, etc ----------------
## check for Bioconductor and install if not available
ifelse(!requireNamespace("BiocManager", quietly = TRUE),
       install.packages("BiocManager",
                        dependencies = TRUE,
                        repos = "http://cran.wustl.edu/",
                        quiet = TRUE),
       paste0("Bioconductor available"))
require("BiocManager")

bioc_package_installer <- function(x) {
    if (!requireNamespace(x))
        BiocManager::install(x, INSTALL_opts = "--no-lock")
}

bioc_package_installer("VariantAnnotation")

library("lattice")
library("VariantAnnotation")
source("~/QTL_scripts/gTest.R")
source("~/QTL_scripts/x_qtl_seq_functions_170831.R")
source("~/QTL_scripts/mp_JB_170901.R")
source("~/QTL_scripts/peaksFromVector.R")

## data frame with all yeast genes, plus
## chr, pos., strand, and names
geneInfo <- read.table("~/QTL_scripts/ensemblGenes_ensembl83_160307_MOD.txt",
                       stringsAsFactors = FALSE,
                       sep = "\t",
                       header = TRUE)

## rownames become systemtatic names
rownames(geneInfo) <- geneInfo[, "geneID"]

## "geneName" is the common name, e.g., 'HOG1'
## for some (many?) rows of 'geneInfo', there
## is no 'geneName', so it's just an empty string
## e.g., head(allNames)
allNames <- geneInfo[, "geneName"]

names(allNames) <- geneInfo[, 1]
allNames[which(allNames == "")] <- names(allNames)[which(allNames == "")]
allNamesInv <- names(allNames)
names(allNamesInv) <- allNames

## padding for the plots
spacing       <- 1e5
trimFromEnd   <- 15e3
obsMin        <- 10
LoessSpan     <- 0.1

## AF line threshold, determined by null sorts
AFThres       <- 0.07606
## multipool LOD threshold, determined by null sorts
multiThres    <- 4.5
mpr  <- "_multipoolResults"
rd   <- ".RData"
p    <- 1

## read in chr lengths
## need this for building the heatmap
chr_lengths <- read.table("~/QTL_scripts/sacCer3ChromLengths.txt",
                          header = F)

## don't need mitochondrial chromosome
chr_lengths <- chr_lengths[1:16, ]

## vertical lines that separate chromosomes
## have to manually add the length of chrXVI
## through the second step below:
chr_dividers <- getGcoords(chr = 1:16,
                           pos = rep(1, 16),
                           spacing = spacing)

## 2nd step
chr_dividers <- c(chr_dividers,
                  getGcoords(chr = 16,
                             pos = chr_lengths$V2[16],
                             spacing = spacing))

## where to place the chromosome labels
chr_labels <- sapply(1:(length(chr_dividers) - 1),
                     function(i) {
                         (chr_dividers[i] + chr_dividers[i + 1]) / 2
                         })

## text labels for plot
chr_text <- as.roman(1:16)


## -----
## ODC results 
## load 'multipoolResults.RData' for ODC replicate 1
## adds 'multiPeaks' and 'multipoolOutput',
## which we re-assign
experiment_file <- experiment_file[c(1, 7), ]

load(paste0(data_dir,
            experiment_file[1, 1], "_",
            experiment_file[1, 3], "_",
            experiment_file[1, 1], "_",
            experiment_file[1, 4],
            mpr, rd))

## load ".RData" for ODC replicate 1
## adds 'theseCounts', which we re-assign
load(paste0(data_dir,
            experiment_file[1, 1], "_",
            experiment_file[1, 3], "_",
            experiment_file[1, 1], "_",
            experiment_file[1, 4],
            rd))

odc_one_peaks    <- multiPeaks
odc_one_output   <- multipoolOutput
odc_one_counts   <- theseCounts

## load 'multipoolResults.RData' for ODC replicate 2
load(paste0(data_dir,
            experiment_file [1, 2], "_",
            experiment_file [1, 3], "_",
            experiment_file [1, 2], "_",
            experiment_file [1, 4],
            mpr, rd))

## load ".RData" for ODC replicate 2
load(paste0(data_dir,
            experiment_file [1, 2], "_",
            experiment_file [1, 3], "_",
            experiment_file [1, 2], "_",
            experiment_file [1, 4],
            rd))

odc_two_peaks    <- multiPeaks
odc_two_output   <- multipoolOutput
odc_two_counts   <- theseCounts


## -----
## rpn4 results
## load 'multipoolResults.RData' for rpn4 replicate 1
load(paste0(data_dir,
            experiment_file[2, 1], "_",
            experiment_file[2, 3], "_",
            experiment_file[2, 1], "_",
            experiment_file[2, 4],
            mpr, rd))

## load ".RData" for ODC replicate 1
## adds 'theseCounts', which we re-assign
load(paste0(data_dir,
            experiment_file[2, 1], "_",
            experiment_file[2, 3], "_",
            experiment_file[2, 1], "_",
            experiment_file[2, 4],
            rd))

rpn4_one_peaks    <- multiPeaks
rpn4_one_output   <- multipoolOutput
rpn4_one_counts   <- theseCounts

## load 'multipoolResults.RData' for ODC replicate 2
load(paste0(data_dir,
            experiment_file [2, 2], "_",
            experiment_file [2, 3], "_",
            experiment_file [2, 2], "_",
            experiment_file [2, 4],
            mpr, rd))

## load ".RData" for ODC replicate 2
load(paste0(data_dir,
            experiment_file [2, 2], "_",
            experiment_file [2, 3], "_",
            experiment_file [2, 2], "_",
            experiment_file [2, 4],
            rd))

rpn4_two_peaks    <- multiPeaks
rpn4_two_output   <- multipoolOutput
rpn4_two_counts   <- theseCounts    


## compute BY allele frequencies
## and sequencing coverage
allele_f_calc <- function(sample, pool, ...) {
    n  <- sample[, paste0(pool, "_ref")]
    d1 <- sample[, paste0(pool, "_ref")]
    d2 <- sample[, paste0(pool, "_alt")]
    n / (d1 + d2)
}

cover_calc <- function(sample, pool, ...) {
    a <- sample[, paste0(pool, "_ref")]
    r <- sample[, paste0(pool, "_alt")]
    a + r
}


## -----
## allele freq. calculations
## ODC rep. 1
odc_one_counts$h_BY_AF <- allele_f_calc(odc_one_counts, "high")
odc_one_counts$l_BY_AF <- allele_f_calc(odc_one_counts, "low")

## ODC rep. 2 
odc_two_counts$h_BY_AF <- allele_f_calc(odc_two_counts, "high")
odc_two_counts$l_BY_AF <- allele_f_calc(odc_two_counts, "low")

## rpn4 rep. 1
rpn4_one_counts$h_BY_AF <- allele_f_calc(rpn4_one_counts, "high")
rpn4_one_counts$l_BY_AF <- allele_f_calc(rpn4_one_counts, "low")

## rpn4 rep. 2
rpn4_two_counts$h_BY_AF <- allele_f_calc(rpn4_two_counts, "high")
rpn4_two_counts$l_BY_AF <- allele_f_calc(rpn4_two_counts, "low")


## -----
## sequencing coverage calculations
## ODC rep. 1
odc_one_counts$h_cover <- cover_calc(odc_one_counts, "high")
odc_one_counts$l_cover <- cover_calc(odc_one_counts, "low")

## ODC rep. 2
odc_two_counts$h_cover <- cover_calc(odc_two_counts, "high")
odc_two_counts$l_cover <- cover_calc(odc_two_counts, "low")

## rpn4 rep. 1
rpn4_one_counts$h_cover <- cover_calc(rpn4_one_counts, "high")
rpn4_one_counts$l_cover <- cover_calc(rpn4_one_counts, "low")

## rpn4 rep. 2
rpn4_two_counts$h_cover <- cover_calc(rpn4_two_counts, "high")
rpn4_two_counts$l_cover <- cover_calc(rpn4_two_counts, "low")


## -----
## coordinates for the plot 
gcoords <- getGcoords(odc_one_counts$chr,
                      odc_one_counts$pos,
                      spacing)



## vertical lines that separate chromosomes
## have to manually add the length of chrXVI
## through the second step below:
chr_dividers <- getGcoords(chr = 1:16,
                           pos = rep(1, 16),
                           spacing = spacing)

## 2nd step
chr_dividers <- c(chr_dividers,
                  getGcoords(chr = 16,
                             pos = chr_lengths$V2[16],
                             spacing = spacing))

## where to place the chromosome labels
chr_labels <- sapply(1:(length(chr_dividers) - 1),
                     function(i) {
                         (chr_dividers[i] + chr_dividers[i + 1]) / 2
                     })


names(chr_labels)[16] = "chrXVI"




## make the ylimit of the plot the max of either:
## 1. the significance threshold
## 2. the highest peak of the first replicate
## 3. the highest peak of the second replicate
ylimMax <- max(c(multiThres,
                 sapply(c(odc_one_output,
                          odc_two_output,
                          rpn4_one_output,
                          rpn4_two_output),
                        function(x) {
                            max(x[[2]][, 2])}))) + 1


roll_high_odc_one <- rollLoessByChrWithWeights(data.frame(odc_one_counts[, "chr"],
                                                          odc_one_counts[, "h_BY_AF"],
                                                          gcoords,
                                                          median(odc_one_counts[, "h_cover"]),
                                                          stringsAsFactors = FALSE),
                                               LoessSpan)

roll_low_odc_one <- rollLoessByChrWithWeights(data.frame(odc_one_counts[, "chr"],
                                                         odc_one_counts[, "l_BY_AF"],
                                                         gcoords,
                                                         median(odc_one_counts[, "l_cover"]),
                                                         stringsAsFactors = FALSE),
                                              LoessSpan)

roll_high_odc_two <- rollLoessByChrWithWeights(data.frame(odc_two_counts[, "chr"],
                                                          odc_two_counts[, "h_BY_AF"],
                                                          gcoords,
                                                          median(odc_two_counts[, "h_cover"]),
                                                          stringsAsFactors = FALSE),
                                               LoessSpan)

roll_low_odc_two <- rollLoessByChrWithWeights(data.frame(odc_two_counts[, "chr"],
                                                         odc_two_counts[, "l_BY_AF"],
                                                         gcoords,
                                                         median(odc_two_counts[, "l_cover"]),
                                                         stringsAsFactors = FALSE),
                                              LoessSpan)

roll_high_rpn4_one <- rollLoessByChrWithWeights(data.frame(rpn4_one_counts[, "chr"],
                                                           rpn4_one_counts[, "h_BY_AF"],
                                                           gcoords,
                                                           median(rpn4_one_counts[, "h_cover"]),
                                                           stringsAsFactors = FALSE),
                                                LoessSpan)

roll_low_rpn4_one <- rollLoessByChrWithWeights(data.frame(rpn4_one_counts[, "chr"],
                                                          rpn4_one_counts[, "l_BY_AF"],
                                                          gcoords,
                                                          median(rpn4_one_counts[, "l_cover"]),
                                                          stringsAsFactors = FALSE),
                                               LoessSpan)

roll_high_rpn4_two <- rollLoessByChrWithWeights(data.frame(rpn4_two_counts[, "chr"],
                                                           rpn4_two_counts[, "h_BY_AF"],
                                                           gcoords,
                                                           median(rpn4_two_counts[, "h_cover"]),
                                                           stringsAsFactors = FALSE),
                                                LoessSpan)

roll_low_rpn4_two <- rollLoessByChrWithWeights(data.frame(rpn4_two_counts[, "chr"],
                                                          rpn4_two_counts[, "l_BY_AF"],
                                                          gcoords,
                                                          median(rpn4_two_counts[, "l_cover"]),
                                                          stringsAsFactors = FALSE),
                                               LoessSpan)


## code below returns the height on the y axis
## for the '*''s on the allele frequency difference
## plot.  it's called for ea. of the 2 replicates
## first, initialize 2 empty lists to put
## (roll_high - roll_low) values into
## y1_afd = replicate 1
## y2_afd = replicate 2
odc_one_afd  <- lapply(1:16, function(x) {
                           NULL
                       })
odc_two_afd  <- odc_one_afd
rpn4_one_afd <- odc_one_afd
rpn4_two_afd <- odc_one_afd

## chromosome names for pattern matching
chr_indices <- sapply(1:16, function(x) {
                          paste0("chr",
                                 as.character(as.roman(x)))
                      })

## name the elements according to chromosomes
names(odc_one_afd) <- chr_indices
names(odc_two_afd) <- chr_indices
names(rpn4_one_afd) <- chr_indices
names(rpn4_two_afd) <- chr_indices


## -----
## ODC rep 1
for (y in seq_along(odc_one_peaks)) {
    if (!is.null(odc_one_peaks[[y]]))
        for (q in seq_along(odc_one_peaks[[y]][, 1])) {
            ## has to return an index you can feed to roll_high_one
            h_roll_chr <- roll_high_odc_one[grep(pattern = paste0(chr_indices[[y]], "\\."),
                                                 x = names(roll_high_odc_one))]
            l_roll_chr <- roll_low_odc_one[grep(pattern = paste0(chr_indices[[y]], "\\."),
                                                x = names(roll_low_odc_one))]
            t_snp <- SNPs[SNPs$V1 == chr_indices[[y]], 2]
            t_min <- which.min(abs(odc_one_peaks[[y]][q, "maxIndex"] - t_snp))
            odc_one_afd[[y]][q] <- (h_roll_chr[t_min] - l_roll_chr[t_min])
            odc_one_afd[[y]][q] <- ifelse(odc_one_afd[[y]][q] > 0,
                                   ifelse(odc_one_afd[[y]][q] > AFThres,
                                          odc_one_afd[[y]][q] + 0.05,
                                          AFThres + 0.05),
                                   ifelse(odc_one_afd[[y]][q] < -AFThres,
                                          odc_one_afd[[y]][q] - 0.05,
                                          -AFThres - 0.05))
        }
}


## -----
## ODC rep 2
for (y in seq_along(odc_two_peaks)) {
    if (!is.null(odc_two_peaks[[y]]))
        for (q in seq_along(odc_two_peaks[[y]][, 1])) {
            ## has to return an index you can feed to roll_high_one
            h_roll_chr <- roll_high_odc_two[grep(pattern = paste0(chr_indices[[y]], "\\."),
                                                 x = names(roll_high_odc_two))]
            l_roll_chr <- roll_low_odc_two[grep(pattern = paste0(chr_indices[[y]], "\\."),
                                                x = names(roll_low_odc_two))]
            t_snp <- SNPs[SNPs$V1 == chr_indices[[y]], 2]
            t_min <- which.min(abs(odc_two_peaks[[y]][q, "maxIndex"] - t_snp))
            odc_two_afd[[y]][q] <- (h_roll_chr[t_min] - l_roll_chr[t_min])
            odc_two_afd[[y]][q] <- ifelse(odc_two_afd[[y]][q] > 0,
                                   ifelse(odc_two_afd[[y]][q] > AFThres,
                                          odc_two_afd[[y]][q] + 0.05,
                                          AFThres + 0.05),
                                   ifelse(odc_two_afd[[y]][q] < -AFThres,
                                          odc_two_afd[[y]][q] - 0.05,
                                          -AFThres - 0.05))
        }
}

## -----
## Rpn4 rep 1
for (y in seq_along(rpn4_one_peaks)) {
    if (!is.null(rpn4_one_peaks[[y]]))
        for (q in seq_along(rpn4_one_peaks[[y]][, 1])) {
            ## has to return an index you can feed to roll_high_one
            h_roll_chr <- roll_high_rpn4_one[grep(pattern = paste0(chr_indices[[y]], "\\."),
                                                  x = names(roll_high_rpn4_one))]
            l_roll_chr <- roll_low_rpn4_one[grep(pattern = paste0(chr_indices[[y]], "\\."),
                                                 x = names(roll_low_rpn4_one))]
            t_snp <- SNPs[SNPs$V1 == chr_indices[[y]], 2]
            t_min <- which.min(abs(rpn4_one_peaks[[y]][q, "maxIndex"] - t_snp))
            rpn4_one_afd[[y]][q] <- (h_roll_chr[t_min] - l_roll_chr[t_min])
            rpn4_one_afd[[y]][q] <- ifelse(rpn4_one_afd[[y]][q] > 0,
                                    ifelse(rpn4_one_afd[[y]][q] > AFThres,
                                           rpn4_one_afd[[y]][q] + 0.05,
                                           AFThres + 0.05),
                                    ifelse(rpn4_one_afd[[y]][q] < -AFThres,
                                           rpn4_one_afd[[y]][q] - 0.05,
                                           -AFThres - 0.05))
        }
}


## -----
## Rpn4 rep 2
for (y in seq_along(rpn4_two_peaks)) {
    if (!is.null(rpn4_two_peaks[[y]]))
        for (q in seq_along(rpn4_two_peaks[[y]][, 1])) {
            ## has to return an index you can feed to roll_high_one
            h_roll_chr <- roll_high_rpn4_two[grep(pattern = paste0(chr_indices[[y]], "\\."),
                                                  x = names(roll_high_rpn4_two))]
            l_roll_chr <- roll_low_rpn4_two[grep(pattern = paste0(chr_indices[[y]], "\\."),
                                                 x = names(roll_low_rpn4_two))]
            t_snp <- SNPs[SNPs$V1 == chr_indices[[y]], 2]
            t_min <- which.min(abs(rpn4_two_peaks[[y]][q, "maxIndex"] - t_snp))
            rpn4_two_afd[[y]][q] <- (h_roll_chr[t_min] - l_roll_chr[t_min])
            rpn4_two_afd[[y]][q] <- ifelse(rpn4_two_afd[[y]][q] > 0,
                                    ifelse(rpn4_two_afd[[y]][q] > AFThres,
                                           rpn4_two_afd[[y]][q] + 0.05,
                                           AFThres + 0.05),
                                    ifelse(rpn4_two_afd[[y]][q] < -AFThres,
                                           rpn4_two_afd[[y]][q] - 0.05,
                                           -AFThres - 0.05))
        }
}


## make pdfs
pdf(file = paste0(results_dir,
                  experiment_file[p, 5], "_",
                  experiment_file[p, 3], "_",
                  experiment_file[p, 4],
                  "_AFD_LOD_combined.pdf"),
    width=11,
    height=11)
par(mfrow = c(2, 1))

cols <- c("#EE8866", "#77AADD")
sig_line_col <- "#981F1FDD"   ## red


## -----
## ODC QTL data
odc_peak_pos <- c(69800, 418100,  85150, 291350,
                  20000, 409000, 666850, 768150,
                  47800, 410900, 441750)

odc_afd_peak_height <- c(0.099, -0.121, -0.101, -0.149,
                         -0.150,  0.225,  0.182,  0.111,
                         0.192,  0.127, -0.110)

odc_afd_peak_height <- ifelse(test = odc_afd_peak_height < 0,
                              yes = odc_afd_peak_height - 0.05,
                              no = odc_afd_peak_height + 0.025)

odc_lod_peak_height <- c(9.76, 7.13, 5.64, 12.83, 8.14,
                         28.74, 16.36, 8.13, 18.96, 7.96, 8.81)

odc_peak_chr <- c(2, 2, 4, 5, 7, 7, 10, 12, 13, 13, 14)

odc_peaks <- data.frame(pos = odc_peak_pos,
                        afd = odc_afd_peak_height,
                        lod = odc_lod_peak_height,
                        chr = odc_peak_chr)

## -----
## Rpn4 QTL data
rpn4_peak_pos <- c(240600, 259650,  88550, 882500,
                   672850, 544150, 167400)

rpn4_afd_peak_height <- c(-0.133, -0.127, -0.148, -0.111,
                          0.233, 0.145, -0.224)

rpn4_afd_peak_height <- ifelse(test = rpn4_afd_peak_height < 0,
                              yes = rpn4_afd_peak_height - 0.05,
                              no = rpn4_afd_peak_height + 0.025)

rpn4_lod_peak_height <- c(12.64, 10.09, 10.21, 6.80,
                          40.11, 16.58, 30.00)

rpn4_peak_chr <- c(4, 5, 7, 7, 12, 14, 15)

rpn4_peaks <- data.frame(pos = rpn4_peak_pos,
                         afd = rpn4_afd_peak_height,
                         lod = rpn4_lod_peak_height,
                         chr = rpn4_peak_chr)


## -----
## allele frequency difference plot

afd_plot <- xyplot((roll_high_odc_one - roll_low_odc_one) ~ gcoords,
                   type = c("l"),
                   xlab = "Chromosome",
                   ylab = "(High - Low Proteasome Activity Pool)",
                   xlim = c(min(chr_dividers) - spacing,
                            max(chr_dividers) + spacing),
                   ylim = c(-0.35, 0.35),
                   col = gray(1, alpha = 1),
                   lwd = 1.25,
                   key = list(corner = c(0.02, 0.99),
                              lines = list(col = c(cols, sig_line_col),
                                           lty = 1,
                                           lwd = 3,
                                           size = 2.5),
                              text = list(labels = c("ODC TFT", "Rpn4 TFT", "99.9% Quantile"),
                                          cex = 1.25),
                              between = 1.5,
                              padding.text = 2,
                              background = gray(1, alpha = 0.7)),
                   scales = list(tck = c(0.75, 0),
                                 x = list(at = chr_labels,
                                          labels = as.roman(1:16),
                                          cex = 1.25),
                                 y = list(cex = 1.25)),
                   par.settings = list(par.xlab.text = list(cex = 1.25),
                                       par.ylab.text = list(cex = 1.25),
                                       layout.widths = list(left.padding = 5),
                                       clip = list(panel = F)),
                   panel = function(...) {
                       ## 0 AFD line
                       panel.abline(h = 0,
                                    lty = 1,
                                    col = gray(0.7),
                                    lwd = 1.5)
                       ## allele frequency difference thresholds
                       panel.abline(h = c(AFThres, -AFThres),
                                    lty = 1,
                                    lwd = 0.8,
                                    col = sig_line_col)

                       ## chromosome cutoffs
                       panel.abline(v = c(chr_dividers, 13566086),
                                    lty = 1,
                                    lwd = 1,
                                    col = gray(0.875))
                       ## ODC rep one
                       panel.xyplot(...)
                       
                       for (j in unique(SNPs[,1])){
                           panel.points(gcoords[odc_one_counts[, "chr"] == j],
                                        (roll_high_odc_one - roll_low_odc_one)[odc_one_counts[, "chr"] == j],
                                        type = "l",
                                        lwd = 1.5,
                                        col = cols[1]) ## dark grey
                       }
                       for (j in unique(SNPs[,1])){
                           panel.points(gcoords[odc_two_counts[, "chr"] == j],
                                        (roll_high_odc_two - roll_low_odc_two)[odc_two_counts[, "chr"] == j],
                                        type = "l",
                                        lwd = 1.5,
                                        col = cols[1]) ## dark grey
                       }
                       for (j in unique(SNPs[,1])){
                           panel.points(gcoords[rpn4_one_counts[, "chr"] == j],
                                        (roll_high_rpn4_one - roll_low_rpn4_one)[rpn4_one_counts[, "chr"] == j],
                                        type = "l",
                                        lwd = 1.5,
                                        col = cols[2]) ## dark grey
                       }
                       for (j in unique(SNPs[,1])){
                           panel.points(gcoords[rpn4_two_counts[, "chr"] == j],
                                        (roll_high_rpn4_two - roll_low_rpn4_two)[rpn4_two_counts[, "chr"] == j],
                                        type = "l",
                                        lwd = 1.5,
                                        col = cols[2]) ## dark grey
                       }
                       panel.text(labels = "RM Allele Frequency Difference",
                                  x = -1.6e6,
                                  y = 0,
                                  srt = 90,
                                  cex = 1.25)
                       
                       panel.text(x = getGcoords(chr = odc_peaks$chr,
                                                 pos = odc_peaks$pos,
                                                 spacing = 1e5),
                                  y = odc_peaks$afd,
                                  labels = rep("*", times = nrow(odc_peaks)),
                                  col = cols[1],
                                  cex = 2.5)

                       panel.text(x = getGcoords(chr = rpn4_peaks$chr,
                                                 pos = rpn4_peaks$pos,
                                                 spacing = 1e5),
                                  y = rpn4_peaks$afd,
                                  labels = rep("*", times = nrow(rpn4_peaks)),
                                  col = cols[2],
                                  cex = 2.5)
                       
                   })


## -----
## LOD plot
lod_plot <- xyplot(gcoords ~ gcoords,
                   type = c("l"),
                   xlab = "Chromosome",
                   ylab = "      LOD",
                   xlim = c(min(chr_dividers) - spacing,
                            max(chr_dividers) + spacing),
                   ylim = c(-2, 47.5),
                   col = gray(1, alpha = 0.9),
                   lwd = 1.25,
                   key = list(corner = c(0.02, 0.99),
                              lines = list(col = c(cols, sig_line_col),
                                           lty = 1,
                                           lwd = 3,
                                           size = 2.5),
                              text = list(labels = c("ODC TFT", "Rpn4 TFT", "Significance Threshold"),
                                          cex = 1.25),
                              between = 1.5,
                              padding.text = 2,
                              background = gray(1, alpha = 0.7)),
                   scales = list(tck = c(0.75, 0),
                                 x = list(at = chr_labels,
                                          labels = as.roman(1:16),
                                          cex = 1.25),
                                 y = list(cex = 1.25)),
                   par.settings = list(par.xlab.text = list(cex = 1.25),
                                       par.ylab.text = list(cex = 1.25),
                                       layout.widths = list(left.padding = 7),
                                       clip = list(panel = F)),
                   panel = function(...) {
                       ## 0 AFD line
                       panel.abline(h = 0,
                                    lty = 1,
                                    col = gray(0.7),
                                    lwd = 1.5)
                       ## allele frequency difference thresholds

                       panel.abline(h = multiThres,
                                    lty = 1,
                                    lwd = 0.8,
                                    col = sig_line_col)

                       ## chromosome cutoffs
                       panel.abline(v = c(chr_dividers, 13566086),
                                    lty = 1,
                                    lwd = 1,
                                    col = gray(0.875))
                       ## ODC rep one
                       panel.xyplot(...)
                       
                       for (j in 1:16) {
                           panel.points(getGcoords(paste0("chr", as.roman(j)),
                                                   rpn4_one_output[[j]][[2]][, 1],
                                                   spacing),
                                        rpn4_one_output[[j]][[2]][, 2],
                                        type = "l",
                                        lwd = 1.5,
                                        col = cols[2])
                       }

                       for (j in 1:16) {
                           panel.points(getGcoords(paste0("chr", as.roman(j)),
                                                   rpn4_two_output[[j]][[2]][, 1],
                                                   spacing),
                                        rpn4_two_output[[j]][[2]][, 2],
                                        type = "l",
                                        lwd = 1.5,
                                        col = cols[2])
                       }

                       for (j in 1:16) {
                           panel.points(getGcoords(paste0("chr", as.roman(j)),
                                                   odc_one_output[[j]][[2]][, 1],
                                                   spacing),
                                        odc_one_output[[j]][[2]][, 2],
                                        type = "l",
                                        lwd = 1.5,
                                        col = cols[1])
                       }

                       for (j in 1:16) {
                           panel.points(getGcoords(paste0("chr", as.roman(j)),
                                                   odc_two_output[[j]][[2]][, 1],
                                                   spacing),
                                        odc_two_output[[j]][[2]][, 2],
                                        type = "l",
                                        lwd = 1.5,
                                        col = cols[1])
                       }

                       panel.text(x = getGcoords(chr = odc_peaks$chr,
                                                 pos = odc_peaks$pos,
                                                 spacing = 1e5),
                                  y = odc_peaks$lod + 2,
                                  labels = rep("*", times = nrow(odc_peaks)),
                                  col = cols[1],
                                  cex = 2.5)

                       panel.text(x = getGcoords(chr = rpn4_peaks$chr,
                                                 pos = rpn4_peaks$pos,
                                                 spacing = 1e5),
                                  y = rpn4_peaks$lod + 2,
                                  labels = rep("*", times = nrow(rpn4_peaks)),
                                  col = cols[2],
                                  cex = 2.5)

                   })


## -----
## make the combined pdf
pdf(file = "~/emacs/ubi_QTL_paper/figures/all_reporters_AFD_LOD_combined.pdf",
    height = 10, width = 12)
print(afd_plot,
      split = c(1, 1, 1, 2),
      newpage = T)
print(lod_plot,
      split = c(1, 2, 1, 2),
      newpage = F)
grid.text(label = c("A", "B"),
          x = c(0.017, 0.017),
          y = c(0.98, 0.475),
          default.units = "npc",
          gp = gpar(cex = 2.5,
                    fontface = "bold"))
dev.off()
#+END_SRC

** Combined QTL Line Plot                                             :R:
   :LOGBOOK:
   - State "DONE"       from              [2021-10-29 Fri 23:30]
   :END:

#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/combined_LOD_AFD_plots.R
data_dir <- "~/data/illumina/2021.10.26_FPFA005_UBI_replicate_analyses/peaks/merged_peak_tables"

dat <- list()

for(i in 1:length(dir(data_dir))) {
    dat[[i]] <- read.table(dir(data_dir, full.names = T)[i],
                           sep = ",", header = T,
                           stringsAsFactors = F)
}

dat_f <- do.call("rbind", dat)

dat_avg <- data.frame(reporter = dat_f$reporter,
                      chr = dat_f$chr,
                      type = dat_f$type,
                      LOD = (dat_f$rep_1_LOD + dat_f$rep_2_LOD) / 2,
                      delta_AF = (dat_f$rep_1_delta_AF + dat_f$rep_2_delta_AF) / 2,
                      left_index = (dat_f$rep_1_left_Index + dat_f$rep_2_left_Index) / 2,
                      max_index = (dat_f$rep_1_max_Index + dat_f$rep_2_max_Index) / 2,
                      right_index = (dat_f$rep_1_right_Index + dat_f$rep_2_right_Index) / 2)

## common annotations, functions, etc ----------------
## check for Bioconductor and install if not available
ifelse(!requireNamespace("BiocManager", quietly = TRUE),
       install.packages("BiocManager",
                        dependencies = TRUE,
                        repos = "http://cran.wustl.edu/",
                        quiet = TRUE),
       paste0("Bioconductor available"))
require("BiocManager")

bioc_package_installer <- function(x) {
    if (!requireNamespace(x))
        BiocManager::install(x, INSTALL_opts = "--no-lock")
}

bioc_package_installer("VariantAnnotation")

library("VariantAnnotation")
source("~/QTL_scripts/gTest.R")
source("~/QTL_scripts/x_qtl_seq_functions_170831.R")
source("~/QTL_scripts/mp_JB_170901.R")
source("~/QTL_scripts/peaksFromVector.R")


## -----
## getGcoords function
getGcoords <- function (chr,     ## which chromosome
                        pos,     ## which position
                        spacing, ## how much spacing betw. chromosomes (for plotting)
                        sgd.table = "~/QTL_scripts/sacCer3ChromLengths.txt") {

    ## read in the lengths of the s. cer chromosomes,
    ## produce a cumulative sum of each chromosome's
    ## length plus that of the preceding chromosomes
    ## plus the spacing arg (typically 1e5)
    ## e.g., start pos. of chrII = 230218 (length chrI) + 1e5 (spacing)
    ## note that 'spacing' arg gets added to each chromosome,
    ## so that, e.g., end of chrIII is (230218 + 1243402) + 2e5, not 1e5
    offind <- as.vector(cumsum(read.table(sgd.table,
                                          header=FALSE,
                                          sep = "\t")[,2] + spacing))

    ## drop the last length from 'offind',which
    ## comes from adding the length of the
    ## mitochondrial chromosome.  uses negative
    ## subsetting via the 'length' arg
    offind <- offind[-length(offind)]

    ## add 0, since this is where we start.
    ## importantly, the cumulative sum for
    ## chr I becomes 0 following this, so
    ## that, e.g., pos 500 in chrI = 500
    offind <- c(0, offind)

    ## name the chromosomes, which is really,
    ## where they end plus the spacing
    names(offind) <- as.character(read.table(sgd.table,
                                             header = FALSE,
                                             sep = "\t")[,1])

    ## return the cumulative sum of positions for
    ## the chromosome supplied via the 'chr' arg
    ## this is wrapped in an 'sapply' so that you
    ## can supply mulitple positions simultaneously
    chr_off <- as.numeric(sapply(chr, function(x) {
                                     offind[x]
                                 }))

    ## now, add the position to the cumulative sum
    ## for the chromosome your position falls in,
    ## so:
    ## chr I position  500 = 500
    ## chr II position 500 = 330718:
    ## (230218 [chrI length] + 500 [pos.] + 1e5 [spacing]) => 330718
    return(chr_off + pos)
}

## padding for the plots
spacing       <- 1e5
trimFromEnd   <- 15e3
obsMin        <- 10
LoessSpan     <- 0.1

## AF and multipool line threshold, determined by null sorts
af_thresh       <- 0.07606
multi_thresh    <- 4.5

## read in chr lengths
## need this for building the heatmap
chr_lengths <- read.table("~/QTL_scripts/sacCer3ChromLengths.txt",
                          header = F)

## don't need mitochondrial chromosome
chr_lengths <- chr_lengths[1:16, ]

## vertical lines that separate chromosomes
## have to manually add the length of chrXVI
## through the second step below:
chr_dividers <- getGcoords(chr = 1:16,
                           pos = rep(1, 16),
                           spacing = spacing)

## 2nd step
chr_dividers <- c(chr_dividers,
                  getGcoords(chr = 16,
                             pos = chr_lengths$V2[16],
                             spacing = spacing))

## where to place the chromosome labels
chr_labels <- sapply(1:(length(chr_dividers) - 1),
                     function(i) {
                         (chr_dividers[i] + chr_dividers[i + 1]) / 2
                         })

## text labels for plot
chr_text <- as.roman(1:16)

## convert peaks from base to gcoords
dat_avg$coords <- getGcoords(chr = dat_avg$chr,
                             pos = dat_avg$max_index,
                             spacing = spacing)

## assign colors based on reporter
cols <- c("#D07900", "#B01013")
dat_avg$col <- ifelse(dat_avg$reporter == "ODC_TFT",
                      cols[1],
                      cols[2])

## delta_AF plot
delta_AF_plot <-  xyplot(dat_avg$delta_AF[1] ~ dat_avg$coords[1],
                         xlim = c(min(chr_dividers) - spacing,
                                  max(chr_dividers) + spacing),
                         xlab = "Chromosome",
                         ylab = "(High - Low UPS Activity Pools)",
                         ylim = c(-0.26, 0.26),
                         scales = list(x = list(at = chr_labels,
                                                labels = chr_text,
                                                cex = 1.75),
                                       y = list(at = c(-0.25, -0.12, 0, 0.12, 0.25),
                                                labels = c("-0.25", "-0.12", "0.0",
                                                           "0.12", "0.25"),
                                                cex = 1.75),
                                       tck = c(1, 0)),
                         par.settings = list(par.xlab.text = list(cex = 1.75),
                                             par.ylab.text = list(cex = 1.75),
                                             layout.widths = list(left.padding = 5),
                                             clip = list(panel = F)),
                         key = list(corner = c(0.01, 0.98),
                                    lines = list(col = cols,
                                                 lineheight = 2,
                                                 lwd = 4,
                                                 size = 3),
                                    padding.text = 3,
                                    text = list(labels = c("ODC TFT",
                                                           "Rpn4 TFT"),
                                                cex = 1.75),
                                    background = gray(1, alpha = 0.5),
                                    border = gray(0)),
                         type = "1",
                         panel = function(...) {
                             panel.xyplot(...)
                             panel.abline(v = chr_dividers,
                                          lty = 1,
                                          col = gray(0.9),
                                          lwd = 1.5)
                             for(r in 1:nrow(dat_avg)) {
                                 panel.lines(x = rep(dat_avg[r, ]$coords, 2),
                                             y = c(0, dat_avg[r, ]$delta_AF),
                                             col = dat_avg[r, ]$col,
                                             lty = 1,
                                             lwd = 4)
                                 panel.abline(h = 0, col = gray(0.4), lty = 1, lwd = 4)
                                 ## empirical 99th percentile
                                 ## panel.abline(h = c(af_thresh, -af_thresh),
                                 ##              lty = 2,
                                 ##              col = "red")
                             }
                         }
                         )

pdf(file = paste0("~/emacs/ubi_QTL_paper/results/",
                  gsub(pattern = " .*",
                       replacement = "",
                       x = Sys.time()),
                  "_delta_AF_line_plot.pdf"),
                  width = 14, height = 7)
print(delta_AF_plot)
grid.text(label = expression(paste(Delta, "RM Allele Frequency")),
          x = 0.0125,
          y = 0.52,
          rot = 90,
          default.units = "npc",
          gp = gpar(cex = 1.75))
dev.off()

LOD_plot <-  xyplot(dat_avg$LOD[1] ~ dat_avg$coords[1],
                    xlim = c(min(chr_dividers) - spacing,
                             max(chr_dividers) + spacing),
                    ylim = c(-1, 41),
                    xlab = "Chromosome",
                    ylab = "LOD",
                    scales = list(x = list(at = chr_labels,
                                           labels = chr_text,
                                           cex = 1.75),
                                  y = list(at = seq(from = 0, to = 40, by = 10),
                                           cex = 1.75),
                                  tck = c(1, 0)),
                    par.settings = list(par.xlab.text = list(cex = 1.75),
                                        par.ylab.text = list(cex = 1.75),
                                        layout.widths = list(left.padding = 5),
                                        clip = list(panel = F)),
                    key = list(corner = c(0.01, 0.98),
                               lines = list(col = cols,
                                            lineheight = 2,
                                            lwd = 4,
                                            size = 3),
                               padding.text = 3,
                               text = list(labels = c("ODC TFT",
                                                      "Rpn4 TFT"),
                                           cex = 1.75),
                               background = gray(1, alpha = 0.5),
                               border = gray(0)),
                    type = "1",
                    panel = function(...) {
                        panel.xyplot(...)
                        panel.abline(v = chr_dividers,
                                     lty = 1,
                                     col = gray(0.9),
                                     lwd = 1.5)
                        for(r in 1:nrow(dat_avg)) {
                            panel.lines(x = rep(dat_avg[r, ]$coords, 2),
                                        y = c(0, dat_avg[r, ]$LOD),
                                        col = dat_avg[r, ]$col,
                                        lty = 1,
                                        lwd = 4)
                            panel.abline(h = 0, col = gray(0.4), lty = 1, lwd = 4)
                            ## empirical 99th percentile
                            ## panel.abline(h = c(af_thresh, -af_thresh),
                            ##              lty = 2,
                            ##              col = "red")
                        }
                    }
                    )

pdf(file = paste0("~/emacs/ubi_QTL_paper/results/",
                  gsub(pattern = " .*",
                       replacement = "",
                       x = Sys.time()),
                  "_LOD_line_plot.pdf"),
                  width = 14, height = 7)
print(LOD_plot)
dev.off()
#+END_SRC

** Yap1 Motif Plot                                                    :R:
   :LOGBOOK:
   - State "DONE"       from              [2021-11-05 Fri 08:39]
   :END:

#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/yap1_motif.R
require("ggseqlogo")
require("ggplot2")

## YAP1 position weight matrix from YeTFaSCo
A <- c(0.833333333333333, 0.833333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.166666666666667)
T <- c(0.0, 0.0, 0.0, 0.166666666666667, 1.0, 1.0, 1.0, 0.833333333333333, 0.833333333333333)
G <- c(0.166666666666667, 0.166666666666667, 0.833333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C <- c(0.0, 0.0, 0.166666666666667, 0.833333333333333, 0.0, 0.0, 0.0, 0.166666666666667, 0.0)

## bind it as a matrix
yap1 <- as.matrix(rbind(A, T, G, C))

pdf(file = "~/emacs/ubi_QTL_paper/results/ydr1_binding_motif.pdf",
    width = 12, height = 6)
    ggseqlogo(yap1, method = "bits")
dev.off()
#+END_SRC

** Chr VII QTL Range Plot                                             :R:
   :LOGBOOK:
   - State "DONE"       from              [2021-11-02 Tue 13:20]
   :END:

#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/chr_VII_QTL_range.R
## check for Bioconductor and install if not available
ifelse(!requireNamespace("BiocManager", quietly = TRUE),
       install.packages("BiocManager",
                        dependencies = TRUE,
                        repos = "http://cran.wustl.edu/",
                        quiet = TRUE),
       paste0("Bioconductor available"))
require("BiocManager")

## -----
## load packages or install if not available
## have to split these out by bioconductor vs. non-bioconductor
## non-bioconductor
package_installer <- function(x){
    if(!requireNamespace(x, quietly = TRUE))
        install.packages(x, dependencies = TRUE,
                         repos = "http://cran.wustl.edu/",
                         quiet = TRUE, INSTALL_opts = '--no-lock')}
packages <- c("colorspace", "lattice",
              "ggvis", "dygraphs", "grid",
              "DescTools", "viridis",
              "latticeExtra", "session")
sapply(X = packages, FUN = package_installer)
sapply(X = packages, FUN = require, character.only = TRUE)


## -----
## bioconductor
bioc_package_installer <- function(x){if(!requireNamespace(x))
                                          BiocManager::install(x, INSTALL_opts = '--no-lock')}
bioc_packages <-  c("Gviz", "GenomicRanges", "rtracklayer", "org.Sc.sgd.db")
sapply(X = bioc_packages, FUN = bioc_package_installer)
sapply(X = bioc_packages, FUN = require, character.only = TRUE)


## -----
## load the QTL intervals
ranges <- read.csv(file = "~/emacs/ubi_QTL_paper/tables/chr_VII_QTL_intervals.csv",
                   sep = ",", header = T, stringsAsFactors = F)
ranges <- ranges[ranges$reporter != "cys", ]
QTL_peak <- median(ranges$peak)

## calculate the confidence interval for the mean of the peak
err_peak <- qt(0.95, df = length(ranges$peak) - 1) *
    sd(ranges$peak) / sqrt(length(ranges$peak))

QTL_from    <- round((QTL_peak - err_peak - 3e3) / 1e5, digits = 2) * 1e5
QTL_to      <- round((QTL_peak + err_peak + 3e3) / 1e5, digits = 2) * 1e5
QTL_ci_down <- QTL_peak - err_peak
QTL_ci_up   <- QTL_peak + err_peak


## -----
## load variants and make a BY/RM region
snps <- read.table(paste0("~/emacs/ubi_QTL_paper/external_data",
                          "/gdata_42k_VEP_wExtraMarkersAttached.txt"),
                   sep = "\t",
                   header = FALSE,
                   quote = "",
                   stringsAsFactors = FALSE)

snps$chr <- unlist(strsplit(x = snps$V1,
                            split = ":.+"))

colnames(snps) <- c("snp", "pos", "alt", "class", "impact", "gene_name", "sys_name",
                    "type", "V9", "V101", "V11", "V12", "AA", "change", "V15", "V16",
                    "V17", "chr")

snps$variant <- unlist(lapply(X = strsplit(x = unlist(
                                               lapply(X = strsplit(x = snps[, 2],
                                                                   split = ":"),
                                                      FUN = function(x) {x[[2]]})),
                                           split = "-"),
                              FUN = function(x) {x[[1]]}))

snps$var <- as.numeric(snps$variant)

plot_snps <- snps[snps$chr == "chrVII", ]

## final frame of all SNPs in the region (111 SNPs)
plot_snps <- plot_snps[plot_snps$var > QTL_from - 500 & plot_snps$var < QTL_to + 500, ]
plot_snps$val <- rep(1, nrow(plot_snps))

snp_cols <- rep(gray(0.5), nrow(plot_snps))

snp_cols[plot_snps$impact == "LOW"]      <- gray(0.5)
snp_cols[plot_snps$impact == "MODERATE"] <- "orange"
snp_cols[plot_snps$impact == "HIGH"]     <- "red"

## -----
## now plot the interval
## availableDisplayPars("IdeogramTrack")
i_track <- IdeogramTrack(genome = "sacCer3", chromosome = "chrVII")

## availableDisplayPars("GenomeAxisTrack")
a_track <- GenomeAxisTrack()

v_track <- AnnotationTrack(start = plot_snps$var,
                           end   = plot_snps$var + 1,
                           genome = "sacCer3",
                           chromosome = "chrVII",
                           strand = rep("*", nrow(plot_snps)),
                           from = QTL_from - 500,
                           to = QTL_to + 500)

f1_track <- AnnotationTrack(start = plot_snps$var[1],
                            end   = plot_snps$var[2],
                            genome = "sacCer3",
                            chromosome = "chrVII",
                            from = QTL_from,
                            to = QTL_to)

f2_track <- AnnotationTrack(start = plot_snps$var[1],
                            end   = plot_snps$var[2],
                            genome = "sacCer3",
                            chromosome = "chrVII",
                            from = QTL_from,
                            to = QTL_to)

g_track <- UcscTrack(track      = "SGD Gene",
                       genome     = "sacCer3",
                       chromosome = "chrVII",
                       from       = QTL_from,
                       to         = QTL_to,
                       trackType  = "GeneRegionTrack",
                       name       = "SGD Genes",
                       rstarts    = "exonStarts",
                       rends      = "exonEnds",
                       gene       = "name",
                       strand     = "strand",
                       symbol     = "name",
                       id         = "name",
                       transcript = "name")

## availableDisplayPars("GeneRegionTrack")
displayPars(a_track) <- list(cex = 2,
                             col = gray(0.4),
                             fontcolor = "black",
                             ## size of the tick marks
                             distFromAxis = 2.5,
                             labelPos = "above",
                             ## 3'/5' indicators
                             add35 = F,
                             lwd = 2.5,
                             scale = NULL,
                             frame = F,
                             size = 0.3,
                             stackHeight = 1,
                             ticksAt = seq(from = 4.04e5, to = 4.18e5, by = 2e3))

displayPars(g_track) <- list(stacking = "squish",
                             showTitle = F,
                             shape = "arrow",
                             transcriptAnnotation = "gene",
                             fill = "grey",
                             just.group = "above",
                             fontsize = 20,
                             fontcolor.group = "black",
                             ## arrowHeadMaxWidth = 50,
                             ## arrowHeadWidth = 25,
                             ## border color for all track items
                             col = "green",
                             stackHeight = 0,
                             col.border.title = "black",
                             col.title = "black",
                             ## size of the gene name font
                             cex.group = 1.75,
                             ## size = 0.2
                             lwd = 2,
                             frame = F,
                             fontcolor = "black",
                             stackHeight = 1
                             )

displayPars(i_track) <- list(cex = 2,
                             showTitle = F,
                             col.title = "black",
                             outline = F,
                             showAxis = F,
                             reverseStrand = F,
                             fontcolor = "black",
                             ## for the highlighted region
                             lty = 1,
                             lwd = 2,
                             v = 4,
                             stackHeight = 1)

displayPars(v_track) <- list(showTitle = F,
                             col.line = "red",
                             stacking = "dense",
                             ## make the plot area small
                             ## for the SNPs we're plotting
                             size = 0.1,
                             lwd = 1,
                             min.height = 20,
                             ## cut the whitespace above and below
                             stackHeight = 1)

displayPars(g_track) <- list(stacking = "squish",
                             shape = "arrow",
                             fontcolor.group = "black",
                             transcriptAnnotation = "gene",
                             just.group = "above",
                             arrowHeadMaxWidth = 50,
                             col = "black",
                             fill = gray(0.8),
                             showTitle = F,
                             cex.group = 2,
                             stackHeight = 0.5,
                             size = 0.2)

displayPars(g_track) <- list(cex.group = 1.5,
                             arrowHeadMaxWidth = 35,
                             stackHeight = 0.8,
                             lwd = 2)
## have to combine these or it doubleplots the genes
h_track <- HighlightTrack(trackList = list(g_track),
                           start = c(QTL_ci_down, QTL_peak - 20),
                           end = c(QTL_ci_up, QTL_peak + 20),
                           chromosome = "chrVII",
                           genome = "sacCer3")
## can combine here as well
displayPars(h_track) <- list(col = c("red", "red"),
                             fill = c("#FFECEE", "red"),
                             size = 0.1)
displayPars(i_track) <- list(size = 0.04)
displayPars(a_track) <- list(size = 0.12,
                             labelPos = "above")
displayPars(v_track) <- list(size = 0.07,
                             fill = gray(0.65),
                             col =  gray(0.65),
                             lwd = 0.5)
displayPars(h_track) <- list(size = 0.5)
displayPars(f1_track) <- list(size = 0.25,
                              showTitle = F)
displayPars(f2_track) <- list(size = 0.25,
                              showTitle = F)
pdf(file = paste0("~/emacs/ubi_QTL_paper/results/",
                  gsub(pattern = " .*",
                       replacement = "",
                       x = Sys.time()),
                  "_gviz_plot.pdf"),
    height = 7, width = 12)
plotTracks(list(i_track, a_track, v_track, h_track, f1_track, f2_track))
dev.off()
#+END_SRC

** Chr VII Variant 411461 Population Frequency                        :R:
   :LOGBOOK:
   - State "DONE"       from              [2021-11-02 Tue 13:20]
   :END:

#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/411461_pop_freq.R
## module load R/3.6.0
## R

## -----
## setup
## load the big, or a reduced VCF, call it "af_data"
base_dir <- "~/emacs/UPS_QTL_paper/variant_analysis/"
load(paste0(base_dir, "PeterGenotypesRMAlt_200505.RData"))

## simplify the name for subsequent work
af_data <- PeterGenotypesRMAlt

## load a table with each variant's chromosome and position
variants <- data.frame(Position = 411461, Chr = "chrVII", Gene = "RPT6", Causal = NA)

## here's the information on the fields supplied in the matrix:
## "GT:AD:DP:GQ:PGT:PID:PL"

## GT = The genotype of this sample at this site. For a diploid organism, the GT
## field indicates the two alleles carried by the sample, encoded by a 0 for the
## REF allele, 1 for the first ALT allele, 2 for the second ALT allele,
## etc. When there is a single ALT allele (by far the more common case), GT will
## be either:
## 0/0 : the sample is homozygous reference
## 0/1 : the sample is heterozygous, carrying 1 copy of each of the REF and ALT alleles
## 1/1 : the sample is homozygous alternate

## AD is the unfiltered allele depth, i.e. the number of reads that support each
## of the reported alleles. All reads at the position (including reads that did
## not pass the variant caller’s filters) are included in this number, except
## reads that were considered uninformative. Reads are considered uninformative
## when they do not provide enough statistical evidence to support one allele
## over another.

## DP is the filtered depth, at the sample level. This gives you the number of
## filtered reads that support each of the reported alleles. You can check the
## variant caller’s documentation to see which filters are applied by
## default. Only reads that passed the variant caller’s filters are included in
## this number. However, unlike the AD calculation, uninformative reads are
## included in DP.
head(af_data)
## GQ = genotype quality (phred score)
ret <- vector(length = nrow(variants))
for (i in 1:nrow(variants)) {
    for (i in 1:nrow(variants)) {

        ## assign a variant to 'x'
        x  <- variants[i, ]

        ## get Yhe row corresponding to the variant from the 1,011 matrix
        gt <- af_data[af_data$CHROM == x[1, "Chr"] &
                      as.numeric(af_data$POS) == as.numeric(x[1, "Position"]), ]

        ## if we unambiguously get a single variant ('if(nrow(gt) == 1)'),
        if(nrow(gt) == 1){

        thisINFO <- gt[,"INFO"]

        ## double 'strsplit' call here to go from, e.g.,
        ## "1/1:1,247:248:99:.:.:10388,717,0" to "1", "1"
        RMAlleles <- strsplit(strsplit(gt$AAA, ":")[[1]][1], "/")[[1]]

        RMAltAllele <- as.numeric(RMAlleles[which(!RMAlleles %in% c("0"))][1])

        ## the matrix already contains the allele frequencies, so
        ## just get the corresponding field, 'strsplit' it, and convert
        ## from chr to numeric; the allele frequency is in the first
        ## element of the list and the 2nd element of the vector
        thisAFField <- strsplit(as.character(thisINFO), ";")[[1]][2]
        if(grepl(pattern = "AF=", x = thisAFField)){
            ret[i] <- as.numeric(strsplit(strsplit(thisAFField, "=")[[1]][2], ",")[[1]][RMAltAllele])
        }
    }
}
}

var_info <- list()

## build the final table and write out
variants$pop_RM_AF <- ret

write.table(x = variants,
            file = "~/emacs/ubi_QTL_paper/results/411461_pop_AF_frequency.csv",
            append = F, quote = F, sep = ",",
            row.names = T, col.names = T)


## -----
## make a table for creating the variant history tree
i <- 1
for (i in 1:nrow(variants)) {

    ## assign a variant to 'x'
    x  <- variants[i, ]

    ## get the row corresponding to the variant from the 1,011 matrix
    gt <- af_data[af_data$CHROM == x[1, "Chr"] &
                  as.numeric(af_data$POS) == as.numeric(x[1, "Position"]), ]

    ## returns a vector of genotypes for the rows of the matrix
    ## we'll later cbind these to create the dataframe that we need
    var_info[[i]] <- sapply(X = gt[, 10:ncol(gt)],
                            FUN = function(strain) {
                                strsplit(x = strain, split = ":")[[1]][1]
                                })
}


var_info_final <- do.call("cbind", var_info)
var_info_final <- as.data.frame(var_info_final)

## these will become the rownames for the final table
strain_list <- colnames(gt[, 10:ncol(gt)])

## these will be the column names for the final table
variant_list <- paste0(variants$Position, "_",
                       variants$Gene)

rownames(var_info_final) <- strain_list
colnames(var_info_final) <- variant_list

write.table(x = var_info_final,
            file = "~/emacs/ubi_QTL_paper/results/QTN_tree_data.csv",
            append = F, quote = F, sep = ",",
            row.names = T, col.names = T)
#+END_SRC

** Tree Diagrams of 411461 Variant                                    :R:
   :LOGBOOK:
   - State "DONE"       from              [2021-11-02 Tue 13:20]
   :END:

#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/411461_variant_tree.R
## author: Christian Brion 2019-12-18

## -----
## setup and load packages
library("plyr")
library("reshape2")
library("ape")
library("tidyverse")

base_dir <- "~/emacs/UPS_QTL_paper/variant_analysis/"

tree <- read.tree(paste0(base_dir, "1011_matrix.tree.newick"))


## -----
## get information about the 1011 Sc strains, provided
Strain1002 <- read.csv(paste0(base_dir, "1002Strains.txt"),
                       header = T,
                       sep="\t",
                       comment.char = "",
                       quote = "")

## rotate one branch of the tree for better presentation
tree <- rotate(tree, 1126, polytom = c(1, 2))


## -----
## this makes the basic tree plot
plot(tree, type = "unrooted",
     use.edge.length = TRUE, #ploting the tree as control
     node.pos = NULL,
     show.tip.label = FALSE,
     show.node.label = FALSE,
     edge.color = "black",
     edge.width = 1,
     edge.lty = 1, font = 3,
     cex = par("cex"), adj = NULL,
     srt = 0, no.margin = FALSE,
     root.edge = FALSE,
     label.offset = 0, underscore = FALSE,
     x.lim = NULL, y.lim = NULL, direction = "rightwards",
     lab4ut = NULL, tip.color = "black", plot = TRUE,
     rotate.tree = 0, open.angle = 0, node.depth = 1,
     align.tip.label = FALSE)


## -----
## find RM and BY on the tree
tree2 <- tree
tree2$tip.label[!(tree2$tip.label %in% c("AAA","ADT"))] <- ""

my_red <- "#B65050"
my_blu <- "#446F9A"
my_pur <- "#7C416B"

## color edges blue for "BY", red for "RM", all else light gray
colbranch <- c(rep("lightgrey", nrow(tree2$edge)))
for (i in 1:nrow(tree2$edge)) {
  edgeN <-c(1:nrow(tree2$edge))[tree2$edge[,2] == i]
  if (i <= length(tree2$tip.label)) {
    if (tree2$tip.label[i] == "AAA") {
      colbranch[edgeN] <- my_red
    } else if (tree2$tip.label[i]=="ADT") {
      colbranch[edgeN] <- my_blu
    } else {
      colbranch[edgeN] <- "lightgrey"
    }
  }
}

## produce the tree with the branches for BY/RM colored
## have to zoom it, but BY/RM colors are there
plot(tree, type = "unrooted",
     use.edge.length = TRUE,
     node.pos = NULL,
     show.tip.label = FALSE,
     show.node.label = FALSE,
     edge.color = colbranch,
     edge.width = 1,
     edge.lty = 1, font = 3,
     cex = par("cex"), adj = NULL,
     srt = 0, no.margin = FALSE,
     root.edge = FALSE,
     label.offset = 0, underscore = FALSE,
     x.lim = NULL, y.lim = NULL, direction = "rightwards",
     lab4ut = NULL, tip.color = "black", plot = TRUE,
     rotate.tree = 0, open.angle = 0, node.depth = 1,
     align.tip.label = FALSE,main="parent")

## load the genotypes at the variants of interest
tree_data <- read.table("~/emacs/ubi_QTL_paper/results/QTN_tree_data.csv",
                        sep = ",", stringsAsFactors = F, header = T)


## load(paste0(base_dir, "IRA2_varGenosStringsOnly_210716.RData"))
## provide strains information to the table above
tree_table <- merge(Strain1002,
                    tree_data,
                    by.x = "Standardized.name",
                    by.y = 0, all.x=T)

head(tree_table)

## allelic count per clade
dcast(tree_table, Clades~X411461_RPT6)
tree_dat <- dcast(tree_table, Clades~X411461_RPT6)

clade_freq <- function(row, ...) {
    input <- tree_dat[row, ]
    (input[4] + (2 * input[5])) / (rowSums(tree_dat[row, 2:ncol(tree_dat)]) * 2)
}
  

## drop strains with unknown alleles (only 2 in this case)
dcast(table2[!str_detect(table2$var3, "\\."),],
      Clades~X411461_RPT6)

sum(colSums(dcast(table2[!str_detect(table2$var3, "\\."),],
                      Clades~X411461_RPT6)[, 2:6]))

colSums(dcast(table2[!str_detect(table2$var3, "\\."),],
                      Clades~X411461_RPT6)[, 2:6])
## population frequency = 37.7%
## 
## (89 / 2; heterozygotes) + 336 (homozygotes) => 380.5
## 380.5 / 1011 => 0.37636 population frequency
## 283 / 380.5 => 0.7437582% of 411461 allele comes from wine clade

#=======================
#coloring the edge of the tree to follow variant evolution

#QTNs <- c("var3", "var4", "var6")

QTN <- colnames(tree_table)[20]

for(QTN in QTNs){

if(QTN %in%  colnames(tree_table)[20:50]) {
    colbranch<-c(rep("grey", nrow(tree$edge)))
    for (i in 1:nrow(tree$edge)) {
        ## coloring the last edges (top of the
        ## tree) according to the allele of the
        ## site of interest in the corresponding strains
      edgeN<-c(1:nrow(tree$edge))[tree$edge[,2]==i]
      if (i <= length(tree$tip.label)) {
        if (is.na(tree_table[,QTN][tree_table$Standardized.name==tree$tip.label[i]])) {
          colbranch[edgeN] <- "grey"
        } else if (tree_table[,QTN][tree_table$Standardized.name==tree$tip.label[i]]=="0/0") {
          colbranch[edgeN] <- my_blu
        } else if (tree_table[,QTN][tree_table$Standardized.name==tree$tip.label[i]]=="1/1") {
          colbranch[edgeN] <- my_red
        } else if (tree_table[,QTN][tree_table$Standardized.name==tree$tip.label[i]]=="0/1") {
          colbranch[edgeN] <- my_pur
        }
      }
    }
}

    ## next section colors in branches
    ## according to their tips, if unambiguous
    ## print(date())
    for (j in 1:100) {
        ##coloring the edges within the tree according to
        ##the colors of the two out-coming edges, going
        ## down at each iteration (100 iterations)
  for (i in (length(tree$tip.label)+1):nrow(tree$edge)) {
    edgeN<-c(1:nrow(tree$edge))[tree$edge[,2]==i]
    if (length(levels(as.factor(colbranch[tree$edge[,1]==i])))==1) {
        ## control same color of the two out-coming edges
        colbranch[edgeN]<-levels(as.factor(colbranch[tree$edge[,1]==i]))
        ## give this color to the inner-edge (if not, stay black)
    }
  }
}
## print(date()) runs in 

    ## generating the tree with the edges colored
    ## by allele version in a svg format (for Inkskape)
    pdf(paste0("~/emacs/ubi_QTL_paper/results/",
               gsub(pattern = " .*",
                    replacement = "",
                    x = Sys.time()),
        "_RPT6_411461_pop_frequency_tree.pdf"),
        width = 10, height = 10)
plot(tree, type = "unrooted", use.edge.length = TRUE,
     node.pos = NULL, show.tip.label = FALSE, show.node.label = FALSE,
     edge.color = colbranch, edge.width = 0.75, edge.lty = 1, font = 3,
     cex = par("cex"), adj = NULL, srt = 0, no.margin = FALSE,
     root.edge = FALSE, label.offset = 0, underscore = FALSE,
     x.lim = NULL, y.lim = NULL, direction = "rightwards",
     lab4ut = NULL, tip.color = "black", plot = TRUE,
     rotate.tree = 0, open.angle = 0, node.depth = 1,
     align.tip.label = FALSE,
     main = strsplit(QTN, "X")[[1]][2])
## legend("bottomright", inset=0.3,
##     legend=c("0/0_0/0_0/0", "1/1_1/1_1/1", "1/1_1/1_0/0", "0/0_1/1_1/1", "0/0_1/1_0/0", "0/1_1/1_1/1", "0/1_1/1_0/0", "0/1_1/1_0/1", "0/1_0/1_0/1", "other")
##     ,fill=c("blue", "red", "firebrick1", "royalblue", "royalblue3", "hotpink", "hotpink1", "hotpink2", "hotpink3", "grey"))
dev.off()
}
#+END_SRC

** Derived/Ancestral Status of 411461 Variant                         :R:
   :LOGBOOK:
   - State "DONE"       from              [2021-11-05 Fri 11:55]
   :END:

#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/411461_derived_ancestral.R

## load the dataframe w/ information on whether the RM allele is derived
load(file = "~/emacs/UPS_QTL_paper/variant_analysis/R_RMDerived_withInfo_200718.RData")

str(RMDerived_withInfo)
## CHROM = chromosome
## POS = variant location
## ID = ?
## REF = reference allele
## ALT_allele = alternative allele
## RMDerived = whether RM allele is derived (T = yes, F = no, NA = unknown)

## simplify the name of the dataset
dat <- RMDerived_withInfo

## information on our QTGs for extracting variants from defined genomic ranges 
genes <- "RPT6"
chr   <- "chrVII"
## genomic ranges for QTGs; go 500 bp up/down to get promoter/terminator
gene_lower_value <- 411400
gene_upper_value <- 411600

qtg_table <- data.frame(gene = genes,
                        chr = chr,
                        lower = gene_lower_value,
                        upper = gene_upper_value)

qtg_out <- list()

for(i in 1:nrow(qtg_table)) {

    ## extract the information for each gene's genomic range;
    ## add to a list that we'll then collapse to a dataframe
    q <- dat[dat$CHROM == qtg_table[i, "chr"] &
             dat$POS > qtg_table[i, "lower"] &
             dat$POS < qtg_table[i, "upper"], ]
    q$gene <- rep(qtg_table[i, "gene"], nrow(q))
    qtg_out[[i]] <- q

}

qtg_final <- do.call("rbind", qtg_out)

qtg_final ## RM allele at 411461 is derived

#+END_SRC

** Averaged Peaks Table                                               :R:
   :LOGBOOK:
   - State "DONE"       from              [2021-11-07 Sun 20:58]
   :END:
#+BEGIN_SRC R :results output 

dat <- read.table(file = paste0("~/data/illumina/",
                                "2021.10.26_FPFA005_UBI_replicate_analyses/",
                                "peaks/ODC_Rpn4_merged_replicating_peaks.csv"),
                 header = T, sep = ",", stringsAsFactors = F)

dat$avg_LOD <- (dat$rep_1_LOD + dat$rep_2_LOD) / 2
dat$avg_delta_AF <- (dat$rep_1_delta_AF + dat$rep_2_delta_AF) / 2
dat$avg_right_Index <- (dat$rep_1_right_Index + dat$rep_2_right_Index) / 2
dat$avg_left_Index <- (dat$rep_1_left_Index + dat$rep_2_left_Index) / 2
dat$avg_max_Index <- (dat$rep_1_max_Index + dat$rep_2_max_Index) / 2

data.frame(reporter = dat$reporter,
           chr = dat$chr,
           LOD = dat$avg_LOD,
           delta_AF = dat$avg_delta_AF,
           left_index = dat$avg_left_Index,
           max_index = dat$avg_max_Index,
           right_index = dat$avg_right_Index)

#+END_SRC

|----------+------------+-------+--------+---------------+------------+-------------|
| Reporter | Chromosome |   LOD |    AFD | Peak Position | Left Index | Right Index |
|----------+------------+-------+--------+---------------+------------+-------------|
| ODC_TFT  |          2 |  9.76 |  0.099 |         69800 |      32850 |      107100 |
| ODC_TFT  |          2 |  7.13 | -0.121 |        418100 |     358850 |      462650 |
| ODC_TFT  |          4 |  5.64 | -0.101 |         85150 |      30400 |      127400 |
| ODC_TFT  |          5 | 12.83 | -0.149 |        291350 |     247700 |      325650 |
| ODC_TFT  |          7 |  8.14 | -0.150 |         20000 |          0 |       52800 |
| ODC_TFT  |          7 | 28.74 |  0.225 |        409000 |     390050 |      431700 |
| ODC_TFT  |         10 | 16.36 |  0.182 |        666850 |     649350 |      691550 |
| ODC_TFT  |         12 |  8.13 |  0.111 |        768150 |     666200 |      846700 |
| ODC_TFT  |         13 | 18.96 |  0.192 |         47800 |      25200 |       75850 |
| ODC_TFT  |         13 |  7.96 |  0.127 |        410900 |     377350 |      450100 |
| ODC_TFT  |         14 |  8.81 | -0.110 |        441750 |     381400 |      501600 |
| Rpn4_TFT |          4 | 12.64 | -0.133 |        240600 |     213200 |      309150 |
| Rpn4_TFT |          5 | 10.09 | -0.127 |        259650 |     218250 |      294900 |
| Rpn4_TFT |          7 | 10.21 | -0.148 |         88550 |      53550 |      141350 |
| Rpn4_TFT |          7 |  6.80 | -0.111 |        882500 |     840650 |      926150 |
| Rpn4_TFT |         12 | 40.11 |  0.233 |        672850 |     661800 |      685750 |
| Rpn4_TFT |         14 | 16.58 |  0.145 |        544150 |     497300 |      574600 |
| Rpn4_TFT |         15 | 30.00 | -0.224 |        167400 |     142600 |      186200 |
|----------+------------+-------+--------+---------------+------------+-------------|

** QTL Sharing with N-end Rule QTLs Table/Figure                      :R:
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2021-11-23 Tue 14:44]
   - State "TODO"       from              [2021-11-23 Tue 13:34]
   :END:

#+NAME: proteasome_activity_averaged_QTL_table
|----------+------------+-------+--------+---------------+------------+-------------|
| Reporter | Chromosome |   LOD |    AFD | Peak Position | Left Index | Right Index |
|----------+------------+-------+--------+---------------+------------+-------------|
| ODC_TFT  |          2 |  9.76 |  0.099 |         69800 |      32850 |      107100 |
| ODC_TFT  |          2 |  7.13 | -0.121 |        418100 |     358850 |      462650 |
| ODC_TFT  |          4 |  5.64 | -0.101 |         85150 |      30400 |      127400 |
| ODC_TFT  |          5 | 12.83 | -0.149 |        291350 |     247700 |      325650 |
| ODC_TFT  |          7 |  8.14 | -0.150 |         20000 |          0 |       52800 |
| ODC_TFT  |          7 | 28.74 |  0.225 |        409000 |     390050 |      431700 |
| ODC_TFT  |         10 | 16.36 |  0.182 |        666850 |     649350 |      691550 |
| ODC_TFT  |         12 |  8.13 |  0.111 |        768150 |     666200 |      846700 |
| ODC_TFT  |         13 | 18.96 |  0.192 |         47800 |      25200 |       75850 |
| ODC_TFT  |         13 |  7.96 |  0.127 |        410900 |     377350 |      450100 |
| ODC_TFT  |         14 |  8.81 | -0.110 |        441750 |     381400 |      501600 |
| Rpn4_TFT |          4 | 12.64 | -0.133 |        240600 |     213200 |      309150 |
| Rpn4_TFT |          5 | 10.09 | -0.127 |        259650 |     218250 |      294900 |
| Rpn4_TFT |          7 | 10.21 | -0.148 |         88550 |      53550 |      141350 |
| Rpn4_TFT |          7 |  6.80 | -0.111 |        882500 |     840650 |      926150 |
| Rpn4_TFT |         12 | 40.11 |  0.233 |        672850 |     661800 |      685750 |
| Rpn4_TFT |         14 | 16.58 |  0.145 |        544150 |     497300 |      574600 |
| Rpn4_TFT |         15 | 30.00 | -0.224 |        167400 |     142600 |      186200 |
|----------+------------+-------+--------+---------------+------------+-------------|

#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/QTL_N-end_overlaps.R
## -----
## setup
library("lattice")
library("viridis")

dat <- read.table(file = "~/emacs/ubi_QTL_paper/tables/replicate_average_QTL_table.csv",
                  sep = ",", header = T, stringsAsFactors = F)

                 ## Ac/N-end
amino_acids <- c("Ala", "Cys", "Gly", "Met", "Pro", "Ser", "Thr", "Val",
                 ## Arg/N-end type I
                 "Arg", "Asn", "Asp", "Gln", "Glu", "His", "Lys",
                 ## Arg/N-end type II
                 "Ile", "Leu", "Phe", "Trp", "Tyr")

## shared qtls = V, VIIa, XII
          ## ODC
qtls <- c(paste0("ODC_", c("IIa", "IIb", "IVa", "V", "VIIa", "VIIb",
                           "X", "XII", "XIIIa", "XIIIb", "XIVa")),
          ## rpn4
          paste0("rpn4_", c("IVb", "V", "VIIa",
                            "VIIc", "XII", "XIVb", "XV")))
qtls_rev <- rev(qtls)


## -----
## unordered heatmap:

## create a dataframe for making a grid:
shared_qtls <- as.data.frame(matrix(data = 0,
                                    nrow = 18, ncol = 20))

row.names(shared_qtls) <- qtls_rev
colnames(shared_qtls) <- amino_acids

## rpn4 xv         ## Ala Cys Gly Met   Pro Ser Thr Val Arg   Asn   Asp    Gln Glu   His Lys    Ile Leu Phe   Trp Tyr
shared_qtls[1, ] <- c(0,  0,  0,  4050, 0,  0,  0,  0,  8450, 4300, 10350, 0,  7100, 9550, 300, 0,  0,  7600, 0,  0)
## rpn4 xiv        ## Ala Cys Gly Met Pro Ser Thr    Val Arg Asn Asp     Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[2, ] <- c(0,  0,  0,  0,  0,  0,  70200, 0,  0,  0,  76400,  0,  0,  0,  0,  0,  0,  0,  0,  0)
## rpn4 xii        ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn Asp     Gln Glu    His     Lys Ile     Leu Phe Trp Tyr
shared_qtls[3, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  19100,  0,  7250,  54650,  0,  23200,  0,  0,  0,  0)
## rpn4 VIIc       ## Ala Cys Gly Met Pro Ser Thr Val Arg     Asn    Asp Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[4, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  20550,  8600,  9250,  0,  0,  0,  0,  0,  0,  0,  0,  0)
## rpn4 VIIa       ## Ala     Cys    Gly    Met Pro    Ser    Thr    Val    Arg Asn    Asp Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[5, ] <- c(43800,  37300, 60000, 0,  56400, 36000, 22800, 53300, 0,  74350, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0)
## rpn4 v          ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn Asp Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[6, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0)
## rpn4 iv          ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn Asp Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[7, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0)
## odc xiv         ## Ala Cys Gly Met    Pro    Ser Thr Val Arg Asn Asp Gln Glu His    Lys    Ile Leu    Phe    Trp    Tyr
shared_qtls[8, ] <- c(0,  0,  0,  41850, 17450, 0,  0,  0,  0,  0,  0,  0,  0,  17000, 23050, 0,  17200, 22000, 24350, 26250)
## odc xiiib       ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn    Asp Gln Glu His    Lys Ile Leu Phe Trp Tyr
shared_qtls[9, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  86050, 0,  0,  0,  88050, 0,  0,  0,  0,  0,  0)
## odc xiiia       ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn Asp Gln Glu His    Lys Ile Leu Phe   Trp Tyr
shared_qtls[10, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  27200, 0,  0,  0,  9750, 0,  0)
## odc xii          ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn Asp Gln Glu His    Lys Ile Leu Phe Trp Tyr
shared_qtls[11, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  40650, 0,  0,  0,  0,  0,  0)
## odc x          ## Ala     Cys     Gly Met Pro Ser Thr Val     Arg Asn Asp Gln    Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[12, ] <- c(55550, 40750,  0,  0,  0,  0,  0, 11500,  0,  0,  0,  33700, 0,  0,  0,  0,  0,  0,  0,  0)
## odc viib        ## Ala    Cys    Gly   Met Pro    Ser   Thr   Val   Arg Asn     Asp Gln Glu His Lys Ile Leu Phe  Trp    Tyr
shared_qtls[13, ] <- c(13950, 25000, 450,  0,  15150, 3350, 4600, 8100, 0,  74050,  0,  0,  0,  0,  0,  0,  0,  700, 12600, 41900)
## odc viia         ## Ala Cys Gly Met Pro Ser Thr    Val Arg Asn   Asp Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[14, ] <- c(0,  0,  0,  0,  0,  0,  91350, 0,  0,  5800, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0)
## odc v           ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn Asp Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[15, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0)
## odc iva         ## Ala Cys Gly    Met Pro Ser Thr Val Arg Asn Asp Gln   Glu    His    Lys Ile Leu Phe Trp Tyr
shared_qtls[16, ] <- c(0,  0,  48400, 0,  0,  0,  0,  0,  0,  0,  0,  8450, 34150, 12650, 0,  0,  0,  0,  0,  0)
## odc iib         ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn Asp Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[17, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0)
## odc iia         ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn Asp Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[18, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0)

cols <- c(gray(0.8), magma(n = 13, alpha = 0.8)[2:13])
col_range <- c(0, seq(from = 1, to = 1.0001e5, by = 1e4))

## make a separate version where the max n. boxes is 11 and
## stack the QTLs by number shared, so ODC chr VII is the top
## and you descend from there.  Add the reporter name in ea. 
## square - the message then is about n. QTLs shared less so 
## than pathway, but I think it'll make the point more effectively
pdf(file = "~/emacs/ubi_QTL_paper/figures/sharing_heatmap_unordered.pdf",
    height = 6, width = 9.5)
levelplot(t(as.matrix(shared_qtls)),
          xlab = "",
          ylab = "",
          at = col_range,
          col.regions = cols,
          scales = list(tck = c(1, 0),
                        x = list(cex = 1.2,
                                 rot = 45),
                        y = list(cex = 1.2,
                                 at = 1:18,
                                 labels = gsub(pattern = ".+_",
                                               replacement = "",
                                               x = row.names(shared_qtls)))),
          colorkey = list(space = "right",
                          labels = as.character(c(seq(from = 0, to = 100, by = 10))),
                          at = c(seq(from = 0, to = 1e5, by = 1e4)),
                          col = cols[2:length(cols)],
                          tck = 1.2,
                          axis.text = list(cex = 1.1)),
          par.settings = list(par.xlab.text = list(cex = 1.4),
                              clip = list(panel = F),
                              layout.widths = list(left.padding = 10,
                                                   right.padding = 5),
                              layout.heights = list(bottom.padding = 3)),
          panel = function(...) {
              panel.levelplot(...,
                              border = gray(0.5),
                              border.lty = 1,
                              border.lwd = 0.5)
              panel.segments(x0 = c(-2.3, -2.3),
                             x1 = c(-2.3, -2.3),
                             y0 = c(1, 8),
                             y1 = c(7, 18),
                             lwd = 1.75,
                             col = gray(0.2))
              panel.text(x = c(-4.3, -4.3),
                         y = c(4, 13),
                         labels = c("Rpn4 TFT\nQTLs",
                                    "ODC TFT\nQTLs"))
              panel.text(x = 25,
                         y = 9.5,
                         labels = "Abs. Distance between QTL Peaks (kb)",
                         srt = 90,
                         cex = 1.2)
              panel.segments(x0 = c(1, 9),
                             x1 = c(8, 20),
                             y0 = c(-1.8, -1.8),
                             y1 = c(-1.8, -1.8),
                             lwd = 1.75,
                             col = gray(0.2))
              panel.text(x = c(4.5, 14.5),
                         y = c(-2.4, -2.4),
                         labels = c("Ac/N-end Rule QTLs", "Arg/N-end Rule QTLs"),
                         cex = 1.2)
          })
dev.off()


## -----
## ordered heatmap
## this is a 'waffle' plot that shows which
## ubiquitin-independent QTLs overlap w/
## which N-end rule QTLs:

ordered_qtls <- as.data.frame(matrix(data = 0,
                                     nrow = 18, ncol = 11))

row.names(ordered_qtls) <- qtls_rev
colnames(ordered_qtls)  <- as.character(1:11)

ordered_aa_names <- as.data.frame(matrix(data = 0,
                                     nrow = 18, ncol = 11))

aas_ordered <- c("Ala", "Cys", "Gly", "Met",
                 "Pro", "Ser", "Thr", "Val",
                 "Arg", "Asn", "Asp", "Gln",
                 "Glu", "His", "Lys", "Ile",
                 "Leu", "Phe", "Trp", "Tyr")


## rpn4 xv         ## Ala Cys Gly Met   Pro Ser Thr Val Arg   Asn   Asp    Gln Glu   His Lys    Ile Leu Phe   Trp Tyr
shared_qtls[1, ] <- c(0,  0,  0,  4050, 0,  0,  0,  0,  8450, 4300, 10350, 0,  7100, 9550, 300, 0,  0,  7600, 0,  0)
out <- shared_qtls[1, shared_qtls[1, ] > 0][order(shared_qtls[1, shared_qtls[1, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- names(out)
ordered_qtls[1, ]     <- out
ordered_aa_names[1, ] <- out_names

## rpn4 xiv        ## Ala Cys Gly Met Pro Ser Thr    Val Arg Asn Asp     Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[2, ] <- c(0,  0,  0,  0,  0,  0,  70200, 0,  0,  0,  76400,  0,  0,  0,  0,  0,  0,  0,  0,  0)
out <- shared_qtls[2, shared_qtls[2, ] > 0][order(shared_qtls[2, shared_qtls[2, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- names(out)
ordered_qtls[2, ]     <- out
ordered_aa_names[2, ] <- out_names

## rpn4 xii        ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn Asp     Gln Glu    His     Lys Ile     Leu Phe Trp Tyr
shared_qtls[3, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  19100,  0,  7250,  54650,  0,  23200,  0,  0,  0,  0)
out <- shared_qtls[3, shared_qtls[3, ] > 0][order(shared_qtls[3, shared_qtls[3, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- names(out)
ordered_qtls[3, ]     <- out
ordered_aa_names[3, ] <- out_names

## rpn4 VIIc       ## Ala Cys Gly Met Pro Ser Thr Val Arg     Asn    Asp Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[4, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  20550,  8600,  9250,  0,  0,  0,  0,  0,  0,  0,  0,  0)
out <- shared_qtls[4, shared_qtls[4, ] > 0][order(shared_qtls[4, shared_qtls[4, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- names(out)
ordered_qtls[4, ]     <- out
ordered_aa_names[4, ] <- out_names

## rpn4 VIIa       ## Ala     Cys    Gly    Met Pro    Ser    Thr    Val    Arg Asn    Asp Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[5, ] <- c(43800,  37300, 60000, 0,  56400, 36000, 22800, 53300, 0,  74350, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0)
out <- shared_qtls[5, shared_qtls[5, ] > 0][order(shared_qtls[5, shared_qtls[5, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- names(out)
ordered_qtls[5, ]     <- out
ordered_aa_names[5, ] <- out_names

## rpn4 v          ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn Asp Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[6, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0)
out <- shared_qtls[6, shared_qtls[6, ] > 0][order(shared_qtls[6, shared_qtls[6, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- names(out)
ordered_qtls[6, ]     <- out
ordered_aa_names[6, ] <- out_names

## rpn4 iv          ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn Asp Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[7, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0)
out <- shared_qtls[7, shared_qtls[7, ] > 0][order(shared_qtls[7, shared_qtls[7, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- names(out)
ordered_qtls[7, ]     <- out
ordered_aa_names[7, ] <- out_names

## odc xiv         ## Ala Cys Gly Met    Pro    Ser Thr Val Arg Asn Asp Gln Glu His    Lys    Ile Leu    Phe    Trp    Tyr
shared_qtls[8, ] <- c(0,  0,  0,  41850, 17450, 0,  0,  0,  0,  0,  0,  0,  0,  17000, 23050, 0,  17200, 22000, 24350, 26250)
out <- shared_qtls[8, shared_qtls[8, ] > 0][order(shared_qtls[8, shared_qtls[8, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- names(out)
ordered_qtls[8, ]     <- out
ordered_aa_names[8, ] <- out_names

## odc xiiib       ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn    Asp Gln Glu His    Lys Ile Leu Phe Trp Tyr
shared_qtls[9, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  86050, 0,  0,  0,  88050, 0,  0,  0,  0,  0,  0)
out <- shared_qtls[9, shared_qtls[9, ] > 0][order(shared_qtls[9, shared_qtls[9, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- names(out)
ordered_qtls[9, ]     <- out
ordered_aa_names[9, ] <- out_names

## odc xiiia       ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn Asp Gln Glu His    Lys Ile Leu Phe   Trp Tyr
shared_qtls[10, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  27200, 0,  0,  0,  9750, 0,  0)
out <- shared_qtls[10, shared_qtls[10, ] > 0][order(shared_qtls[10, shared_qtls[10, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- names(out)
ordered_qtls[10, ]     <- out
ordered_aa_names[10, ] <- out_names

## odc xii          ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn Asp Gln Glu His    Lys Ile Leu Phe Trp Tyr
shared_qtls[11, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  40650, 0,  0,  0,  0,  0,  0)
out <- shared_qtls[11, shared_qtls[11, ] > 0][order(shared_qtls[11, shared_qtls[11, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- c("His", rep("", 10))
ordered_qtls[11, ]     <- out
ordered_aa_names[11, ] <- out_names

## odc x          ## Ala     Cys     Gly Met Pro Ser Thr Val     Arg Asn Asp Gln    Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[12, ] <- c(55550, 40750,  0,  0,  0,  0,  0, 11500,  0,  0,  0,  33700, 0,  0,  0,  0,  0,  0,  0,  0)
out <- shared_qtls[12, shared_qtls[12, ] > 0][order(shared_qtls[12, shared_qtls[12, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- names(out)
ordered_qtls[12, ]     <- out
ordered_aa_names[12, ] <- out_names

## odc viib        ## Ala    Cys    Gly   Met Pro    Ser   Thr   Val   Arg Asn     Asp Gln Glu His Lys Ile Leu Phe  Trp    Tyr
shared_qtls[13, ] <- c(13950, 25000, 450,  0,  15150, 3350, 4600, 8100, 0,  74050,  0,  0,  0,  0,  0,  0,  0,  700, 12600, 41900)
out <- shared_qtls[13, shared_qtls[13, ] > 0][order(shared_qtls[13, shared_qtls[13, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- names(out)
ordered_qtls[13, ]     <- out
ordered_aa_names[13, ] <- out_names

## odc viia         ## Ala Cys Gly Met Pro Ser Thr    Val Arg Asn   Asp Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[14, ] <- c(0,  0,  0,  0,  0,  0,  91350, 0,  0,  5800, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0)
out <- shared_qtls[14, shared_qtls[14, ] > 0][order(shared_qtls[14, shared_qtls[14, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- names(out)
ordered_qtls[14, ]     <- out
ordered_aa_names[14, ] <- out_names

## odc v           ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn Asp Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[15, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0)
out <- shared_qtls[15, shared_qtls[15, ] > 0][order(shared_qtls[15, shared_qtls[15, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- names(out)
ordered_qtls[15, ]     <- out
ordered_aa_names[15, ] <- out_names

## odc iva         ## Ala Cys Gly    Met Pro Ser Thr Val Arg Asn Asp Gln   Glu    His    Lys Ile Leu Phe Trp Tyr
shared_qtls[16, ] <- c(0,  0,  48400, 0,  0,  0,  0,  0,  0,  0,  0,  8450, 34150, 12650, 0,  0,  0,  0,  0,  0)
out <- shared_qtls[16, shared_qtls[16, ] > 0][order(shared_qtls[16, shared_qtls[16, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- names(out)
ordered_qtls[16, ]     <- out
ordered_aa_names[16, ] <- out_names

## odc iib         ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn Asp Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[17, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0)
out <- shared_qtls[17, shared_qtls[17, ] > 0][order(shared_qtls[17, shared_qtls[17, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- names(out)
ordered_qtls[17, ]     <- out
ordered_aa_names[17, ] <- out_names

## odc iia         ## Ala Cys Gly Met Pro Ser Thr Val Arg Asn Asp Gln Glu His Lys Ile Leu Phe Trp Tyr
shared_qtls[18, ] <- c(0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0)
out <- shared_qtls[18, shared_qtls[18, ] > 0][order(shared_qtls[18, shared_qtls[18, ] > 0])]
out <- unlist(c(out, rep(0, 11 - length(out))))
out_names <- names(out)
ordered_qtls[18, ]     <- out
ordered_aa_names[18, ] <- out_names

ac_n_ends <- c("Ala", "Cys", "Gly", "Met", "Pro", "Ser", "Thr", "Val")

## make the heatmap
cols <- c(gray(0.95), magma(n = 13, alpha = 0.8)[2:13])

pdf(file = "~/emacs/ubi_QTL_paper/figures/final_figures/figure_05_QTL_sharing.pdf",
    height = 7, width = 8)
levelplot(t(as.matrix(ordered_qtls)),
          xlab = "",
          ylab = "",
          at = col_range,
          col.regions = cols,
          scales = list(tck = c(1, 0),
                        x = list(cex = 1.2,
                                 labels = as.character(1:11)),
                        y = list(cex = 1.2,
                                 labels = gsub(pattern = ".+_",
                                               replacement = "",
                                               x = row.names(ordered_qtls)))),
          colorkey = list(space = "right",
                          labels = as.character(c(seq(from = 0, to = 100, by = 10))),
                          at = c(seq(from = 0, to = 1e5, by = 1e4)),
                          col = cols[2:length(cols)],
                          tck = 1.2,
                          axis.text = list(cex = 1.1)),
          par.settings = list(par.xlab.text = list(cex = 1.4),
                              clip = list(panel = F),
                              layout.widths = list(left.padding = 3,
                                                   right.padding = 0.5),
                              layout.heights = list(bottom.padding = 3,
                                                    top.padding = 0)),
          panel = function(...) {
              panel.levelplot(...,
                              border = gray(0.7),
                              border.lty = 1,
                              border.lwd = 0.5)
              ## reporter separation lines
              panel.segments(x0 = c(-1.6, -1.6),
                             x1 = c(-1.6, -1.6),
                             y0 = c(1, 8),
                             y1 = c(7, 18),
                             lwd = 1.75,
                             col = gray(0.2))
              ## reporter text
              panel.text(x = c(-3.0, -3.0),
                         y = c(4, 13),
                         labels = c("Rpn4 TFT\nQTLs",
                                    "ODC TFT\nQTLs"))
              ## colorkey title
              panel.text(x = c(14.5, 15.2),
                         y = c(9.5, 9.5),
                         labels = c("Distance between QTL Peaks Detected with",
                                    "N-Degron and Proteasome Activity Reporters (kb)"),
                         srt = 90,
                         cex = 1.2)
              for(i in 1:nrow(t(ordered_aa_names))) {
                  for(j in 1:ncol(t(ordered_aa_names))) {
                      panel.text(x = i,
                                 y = j,
                                 labels = t(ordered_aa_names)[i, j],
                                 col = ifelse(max(t(ordered_aa_names)[i, j] == ac_n_ends) >= 1,
                                               yes = "skyblue",
                                               no = "mintcream"),
                                 font = ifelse(max(t(ordered_aa_names)[i, j] == ac_n_ends) >= 1,
                                               yes = "plain",
                                               no = "plain"))
                  }}
              panel.text(x = c(6, 6),
                         y = c(-1, -1.7),
                         labels = c("N-Degrons with a QTL Overlapping",
                                    "Indicated Proteasome Activity QTL"),
                         cex = 1.2)
              ## N-end rule pathway legend
              panel.rect(xleft = 7.6,
                         xright = 11.4,
                         ytop = 18.4,
                         ybottom = 16.6,
                         col = gray(0.4),
                         border = gray(0.2))
              ## legend text 
              panel.text(x = c(9.45, 9.55),
                         y = c(17.9, 17.1),
                         labels = c("Ac/N-end Rule", "Arg/N-end Rule"),
                         col = c("skyblue", "mintcream"),
                         cex = 1.0)
})
## code end 
dev.off()
#+END_SRC

#+BEGIN_EXPORT latex
\scalebox{0.7}{
\begin{tabular}{llrrrrr}
\hline
Reporters & Chromosome & LOD & AFD & Peak Position & Left Index & Right Index\\
\hline
ODC degron/N-end Rule (3) & IV & 7.12 & -0.108 & 78825 & 5600 & 110075\\
ODC degron/Rpn4 degron & V & 11.46 & -0.138 & 275500 & 232975 & 310275\\
ODC degron/Rpn4 degron/N-end Rule (8) & VIIa & 9.24 & -0.149 & 125200 & 91475 & 166375\\
ODC degron/N-end Rule (10) & VIIb & 16.21 & 0.173 & 409450 & 389250 & 436750\\
Rpn4 degron/N-end Rule (3) & VIIc & 7.42 & -0.115 & 873575 & 839950 & 903725\\
ODC degron/N-end Rule (3) & X & 11.19 & 0.141 & 626100 & 588400 & 660250\\
ODC degron/Rpn4 degron/N-end Rule (5) & XII & 10.21 & 0.113 & 665600 & 636800 & 690250\\
ODC degron/N-end Rule (2) & XIII & 16.95 & 0.170 & 47800 & 25200 & 75850\\
ODC degron/N-end Rule (1) & XIII & 15.345 & 0.1573 & 341525 & 366875 & 394975\\
ODC degron/N-end Rule (9) & XIV & 32.50 & -0.226 & 464275 & 448675 & 478825\\
Rpn4 degron/N-end Rule (8) & XV & 18.30 & -0.176 & 163350 & 138600 & 186200\\
\hline
\end{tabular}
\end{tabular}
}
#+END_EXPORT

** BY and RM Color Setup                                       :R:HELPER:
   :LOGBOOK:
   - State "DONE"       from              [2022-03-07 Mon 14:57]
   :END:
#+BEGIN_SRC R :tangle ~/emacs/R/functions/color_setup_BY_RM.R
col_by <- "#2166ACFF"
col_rm <- "#BF3232FF"
#+END_SRC

** RPT6 Fine-Mapping Color Setup                               :R:HELPER:
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-03-03 Thu 11:17]
   - State "TODO"       from              [2022-02-23 Wed 13:39]
   :END:

#+BEGIN_SRC R 

## -----
## linking colors to strain names in R
## I think I should be able to make something
## akin to an lisp association list where
## there is a strain name and associated color
## 2021.01.27 - new colors for all strains
col_by_strain       <- c(color = "#2166ACFF", name = ".*BY_strain.*")
col_rm_strain       <- c(color = "#BF3232FF", name = ".*RM_strain.*")
#+END_SRC

** Auto Process a Set of FCS Files                             :R:HELPER:
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-02-23 Wed 13:38]
   - State "TODO"       from              [2022-02-18 Fri 12:39]
   :END:
#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/auto_process_fcs_files.R :results silent
## -----
## START USER INPUT
## no trailing '/' at the end!
## -----
## setup

## not used if you're calling this externally, but can
## uncomment the line below if you're using it manually
## base_dir <- "~/data/flow/2022.01.19_RPT6_fine-mapping_rpn4_TFT_flow"
## END USER INPUT 

## -----
## load all required packages
source("~/emacs/R/functions/load_flow_packages.R")

needed_dirs <- c("/fcs", "/results", "/tables",
                 "/scripts", "/dataframes", "/sessions",
                 "/dataframes/gated", "/dataframes/ungated")

dir_maker <- function(x){
    ifelse(!dir.exists(paths = paste0(base_dir, x)),
           dir.create(path = paste0(base_dir, x)),
           paste0("dir ", paste0(base_dir, x), " exists."))
}

sapply(X = needed_dirs, FUN = dir_maker)
work_dir       <- paste0(base_dir, "/fcs")
results_dir    <- paste0(base_dir, "/results")
tables_dir     <- paste0(base_dir, "/tables")
sessions_dir   <- paste0(base_dir, "/sessions")
frame_dir      <- paste0(base_dir, "/dataframes")
gated_dir      <- paste0(frame_dir, "/gated/")
ungated_dir    <- paste0(frame_dir, "/ungated/")
out_log        <- paste0(results_dir, "/output_log")


## -----
## read in all the fcs files in a directory 
all_flow <- read.flowSet(files = NULL,
                         path = work_dir,
                         pattern = ".*.fcs",
                         alter.names = T,
                         min.limit = 10)


## get the number of cells per file; write output
cells_per_file <- fsApply(x = all_flow,
                          FUN = function(x) {
                              nrow(as.data.frame(exprs(x))) 
                          })

## write information string to the output log
read_string <- paste0("1. On ",
                      Sys.time(),
                      " files were read in via 'read.flowSet'.\n\nCells per file:\n")

write(x = read_string,
      file = out_log,
      append = F)

## for nicely aligned output in the resulting file
cat(capture.output(cells_per_file),
    file = out_log,
    append = T,
    sep = "\n")


## -----
## filter the data on forward scatter (FSC) to remove debris
## set up a gate 
fsc_min <- rectangleGate(filterId = "fsc_min",
                         "FSC.A" = c(5e4, 5e6))

## use 'Subset' to retain only cells with 
all_filtered <- Subset(x = all_flow,
                       subset = fsc_min)

range_string <- paste0("\n\n2. On ", Sys.time(),
                       "Filtered fsc files to retain only cells w/ FSC > 5e4",
                       "\n\nFSC ranges for each file:\n\n")

write(x = range_string,
      file = out_log,
      append = T)

## check that the filter works
fsc_range <- fsApply(x = all_filtered,
                     FUN = function(x) {
                         range(as.data.frame(exprs(x$FSC.A))) 
                     })

cat(capture.output(fsc_range),
    file = out_log,
    append = T,
    sep = "\n")

## how many events did we remove? 
## typically, not many
removed_string <- paste0("\n\nKept the following number of cells per file\n\n")

write(x = removed_string,
      file = out_log,
      append = T)

fsc_removed <- fsApply(x = all_filtered,
                       FUN = function(x) {
                           nrow(as.data.frame(exprs(x))) 
                       })

cat(capture.output(fsc_removed),
    file = out_log,
    append = T,
    sep = "\n")


## -----
## now convert flowframes to dataframes and merge to a single frame
## start w/ ungated cells
ungated_frames <- fsApply(x = all_filtered,
                          FUN = function(x) {
                              ## extract file name; we'll
                              ## add this to the dataframe
                              file_name <- rep(x = x@description$GUID,
                                               times = nrow(as.data.frame(exprs(x))))
                              
                              ## extract the time the sample was run;
                              ## then convert to a numeric value
                              ## BTIM = "beginning time"
                              file_time <- rep(x = x@description$`$BTIM`,
                                               times = nrow(as.data.frame(exprs(x))))
                              time_conv <- HmsToSec(file_time)
                              
                              ## combine flow data and file name
                              ## into a single data frame 
                              cbind(as.data.frame(exprs(x)),
                                    file_name,
                                    file_time,
                                    time_conv)
})

ungated_final <- do.call("rbind", ungated_frames)


## -----
## log fluorescence values and compute TFT ratio
ungated_final$log_GFP   <- log10(x = ungated_final$eGFP.A)
ungated_final$log_RFP   <- log10(x = ungated_final$mCherry.A)
ungated_final$TFT_ratio <- -log(x = ungated_final$log_RFP / ungated_final$log_GFP,
                                base = 2)


## -----
## now gate the cells to capture the haploid cell population.
## we identify haploids as a sharp peak in the lower end of
## the fsc density plot.  I take 10% above and below the
## max density value.
ungated_final$file_string <- as.character(ungated_final$file_name)

## ungated = all cells
ungated_final$ungated <- rep(T, nrow(ungated_final))

## gated = all cells w/in 10% +/- FSC max density
densities <- lapply(X = unique(ungated_final$file_string),
                    FUN = function(x) {
                        
                        ## file name for dataframe creation
                        f_name <- x

                        ## per file dataframe for calculating density
                        dat  <- ungated_final[ungated_final$file_name == f_name, ]
                        
                        ## get the density for FSC
                        dens <- density(dat$FSC.A)
                        
                        ## 10% +/- the max FSC density peak
                        dens_max <- dens$x[which.max(dens$y)]
                        dens_up <- (0.1 * dens_max) + dens_max
                        dens_down <- dens_max - (0.1 * dens_max)
                        data.frame(f_name, dens_up, dens_down, stringsAsFactors = F)
                    })

## bind each file's density estimate into a single dataframe
densities <- do.call("rbind", densities)

ungated_final$gated <- sapply(X = 1:nrow(ungated_final), 
                              FUN = function(x) {
                                  
                                  ## get file name for current row
                                  f_name <- ungated_final[x, "file_string"]

                                  ## get corresponding row of density estimates
                                  dens_row <- densities[densities$f_name == f_name, ]
                                  
                                  ## 10% +/- the max FSC density peak
                                  dens_up   <- dens_row$dens_up
                                  dens_down <- dens_row$dens_down
                                  
                                  ## create a gate and subset to keep cells in range
                                  ifelse(ungated_final[x, "FSC.A"] > dens_down &
                                         ungated_final[x, "FSC.A"] < dens_up,
                                         yes = T, no = F)

                     })


ungated_per_file <- tapply(X = ungated_final$FSC.A,
                           INDEX = ungated_final$file_name,
                           FUN = length)

gated_per_file <- tapply(X = ungated_final$FSC.A[ungated_final$gated == T],
                         INDEX = ungated_final$file_name[ungated_final$gated == T],
                         FUN = length)

fsc_gated_counts <- data.frame(kept = gated_per_file,
                               excluded = ungated_per_file - gated_per_file,
                               percent = gated_per_file / ungated_per_file)

gate_string <- paste0("\n3. On ", Sys.time(),
                      " Filtered cells to grab 10% +/- the central FSC peak\n\n",
                      "The following counts were obtained:\n")

write(x = gate_string,
      file = out_log,
      append = T)

cat(capture.output(fsc_gated_counts),
    file = out_log,
    append = T,
    sep = "\n")


## -----
## write out summary statistics for gated and ungated files
## extract only numeric parameters for summary statistics 
f_params <- colnames(ungated_final)
f_params <- f_params[sapply(X = f_params,
           FUN = function(x) {
               is.numeric(ungated_final[, x])
               })]

## -----
## write out summary statistics for all parameters 
## make sure all columns are printed together 
options(width = 200)
for(p in 1:length(f_params)) {

    gated_final    <- ungated_final[ungated_final$gated == T, ]

    ungated_mean   <- tapply(X = ungated_final[, f_params[p]],
                             INDEX = ungated_final$file_name,
                             FUN = mean)
    gated_mean     <- tapply(X = gated_final[, f_params[p]],
                             INDEX = gated_final$file_name,
                             FUN = mean)
    mean_frac      <- round(x = gated_mean / ungated_mean,
                            digits = 2)
    ungated_median <- tapply(X = ungated_final[, f_params[p]],
                             INDEX = ungated_final$file_name,
                             FUN = median)
    gated_median   <- tapply(X = gated_final[, f_params[p]],
                             INDEX = gated_final$file_name,
                             FUN = median)
    median_frac      <- round(x = gated_median / ungated_median,
                              digits = 2)
    ungated_sd     <- tapply(X = ungated_final[, f_params[p]],
                             INDEX = ungated_final$file_name,
                             FUN = sd)
    gated_sd       <- tapply(X = gated_final[, f_params[p]],
                             INDEX = gated_final$file_name,
                             FUN = sd)
        
    ungated_cv     <- ungated_mean / ungated_sd

    gated_cv       <- gated_mean / gated_sd

    sum_stats      <- data.frame(ungated_mean, gated_mean, mean_frac,
                                 ungated_median, gated_median, median_frac,
                                 ungated_sd, gated_sd,
                                 ungated_cv, gated_cv)

    sum_string     <- paste0("\nOn ", Sys.time(), " Obtained summary statistics for parameter: ",
                             f_params[p], "\n\n")

    write(x = sum_string,
      file = out_log,
      append = T)

    cat(capture.output(sum_stats),
        file = out_log,
        append = T,
        sep = "\n")
    
}


## -----
## extract strain, reporter, and replicate as factors

## now, extract the strain from the file name string
## this relies on naming the files w/ strain, reporter,
## and replicated separated by a '-' character, as in:
## "BY_full_gRNA_02-ODC_TFT-003.fcs" for the:
## strain - "BY full gRNA 02"
## reporter - ODC TFT
## replicate - 3

## because of 'strsplits' list output format, have to use
## 'sapply' to create the 'strain' variable.  Output is, e.g.,:
## [[1]]
## [1] "BY_full_gRNA_02" "ODC_TFT"         "003.fcs"
## so, take the 1st index of the appropriate list item
ungated_final$strain <- sapply(X = 1:length(ungated_final$file_string),
                               FUN = function(x){
                                   strsplit(x = ungated_final$file_string[x], split = "-")[[1]][1]
                               })
ungated_final$strain_factor <- as.factor(ungated_final$strain)

## now write the unique values we obtain for strain in ea. dataset
write(x = sprintf("%s", c("\nUnique values for 'strain' variable:\n",
                          unique(ungated_final$strain))),
      file = out_log,
      append = T)

## now for reporter
ungated_final$reporter <- sapply(X = 1:length(ungated_final$file_string),
                                 FUN = function(x){
                                     strsplit(x = ungated_final$file_string[x], split = "-")[[1]][2]
                                 })
ungated_final$reporter_factor <- as.factor(ungated_final$reporter)

## log the results
write(x = sprintf("%s", c("\nUnique values for 'reporter' variable for ungated set:\n",
                          unique(ungated_final$reporter))),
      file = out_log,
      append = T)


## now for replicates
ungated_final$replicate <- sapply(X = 1:length(ungated_final$file_string),
                                  FUN = function(x){
                                      as.numeric(
                                          gsub(pattern = ".fcs",
                                               replacement = "",
                                               x = strsplit(x = ungated_final$file_string[x],
                                                            split = "-")[[1]][3]))
                                  })
## for later use in plotting individual replicates
ungated_final$replicate_factor <- as.factor(ungated_final$replicate)

## log the results
write(x = sprintf("%s", c("\nUnique values for 'replicate' variable for ungated set:\n",
                          unique(ungated_final$replicate))),
      file = out_log,
      append = T)


## -----
## get plate information and create a variable that 
## expresses time relative to the first sample for ea. plate
ungated_final$plate <- ifelse(test = ungated_final$replicate <= 12,
                              yes  = "plate_01",
                              no   = "plate_02")

plate_one_min <- min(ungated_final$time_conv[ungated_final$plate == "plate_01"])
plate_two_min <- min(ungated_final$time_conv[ungated_final$plate == "plate_02"])

## convert time to a relative value based on the first sample of ea. plate
ungated_final$time_rel <- sapply(X = 1:nrow(ungated_final),
                                 FUN = function(x) {
                                     ifelse(test = ungated_final[x, "plate"] == "plate_01",
                                            yes  = ungated_final[x, "time_conv"] - plate_one_min, 
                                            no   = ungated_final[x, "time_conv"] - plate_two_min)
                                 })

## log relative time values per file
time_string <- paste0("\nOn ", Sys.time(), "Extracted time values for each file/plate\n")

write(x = time_string,
      file = out_log,
      append = T) 

time_frame <- lapply(X = unique(ungated_final$file_string),
                     FUN = function(x) {

                         sub_set <- ungated_final$file_string == x
                         f_params <- c("file_string", "strain", "plate",
                                     "file_time", "time_conv", "time_rel")
                         dat <- ungated_final[sub_set, f_params]
                         dat_out <- data.frame(file = unique(dat$file_string),
                                               strain = unique(dat$strain),
                                               plate = unique(dat$plate),
                                               file_time = unique(dat$file_time),
                                               time_conv = unique(dat$time_conv),
                                               time_rel = unique(dat$time_rel))
                     })

time_frame <- do.call("rbind", time_frame)

cat(capture.output(time_frame),
    file = out_log,
    append = T,
    sep = "\n")


## -----
## save the final dataframe for future use:
save(ungated_final,
     file = paste0(frame_dir, "/ungated_final.R"))

write(x = paste0("\nOn ", Sys.time(), " saved final dataframe as: ",
                 paste0(frame_dir, "/", "ungated_final.R"),
                 "\n"),
                 file = out_log,
                 append = T)

save(work_dir, results_dir, tables_dir, sessions_dir,
     frame_dir, gated_dir, ungated_dir, out_log,
     file = paste0(frame_dir, "/dir_structure.R"))

write(x = paste0("\nOn ", Sys.time(), " saved dir structure as: ",
                 paste0(frame_dir, "/dir_structure.R"),
                 "\n"),
                 file = out_log,
                 append = T)


## -----
## re-load the data by uncommenting the following:
## load(file = paste0(frame_dir, "/", "ungated_final.R"))
## load(file = paste0(frame_dir, "/dir_structure.R"))
## source("~/emacs/R/functions/load_flow_packages.R")


## -----
## plot gated vs. ungated results
## because we created the 'gating' variable
## we can use gated == T as an arg to 'subset'
## in lattice plot calls to plot only gated cells
## loop over the different numeric parameters 
pcols <- rainbow(n = length(unique(ungated_final$replicate)),
                 s = 0.7, v = 0.7, alpha = 1,
                 start = 0, end = 0.7)

for(i in 1:length(f_params)) {
    p <- f_params[i]

    ## ungated parameters split by strain
    p_name <- paste0(results_dir, "/", "ungated_density_plot_", p, ".pdf")
    pdf(file = p_name)
    print(
        densityplot(~ ungated_final[, p] | ungated_final[, "strain"],
                    groups = ungated_final[, "replicate_factor"],
                    plot.points = F,
                    col = pcols,
                    scales = list(tck = c(1, 0),
                                  alternating = F),
                    xlab = gsub(pattern = "_",
                                replacement = " ",
                                x = p),
                    par.settings = list(strip.background = list(col = gray(0.9)))
                    ))
    dev.off()

    ## gated parameters split by strain
    p_name <- paste0(results_dir, "/", "gated_density_plot_", p, ".pdf")
    pdf(file = p_name)
    print(
        densityplot(~ ungated_final[, p] | ungated_final[, "strain"],
                    subset = ungated_final[, "gated"],
                    groups = ungated_final[, "replicate_factor"],
                    plot.points = F,
                    col = pcols,
                    scales = list(tck = c(1, 0),
                                  alternating = F),
                    xlab = gsub(pattern = "_",
                                replacement = " ",
                                x = p),
                    par.settings = list(strip.background = list(col = gray(0.9)))
                    ))

    dev.off()

    ## combined gated and ungated plots
    p_name <- paste0(results_dir, "/", "combined_density_plot_", p, ".pdf")
    pdf(file = p_name)
    print(
        densityplot(~ ungated_final[, p] | ungated_final[, "strain"],
                    groups = ungated_final[, "replicate_factor"],
                    plot.points = F,
                    col = pcols,
                    scales = list(tck = c(1, 0),
                                  alternating = F),
                    xlab = gsub(pattern = "_",
                                replacement = " ",
                                x = p),
                    par.settings = list(strip.background = list(col = gray(0.9)))
                    ) + as.layer(
                            densityplot(~ ungated_final[, p] | ungated_final[, "strain"],
                                        subset = ungated_final[, "gated"],
                                        groups = ungated_final[, "replicate_factor"],
                                        plot.points = F,
                                        col = pcols,
                                        lty = 3,
                                        scales = list(tck = c(1, 0),
                                                      alternating = F),
                                        xlab = gsub(pattern = "_",
                                                    replacement = " ",
                                                    x = p),
                                        par.settings = list(strip.background = list(col = gray(0.9)))))
    )

    dev.off()
    
}


## -----
## extract the median from each biological replicate and use this
## value to build a dataframe w/ n. replicate observations per strain
## per reporter.  This dataframe is what we'll use for stats and for
## creating stripcharts, boxplots, and heatmaps

## 'aggregate' creates a new dataframe from x by applying FUN to
## all unique combinations of the factors supplied to the 'by'
## argument - in this case, grab the mean of numeric data and
## keep everything else a factor
ungated_medians <- aggregate.data.frame(x = ungated_final,
                                       by = list(ungated_final$strain_factor,
                                                 ungated_final$replicate_factor,
                                                 ungated_final$reporter_factor),
                                       FUN = function(x) {
                                           ifelse(is.numeric(x), median(x), as.character(x))
                                       },
                                       ## simplify results to vector 
                                       simplify = T)

## 'aggregate' seems to strip the levels from factors, so add
## these back using the values present in the original dataframe
ungated_medians$strain_factor    <- as.factor(ungated_medians$strain)
ungated_medians$replicate_factor <- as.factor(ungated_medians$replicate)
ungated_medians$reporter_factor  <- as.factor(ungated_medians$reporter)
ungated_medians$gating           <- rep("ungated", nrow(ungated_medians))

## adjust for the effect of time on the TFT ratio:
ungated_loess <- loess(formula = TFT_ratio ~ time_rel,
                       data = ungated_medians)
ungated_medians$TFT_loess <- ungated_loess$residuals + mean(ungated_medians$TFT_ratio)


## -----
## have to extract medians from the gated data separately
gated_final <- ungated_final[ungated_final$gated == T, ]

gated_medians <- aggregate.data.frame(x = gated_final,
                                       by = list(gated_final$strain_facto,
                                                 gated_final$replicate_factor,
                                                 gated_final$reporter_factor),
                                       FUN = function(x) {
                                           ifelse(is.numeric(x), median(x), as.character(x))
                                       },
                                       ## simplify results to vector 
                                       simplify = T)

## 'aggregate' seems to strip the levels from factors, so add
## these back using the values present in the original dataframe
gated_medians$strain_factor    <- as.factor(gated_medians$strain)
gated_medians$replicate_factor <- as.factor(gated_medians$replicate)
gated_medians$reporter_factor  <- as.factor(gated_medians$reporter)
gated_medians$gating           <- rep("gated", nrow(gated_medians))

## adjust for the effect of time on the TFT ratio:
gated_loess <- loess(formula = TFT_ratio ~ time_rel,
                       data = gated_medians)
gated_medians$TFT_loess <- gated_loess$residuals + mean(gated_medians$TFT_ratio)

all_medians <- list(ungated_medians, gated_medians)
all_medians <- do.call("rbind", all_medians)

for(i in 1:length(f_params)) {
    
    p <- f_params[i]
    
    ## ungated parameters split by strain plotted across time
    p_name <- paste0(results_dir, "/", "ungated_stripchart_", p, ".pdf")

    pdf(file = p_name)
    print(
    xyplot(all_medians[, p] ~ all_medians[, "time_rel"] | all_medians[, "strain_factor"],
           groups = all_medians[, "replicate_factor"],
           pch = 19,
           cex = 1.2,
           col = pcols,
           xlab = "Relative Time",
           ylab = gsub(pattern = "_",
                       replacement = " ",
                       x = p),
           subset = all_medians$gating == "ungated",
           key = list(points = list(pch = 19,
                                    col = pcols),
                      text = list(labels = as.character(1:24)),
                      columns = 4),
           scales = list(tck = c(1, 0),
                         alternating = F,
                         x = list(cex = 1.25),
                         y = list(cex = 1.25)),
           par.settings = list(strip.background = list(col = gray(0.9))))
    )
    dev.off()

    ## ungated parameters split by strain plotted across time
    p_name <- paste0(results_dir, "/", "gated_stripchart_", p, ".pdf")

    pdf(file = p_name)
    print(
    xyplot(all_medians[, p] ~ all_medians[, "time_rel"] | all_medians[, "strain_factor"],
           groups = all_medians[, "replicate_factor"],
           pch = 19,
           cex = 1.2,
           col = pcols,
           xlab = "Relative Time",
           ylab = gsub(pattern = "_",
                       replacement = " ",
                       x = p),
           subset = all_medians$gating == "gated",
           key = list(points = list(pch = 19,
                                    col = pcols),
                      text = list(labels = as.character(1:24)),
                      columns = 4),
           scales = list(tck = c(1, 0),
                         alternating = F,
                         x = list(cex = 1.25),
                         y = list(cex = 1.25)),
           par.settings = list(strip.background = list(col = gray(0.9))))
    )
    dev.off()
    
## combined plot to compare gated to ungated medians 
p_name <- paste0(results_dir, "/", "combined_stripchart_", p, ".pdf")

    pdf(file = p_name)
    print(
        xyplot(all_medians[, p] ~
                   all_medians[, "time_rel"] |
                   all_medians[, "strain_factor"],
               groups = all_medians[, "replicate_factor"],
               pch = NA,
               data = all_medians,
               xlab = "Relative Time",
               ylab = gsub(pattern = "_",
                           replacement = " ",
                           x = p),
               key = list(points = list(pch = 19,
                                        col = pcols),
                          text = list(labels = as.character(1:24)),
                          columns = 4),
               scales = list(tck = c(1, 0),
                             alternating = F,
                             x = list(cex = 1.25),
                             y = list(cex = 1.25)),
               par.settings = list(strip.background = list(col = gray(0.9)))
               ) + as.layer(xyplot(all_medians[, p] ~
                                       all_medians[, "time_rel"] |
                                       all_medians[, "strain_factor"],
                                   groups = all_medians[, "replicate_factor"],
                                   subset = all_medians$gating == "ungated", 
                                   data = all_medians,
                                   pch = 19,
                                   col = pcols,
                                   cex = 1.2)) + as.layer(xyplot(all_medians[, p] ~
                                                                     all_medians[, "time_rel"] |
                                                                     all_medians[, "strain_factor"],
                                                                 groups = all_medians[, "replicate_factor"],
                                                                 subset = all_medians$gating == "gated", 
                                                                 data = all_medians,
                                                                 pch = 17,
                                                                 col = pcols,
                                                                 cex = 1.2))
    )
    dev.off()
}

save(all_medians,
     file = paste0(frame_dir, "/all_medians.R"))

write(x = paste0("\nOn ", Sys.time(), " saved final medians dataframe as: ",
                 paste0(frame_dir, "/", "all_medians.R"),
                 "\n"),
                 file = out_log,
      append = T)
#+END_SRC

** 'lmer' Analysis of FCS Data                                 :R:HELPER:
   :LOGBOOK:
   - State "DONE"       from              [2022-03-09 Wed 17:36]
   - State "TODO"       from              [2022-03-09 Wed 16:03]
   :END:
#+BEGIN_SRC R :tangle :tangle ~/emacs/proteasome_QTL_paper/scripts/lmer_RPT6_flow_analysis.R
## -----
## set up additional variables: genotype, edit, and guide RNA for lmer analysis
## genotype
all_medians$background <- ifelse(grepl(pattern = ".*BY.*",
                                     x = all_medians$strain),
                               "BY", "RM")
all_medians$background_factor <- as.factor(all_medians$background)

## genotype including edit 
all_medians$genotype <- ifelse(grepl(pattern = ".*RM.*",
                                     x = all_medians$strain),
                               "edit_RM",
                        ifelse(grepl(pattern = ".*gRNA.*",
                                     x = all_medians$strain),
                               "edit_BY", "BY"))
all_medians$genotype_factor <- as.factor(all_medians$genotype)

## guide RNA
all_medians$guide <- ifelse(!grepl(pattern = ".*gRNA.*",
                                   x = all_medians$strain),
                            "wild-type",
                     ifelse(grepl(pattern = ".*gRNA_02.*",
                                  x = all_medians$strain),
                            "gRNA_02", "gRNA_03"))
all_medians$guide_factor <- as.factor(all_medians$guide)


## relevel factors to make BY / wild-ytpe the reference level
all_medians$strain_factor <- relevel(x = all_medians$strain_factor,
                                     ref = "BY_strain")

all_medians$guide_factor <- relevel(x = all_medians$guide_factor,
                                     ref = "wild-type")


## -----
## lmer analysis
## write("", stats_log, append = F)
write("\n\n\n------------- lmer analysis", stats_log, append = T)
sapply(X = c("ungated", "gated"),
       FUN = function(x) {

           ## subset the data 
           dat <- all_medians[all_medians$gating == x, ]

           ## write output
           write(paste0(Sys.time(), " analyis of TFT ratio on ",
                        x, " cells"),
                 file = stats_log, append = T)
     
           ## lmer model w/ genetic background and edit as fixed factors
           genotype_model <- lmer(TFT_loess ~ genotype_factor + guide_factor + (1|plate),
                                  data = dat,
                                  REML = F)
           write(paste0("\n\n---------------------\n", x, " genotype lmer\n"),
                 file = stats_log, append = T)
           capture.output(summary(genotype_model),
                          file = stats_log, append = T)

           ## pairwise t-test comparing genetic backgrounds 
           genotype_t_test <- pairwise.t.test(x = dat$TFT_loess,
                                              g = dat$genotype_factor,
                                              p.adjust.method = "none")
           write(paste0("\n\n---------------------\n", x, " genotype pairwise t-test\n"),
                 file = stats_log, append = T)
           capture.output(genotype_t_test,
                          file = stats_log, append = T)

           ## lmer model comparing all strains individually
           per_strain_model <- lmer(TFT_loess ~ strain_factor + (1|plate),
                                    data = dat,
                                    REML = F)
           write(paste0("\n\n---------------------\n", x, " per strain lmer\n"),
                 file = stats_log, append = T)
           capture.output(summary(per_strain_model),
                          file = stats_log, append = T)

           ## pairwise t-test comparing all strains individually
           per_strain_t_test <- pairwise.t.test(x = dat$TFT_loess,
                                                g = dat$strain_factor,
                                                p.adjust.method = "none")
           write(paste0("\n\n---------------------\n", x, " per strain pairwise t-test\n"),
                 file = stats_log, append = T)
           capture.output(per_strain_t_test,
                          file = stats_log, append = T)
       })


## -----
## plots 
## [1] TFT ratio by time and TFT loess by time 
## plot the effect of the adjustment
## get slopes of linear regression of
## time on raw and corrected TFT ratio
## for adding to the plots we'll produce
u_text <- lm(TFT_ratio ~ time_rel,
             subset = all_medians$gating == "ungated",
             data = all_medians)$coefficients["time_rel"]

c_text <- lm(TFT_loess ~ time_rel,
             subset = all_medians$gating == "ungated",
             data = all_medians)$coefficients["time_rel"]

## get y axis range (R default +/- 4% of max / min, respectively)
TFT_r_range  <- range(all_medians$TFT_ratio[all_medians$gating == "ungated"])
r_down_range <- TFT_r_range[1] - (0.04 * TFT_r_range[1])
r_up_range   <- TFT_r_range[2] + (0.04 * TFT_r_range[2])
yr_range    <- c(r_down_range, r_up_range)

TFT_l_range <- range(all_medians$TFT_loess[all_medians$gating == "ungated"])
l_down_range <- TFT_l_range[1] - (0.04 * TFT_l_range[1])
l_up_range   <- TFT_l_range[2] + (0.04 * TFT_l_range[2])
yl_range    <- c(l_down_range, l_up_range)


## -----
## TFT ratio by time_rel before / after loess adjustment
## 'TFT_ratio_time_adjustment.pdf'
## two scatter plots w/ no grouping by genotype
uncorrected_plot <- xyplot(TFT_ratio ~ time_rel,
                           subset = all_medians$gating == "ungated", 
                           data = all_medians,
                           ylim = yr_range,
                           ylab = "Raw TFT Ratio",
                           xlab = "Relative Time (sec)",
                           scales = list(tck = c(1, 0)),
                           panel = function(...) {
                               panel.xyplot(...)
                               panel.abline(lm(TFT_ratio ~ time_rel,
                                               subset = all_medians$gating == "ungated",
                                               data = all_medians),
                                            lty = 2, col = gray(0.7))
                               panel.text(labels = paste0("slope = ", u_text),
                                          x = 500,
                                          y = quantile(x = all_medians$TFT_ratio,
                                                       probs = 0.9))
                           })

corrected_plot <- xyplot(TFT_loess ~ time_rel,
                         subset = all_medians$gating == "ungated", 
                         data = all_medians,
                         ylim = yr_range,
                         ylab = "Adjusted TFT Ratio",
                         xlab = "Relative Time (sec)",
                         scales = list(tck = c(1, 0)),
                         panel = function(...) {
                             panel.xyplot(...)
                             panel.abline(lm(TFT_loess ~ time_rel,
                                             subset = all_medians$gating == "ungated",
                                             data = all_medians),
                                          lty = 2, col = gray(0.7))
                             panel.text(labels = paste0("slope = ", c_text),
                                        x = 500,
                                        y = quantile(x = all_medians$TFT_loess,
                                                     probs = 0.9))
                         })

pdf(file = paste0(results_dir, "/TFT_ratio_time_adjustment.pdf"),
    height = 7, width = 14)
print(uncorrected_plot,
      split = c(1, 1, 2, 1),
      newpage = T)
print(corrected_plot,
      split = c(2, 1, 2, 1),
      newpage = F)
dev.off()


## -----
## TFT ratio by background (BY, BY edit, or RM)
## 'TFT_ratio_adjustment_by_genotype.pdf'
## two scatter plots w/ grouping by genotype
genotype_cols <- ifelse(test = grepl(pattern = ".*BY",
                                     x = levels(all_medians$genotype_factor)),
                        yes = col_by,
                        no = col_rm)

raw_genotype_plot <- xyplot(TFT_ratio ~ genotype_factor,
                            groups = genotype_factor,
                            subset = all_medians$gating == "ungated",
                            data = all_medians,
                            main = unique(all_medians$reporter),                            
                            ylim = yr_range,
                            scales = list(tck = c(1, 0),
                                          alternating = F,
                                          x = list(rot = 45,
                                                   cex = 1.25),
                                          y = list(cex = 1.25)),
                            par.settings = list(box.dot = list(pch = "|"),
                                                box.umbrella = list(lty = 1,
                                                                    lwd = 1,
                                                                    col = gray(0.4)),
                                                box.rectangle = list(lty = 1,
                                                                     lwd = 1,
                                                                     col = gray(0.4),
                                                                     fill = gray(0.97)),
                                                strip.background = list(col = gray(0.9)),
                                                par.ylab.text = list(cex = 1.25),
                                                par.xlab.text = list(cex = 1.25),
                                                clip = list(panel = F)),
                            
                            panel = function(...) {

                                ## boxplot
                                panel.bwplot(...,
                                             ## pch = "|",
                                             box.width = 0.4,
                                             horizontal = F,
                                             do.out = F)
                                
                                ## thicker median lines
                                dat <- all_medians[all_medians$gating == "ungated", ]
                                panel.segments(x0 = 1:length(levels(dat$genotype_factor)) - 0.2,
                                               x1 = 0.2 + 1:length(levels(dat$genotype_factor)),
                                               y0 = tapply(X = dat$TFT_ratio,
                                                           INDEX = dat$genotype_factor,
                                                           FUN = median),
                                               y1 = tapply(X = dat$TFT_ratio,
                                                           INDEX = dat$genotype_factor,
                                                           FUN = median),
                                               col = gray(0.4), lwd = 4)

                                panel.stripplot(...,
                                                pch = 21,
                                                cex = 1.1,
                                                fill = genotype_cols,
                                                col = "black",
                                                jitter.data = T,
                                                amount = 0.1,
                                                horizontal = F)
                            })

adj_genotype_plot <- xyplot(TFT_loess ~ genotype_factor,
                            groups = genotype_factor,
                            subset = all_medians$gating == "ungated",
                            data = all_medians,
                            main = unique(all_medians$reporter),
                            ylim = yr_range,
                            scales = list(tck = c(1, 0),
                                          alternating = F,
                                          x = list(rot = 45,
                                                   cex = 1.25),
                                          y = list(cex = 1.25)),
                            par.settings = list(box.dot = list(pch = "|"),
                                                box.umbrella = list(lty = 1,
                                                                    lwd = 1,
                                                                    col = gray(0.4)),
                                                box.rectangle = list(lty = 1,
                                                                     lwd = 1,
                                                                     col = gray(0.4),
                                                                     fill = gray(0.97)),
                                                strip.background = list(col = gray(0.9)),
                                                par.ylab.text = list(cex = 1.25),
                                                par.xlab.text = list(cex = 1.25),
                                                clip = list(panel = F)),
                            
                            panel = function(...) {

                                ## boxplot
                                panel.bwplot(...,
                                             ## pch = "|",
                                             box.width = 0.4,
                                             horizontal = F,
                                             do.out = F)
                                
                                ## thicker median lines
                                dat <- all_medians[all_medians$gating == "ungated", ]
                                panel.segments(x0 = 1:length(levels(dat$genotype_factor)) - 0.2,
                                               x1 = 0.2 + 1:length(levels(dat$genotype_factor)),
                                               y0 = tapply(X = dat$TFT_loess,
                                                           INDEX = dat$genotype_factor,
                                                           FUN = median),
                                               y1 = tapply(X = dat$TFT_loess,
                                                           INDEX = dat$genotype_factor,
                                                           FUN = median),
                                               col = gray(0.4), lwd = 4)

                                panel.stripplot(...,
                                                pch = 21,
                                                cex = 1.1,
                                                fill = genotype_cols,
                                                col = "black",
                                                jitter.data = T,
                                                amount = 0.1,
                                                horizontal = F)
                            })

pdf(file = paste0(results_dir, "/TFT_ratio_adjustment_by_genotype.pdf"),
    height = 7, width = 12)
print(raw_genotype_plot, split = c(1, 1, 2, 1), newpage = T)
print(adj_genotype_plot, split = c(2, 1, 2, 1), newpage = F)
dev.off()


## -----
## TFT ratio by background (BY, BY edit, or RM)
## 'TFT_ratio_adjustment_by_strain.pdf'
## two scatter plots w/ grouping by strain
strain_cols <- ifelse(test = grepl(pattern = ".*BY",
                                     x = levels(all_medians$strain_factor)),
                        yes = col_by,
                        no = col_rm)

raw_strain_plot <- xyplot(TFT_ratio ~ strain_factor,
                          groups = strain_factor,
                          subset = all_medians$gating == "ungated",
                          data = all_medians,
                          main = unique(all_medians$reporter),                          
                          ylim = yr_range,
                          scales = list(tck = c(1, 0),
                                        alternating = F,
                                        x = list(rot = 45,
                                                 cex = 1.25),
                                        y = list(cex = 1.25)),
                          par.settings = list(box.dot = list(pch = "|"),
                                              box.umbrella = list(lty = 1,
                                                                  lwd = 1,
                                                                  col = gray(0.4)),
                                              box.rectangle = list(lty = 1,
                                                                   lwd = 1,
                                                                   col = gray(0.4),
                                                                   fill = gray(0.97)),
                                              strip.background = list(col = gray(0.9)),
                                              par.ylab.text = list(cex = 1.25),
                                              par.xlab.text = list(cex = 1.25),
                                              clip = list(panel = F)),
                          
                          panel = function(...) {

                              ## boxplot
                              panel.bwplot(...,
                                           ## pch = "|",
                                           box.width = 0.4,
                                           horizontal = F,
                                           do.out = F)
                              
                              ## thicker median lines
                              dat <- all_medians[all_medians$gating == "ungated", ]
                              panel.segments(x0 = 1:length(levels(dat$strain_factor)) - 0.2,
                                             x1 = 0.2 + 1:length(levels(dat$strain_factor)),
                                             y0 = tapply(X = dat$TFT_ratio,
                                                         INDEX = dat$strain_factor,
                                                         FUN = median),
                                             y1 = tapply(X = dat$TFT_ratio,
                                                         INDEX = dat$strain_factor,
                                                         FUN = median),
                                             col = gray(0.4), lwd = 4)

                              panel.stripplot(...,
                                              pch = 21,
                                              cex = 1.1,
                                              fill = strain_cols,
                                              col = "black",
                                              jitter.data = T,
                                              amount = 0.1,
                                              horizontal = F)
                          })

adj_strain_plot <- xyplot(TFT_loess ~ strain_factor,
                          groups = strain_factor,
                          subset = all_medians$gating == "ungated",
                          data = all_medians,
                          main = unique(all_medians$reporter),                          
                          ylim = yr_range,
                          scales = list(tck = c(1, 0),
                                        alternating = F,
                                        x = list(rot = 45,
                                                 cex = 1.25),
                                        y = list(cex = 1.25)),
                          par.settings = list(box.dot = list(pch = "|"),
                                              box.umbrella = list(lty = 1,
                                                                  lwd = 1,
                                                                  col = gray(0.4)),
                                              box.rectangle = list(lty = 1,
                                                                   lwd = 1,
                                                                   col = gray(0.4),
                                                                   fill = gray(0.97)),
                                              strip.background = list(col = gray(0.9)),
                                              par.ylab.text = list(cex = 1.25),
                                              par.xlab.text = list(cex = 1.25),
                                              clip = list(panel = F)),
                          
                          panel = function(...) {

                              ## boxplot
                              panel.bwplot(...,
                                           ## pch = "|",
                                           box.width = 0.4,
                                           horizontal = F,
                                           do.out = F)
                              
                              ## thicker median lines
                              dat <- all_medians[all_medians$gating == "ungated", ]
                              panel.segments(x0 = 1:length(levels(dat$strain_factor)) - 0.2,
                                             x1 = 0.2 + 1:length(levels(dat$strain_factor)),
                                             y0 = tapply(X = dat$TFT_loess,
                                                         INDEX = dat$strain_factor,
                                                         FUN = median),
                                             y1 = tapply(X = dat$TFT_loess,
                                                         INDEX = dat$strain_factor,
                                                         FUN = median),
                                             col = gray(0.4), lwd = 4)

                              panel.stripplot(...,
                                              pch = 21,
                                              cex = 1.1,
                                              fill = strain_cols,
                                              col = "black",
                                              jitter.data = T,
                                              amount = 0.1,
                                              horizontal = F)
                          })

pdf(file = paste0(results_dir, "/TFT_ratio_adjustment_by_strain.pdf"),
    height = 7, width = 12)
print(raw_strain_plot, split = c(1, 1, 2, 1), newpage = T)
print(adj_strain_plot, split = c(2, 1, 2, 1), newpage = F)
dev.off()


## -----
## final plots to separate pdfs
## use 'update' to adjust ylims 
pdf(file = paste0(results_dir, "/TFT_adjusted_ratio_by_genotype.pdf"),
    height = 7, width = 6)
print(update(adj_genotype_plot, ylim = yl_range))
dev.off()

pdf(file = paste0(results_dir, "/TFT_adjusted_ratio_by_strain.pdf"),
    height = 7, width = 6)
print(update(adj_strain_plot, ylim = yl_range))
dev.off()

#+END_SRC

** RPT6 Fine-Mapping Rpn4 Reporter
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-03-14 Mon 16:50]
   :END:
#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/rpn4_fine-mapping.R
## -----
## START USER INPUT
## no trailing '/' at the end!
base_dir  <- "~/data/flow/2022.03.09_RPT6_fine-mapping_rpn4_TFT_flow"
frame_dir <- paste0(base_dir, "/dataframes")
stats_log <- paste0(base_dir, "/results/stats_log")
## END USER INPUT 


## -----
## load packages and process fcs files 
source("~/emacs/R/functions/load_flow_packages.R")
source("~/emacs/R/functions/color_setup_BY_RM.R")
source("~/emacs/R/functions/auto_process_fcs_files.R")


## -----
## load the raw and processed data:
load(file = paste0(frame_dir, "/ungated_final.R"))
## load the directory structure for saving output:
load(file = paste0(frame_dir, "/dir_structure.R"))
## load the extracted median for ea. parameter and bio. replicate: 
load(file = paste0(frame_dir, "/all_medians.R"))


## -----
## inferential statistics using 'aov' and 'TukeyHSD':
source("~/emacs/R/functions/univariate_fcs_analysis.R")


## -----
## lmer regression analysis:
source("~/emacs/R/functions/lmer_RPT6_flow_analysis.R")


## -----
## by genotype plot

## addn. variable: genotype including edit 
all_medians$genotype <- ifelse(grepl(pattern = ".*RM.*",
                                     x = all_medians$strain),
                               "edit_RM",
                        ifelse(grepl(pattern = ".*gRNA.*",
                                     x = all_medians$strain),
                               "edit_BY", "BY"))
all_medians$genotype_factor <- as.factor(all_medians$genotype)

## guide RNA
all_medians$guide <- ifelse(!grepl(pattern = ".*gRNA.*",
                                   x = all_medians$strain),
                            "wild-type",
                     ifelse(grepl(pattern = ".*gRNA_02.*",
                                  x = all_medians$strain),
                            "gRNA_02", "gRNA_03"))
all_medians$guide_factor <- as.factor(all_medians$guide)

## relevel to make BY / wild-ytpe the reference level
all_medians$strain_factor <- relevel(x = all_medians$strain_factor,
                                     ref = "BY_strain")

genotype_cols <- ifelse(test = grepl(pattern = ".*BY",
                                     x = levels(all_medians$genotype_factor)),
                        yes = col_by,
                        no = col_rm)

## y axis ranges
TFT_l_range  <- range(all_medians$TFT_loess[all_medians$gating == "gated"])
l_down_range <- TFT_l_range[1] - (0.02 * TFT_l_range[1])
l_up_range   <- TFT_l_range[2] + (0.02 * TFT_l_range[2])
yl_range     <- c(0.204, 0.241)

per_genotype_rpn4_plot <- xyplot(TFT_loess ~ genotype_factor,
                                 groups = genotype_factor,
                                 subset = all_medians$gating == "gated",
                                 data = all_medians,
                                 ylim = yl_range,
                                 xlab = "",
                                 ylab = expression("Proteasome Activity (-log"["2"]*" RFP / GFP)"),
                                 scales = list(tck = c(1, 0),
                                               alternating = F,
                                               x = list(labels = c("BY wild-type",
                                                                   "BY edited",
                                                                   "BY edited"),
                                                        cex = 1.25),
                                               y = list(cex = 1.25)),
                                 ## at = seq(from = 0.31, to = 0.42, by = 0.02))),
                                 par.settings = list(box.dot = list(pch = "|"),
                                                     box.umbrella = list(lty = 1,
                                                                         lwd = 1,
                                                                         col = gray(0.4)),
                                                     box.rectangle = list(lty = 1,
                                                                          lwd = 1,
                                                                          col = gray(0.4),
                                                                          fill = gray(0.97)),
                                                     strip.background = list(col = gray(0.9)),
                                                     par.ylab.text = list(cex = 1.25),
                                                     par.xlab.text = list(cex = 1.25),
                                                     clip = list(panel = F)),
                                 
                                 panel = function(...) {

                                     ## boxplot
                                     panel.bwplot(...,
                                                  ## pch = "|",
                                                  box.width = 0.4,
                                                  horizontal = F,
                                                  do.out = F)
                                     ## thicker median lines
                                     dat <- all_medians[all_medians$gating == "gated", ]
                                     panel.segments(x0 = 1:length(levels(dat$genotype_factor)) - 0.2,
                                                    x1 = 0.2 + 1:length(levels(dat$genotype_factor)),
                                                    y0 = tapply(X = dat$TFT_loess,
                                                                INDEX = dat$genotype_factor,
                                                                FUN = median),
                                                    y1 = tapply(X = dat$TFT_loess,
                                                                INDEX = dat$genotype_factor,
                                                                FUN = median),
                                                    col = gray(0.4), lwd = 4)
                                     panel.stripplot(...,
                                                     pch = 21,
                                                     cex = 1.1,
                                                     fill = genotype_cols,
                                                     col = "black",
                                                     jitter.data = T,
                                                     amount = 0.1,
                                                     horizontal = F)
                                     
                                     ## strain name and x axis labels 
                                     panel.text(x = 1:3,
                                                y = rep(0.2007, 3),
                                                labels = c("-",
                                                           expression(italic("RPT6")*" -175 BY"),
                                                           expression(italic("RPT6")*" -175 RM")),
                                                cex = 1.25)
                                     panel.text(x = c(0.22, 0.1),
                                                y = c(0.2024, 0.2007),
                                                labels = c("Strain",
                                                           "Allelic Edit"),
                                                cex = 1.25)
                                     ## [x] pvals and connecting segments
                                     ## panel.text(x = c(1.5, 2.0),
                                     ##            y = c(0.24, 0.244),
                                     ##            labels = c(expression(italic("p")*" = 0.052"),
                                     ##                       expression(italic("p")*" = 0.18")),
                                     ##            cex = 1.25)
                                     ## panel.segments(x0 = c(1, 1), x1 = c(2, 3),
                                     ##                y0 = c(0.239, 0.243), y1 = c(0.239, 0.243),
                                     ##                lwd = 1.2, col = gray(0.4))
                                     ## [x] reporter name as title
                                     panel.text(x = 2, y = 0.242,
                                                labels = "Rpn4 TFT",
                                                cex = 1.25,
                                                fontface = "bold")
                                 })

pdf(file = "~/emacs/ubi_QTL_paper/figures/per_genotype_plot_rpn4_TFT_final.pdf")
print(per_genotype_rpn4_plot)
dev.off()


## -----
## per strain plot
strain_cols <- ifelse(test = grepl(pattern = ".*BY.*",
                                     x = levels(all_medians$strain_factor)),
                        yes = col_by,
                        no = col_rm)

per_strain_rpn4_plot <- xyplot(TFT_loess ~ strain_factor,
                               groups = strain_factor,
                               subset = all_medians$gating == "gated",
                               data = all_medians,
                               ylim = yl_range,
                               xlab = "",
                               ylab = expression("Proteasome Activity (-log"["2"]*" RFP / GFP)"),
                               scales = list(tck = c(1, 0),
                                             alternating = F,
                                             x = list(labels = c("BY wild-type",
                                                                 "BY edited",
                                                                 "BY edited",
                                                                 "BY edited",
                                                                 "BY edited"),
                                                      cex = 1.2),
                                             y = list(cex = 1.25)),
                               par.settings = list(box.dot = list(pch = "|"),
                                                   box.umbrella = list(lty = 1,
                                                                       lwd = 1,
                                                                       col = gray(0.4)),
                                                   box.rectangle = list(lty = 1,
                                                                        lwd = 1,
                                                                        col = gray(0.4),
                                                                        fill = gray(0.97)),
                                                   strip.background = list(col = gray(0.9)),
                                                   par.ylab.text = list(cex = 1.25),
                                                   par.xlab.text = list(cex = 1.25),
                                                   clip = list(panel = F),
                                                   layout.widths = list(left.padding = 5),
                                                   layout.heights = list(bottom.padding = 5)),
                               panel = function(...) {
                                   ## boxplot
                                   panel.bwplot(...,
                                                ## pch = "|",
                                                box.width = 0.4,
                                                horizontal = F,
                                                do.out = F)
                                   
                                   ## thicker median lines
                                   dat <- all_medians[all_medians$gating == "gated", ]
                                   panel.segments(x0 = 1:length(levels(dat$strain_factor)) - 0.2,
                                                  x1 = 0.2 + 1:length(levels(dat$strain_factor)),
                                                  y0 = tapply(X = dat$TFT_loess,
                                                              INDEX = dat$strain_factor,
                                                              FUN = median),
                                                  y1 = tapply(X = dat$TFT_loess,
                                                              INDEX = dat$strain_factor,
                                                              FUN = median),
                                                  col = gray(0.4), lwd = 4)
                                   panel.stripplot(...,
                                                   pch = 21,
                                                   cex = 1.1,
                                                   fill = strain_cols,
                                                   col = "black",
                                                   jitter.data = T,
                                                   amount = 0.1,
                                                   horizontal = F)
                                   ## strain name and x axis labels 
                                   panel.text(x = c(1, 2.5, 4.5),
                                              y = rep(0.2003, 3),
                                              labels = c("-",
                                                         expression(italic("RPT6")*" -175 BY"),
                                                         expression(italic("RPT6")*" -175 RM")),
                                              cex = 1.25)
                                   ## gRNA
                                   panel.text(x = 1:5,
                                              y = rep(0.1982, 5),
                                              labels = c("-",
                                                         "1", "2",
                                                         "1", "2"),
                                              cex = 1.25)
                                   ## pvals and connecting segments
                                   panel.text(x = seq(from = 1.5, to = 3.0, by = 0.5),
                                              y = seq(from = 0.2385, by = 0.0022,
                                                      length.out = 4),
                                              labels = c(expression(italic("p")*" = 0.03"),
                                                         expression(italic("p")*" = 0.11"),
                                                         expression(italic("p")*" = 0.23"),
                                                         expression(italic("p")*" = 0.15")),
                                              cex = 1.25)
                                   panel.segments(x0 = rep(1, 4),
                                                  x1 = 2:5,
                                                  y0 = seq(from = 0.2375,
                                                           by = 0.0022,
                                                           length.out = 4),
                                                  y1 = seq(from = 0.2375,
                                                           by = 0.0022,
                                                           length.out = 4),
                                                  lwd = 1.2, col = gray(0.4))
                                   ## x axis descriptors
                                   panel.text(x = c(0.07, -0.125, 0.08),
                                              y = c(0.2024, 0.2003, 0.1982), 
                                              labels = c("Strain",
                                                         "Allelic Edit",
                                                         "gRNA"),
                                              cex = 1.25)
                                   ## reporter name as title
                                   panel.text(x = 3, y = 0.247,
                                              labels = "Rpn4 TFT",
                                              cex = 1.25,
                                              fontface = "bold")
                               })

pdf(file = "~/emacs/ubi_QTL_paper/figures/per_strain_plot_rpn4_TFT.pdf")
print(per_strain_rpn4_plot)
dev.off()


## -----
## ANOVA and lmer analysis of:
## BY full vs. RM full
## BY full vs. BY

rpn4_analysis_log <- paste0(base_dir, "/results/rpn4_analysis_log")


## -----
## BY full vs. RM full

## ANOVA
subd <- all_medians[all_medians$strain != "BY_strain", ]
subd <- subd[subd$gating == "gated", ]
str(subd)

rpn4_aov <- aov(formula = TFT_loess ~ genotype_factor * guide_factor,
                data = subd)

write(x = paste0("\n\n", Sys.time(),
                 " ANOVA of gated BY_full vs RM_full for Rpn4 TFT:\n\n"),
      file = rpn4_analysis_log,
      append = T)
capture.output(summary(rpn4_aov),
               file = rpn4_analysis_log,
               append = T)

## lmer
rpn4_model <- lmer(TFT_loess ~ genotype_factor + guide_factor + (1|plate),
                       data = subd,
                       REML = F)
write(x = paste0("\n\n", Sys.time(),
                 " lmer of gated BY_full vs RM_full for Rpn4 TFT:\n\n"),
      file = rpn4_analysis_log,
      append = T)
capture.output(summary(rpn4_model),
               file = rpn4_analysis_log,
               append = T)


## -----
## BY wild-type vs. BY full 
## ANOVA
subd <- all_medians[all_medians$genotype != "edit_RM", ]
subd <- subd[subd$gating == "gated", ]
str(subd)

rpn4_aov <- aov(formula = TFT_loess ~ genotype_factor,
                data = subd)

write(x = paste0("\n\n", Sys.time(),
                 " ANOVA of gated BY_wild_type vs BY_full for Rpn4 TFT:\n\n"),
      file = rpn4_analysis_log,
      append = T)
capture.output(summary(rpn4_aov),
               file = rpn4_analysis_log,
               append = T)

## lmer
rpn4_model <- lmer(TFT_loess ~ genotype_factor + (1|plate),
                       data = subd,
                       REML = F)
write(x = paste0("\n\n", Sys.time(),
                 " lmer of gated BY_wild_type vs BY_full for Rpn4 TFT:\n\n"),
      file = rpn4_analysis_log,
      append = T)
capture.output(summary(rpn4_model),
               file = rpn4_analysis_log,
               append = T)
#+END_SRC

** RPT6 Fine-Mapping ODC Reporter
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-03-14 Mon 16:50]
   :END:
#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/ODC_fine-mapping.R
## -----
## START USER INPUT
## no trailing '/' at the end!
base_dir  <- "~/data/flow/2022.03.09_RPT6_fine-mapping_ODC_TFT_flow"
frame_dir <- paste0(base_dir, "/dataframes")
stats_log <- paste0(base_dir, "/results/stats_log")
## END USER INPUT 


## -----
## load packages and process fcs files 
source("~/emacs/R/functions/load_flow_packages.R")
source("~/emacs/R/functions/color_setup_BY_RM.R")
source("~/emacs/R/functions/auto_process_fcs_files.R")


## -----
## load the raw and processed data:
load(file = paste0(frame_dir, "/ungated_final.R"))
## load the directory structure for saving output:
load(file = paste0(frame_dir, "/dir_structure.R"))
## load the extracted median for ea. parameter and bio. replicate: 
load(file = paste0(frame_dir, "/all_medians.R"))


## -----
## inferential statistics using 'aov' and 'TukeyHSD':
source("~/emacs/R/functions/univariate_fcs_analysis.R")


## -----
## lmer regression analysis:
source("~/emacs/R/functions/lmer_RPT6_flow_analysis.R")


## -----
## by genotype plot

## addn. variable: genotype including edit 
all_medians$genotype <- ifelse(grepl(pattern = ".*RM.*",
                                     x = all_medians$strain),
                               "edit_RM",
                        ifelse(grepl(pattern = ".*gRNA.*",
                                     x = all_medians$strain),
                               "edit_BY", "BY"))
all_medians$genotype_factor <- as.factor(all_medians$genotype)

## guide RNA
all_medians$guide <- ifelse(!grepl(pattern = ".*gRNA.*",
                                   x = all_medians$strain),
                            "wild-type",
                     ifelse(grepl(pattern = ".*gRNA_02.*",
                                  x = all_medians$strain),
                            "gRNA_02", "gRNA_03"))
all_medians$guide_factor <- as.factor(all_medians$guide)

## relevel to make BY / wild-ytpe the reference level
all_medians$strain_factor <- relevel(x = all_medians$strain_factor,
                                     ref = "BY_strain")

genotype_cols <- ifelse(test = grepl(pattern = ".*BY",
                                     x = levels(all_medians$genotype_factor)),
                        yes = col_by,
                        no = col_rm)

## y axis ranges
TFT_l_range  <- range(all_medians$TFT_loess[all_medians$gating == "gated"])
l_down_range <- TFT_l_range[1] - (0.02 * TFT_l_range[1])
l_up_range   <- TFT_l_range[2] + (0.02 * TFT_l_range[2])
yl_range     <- c(l_down_range, 0.425)

per_genotype_ODC_plot <- xyplot(TFT_loess ~ genotype_factor,
                            groups = genotype_factor,
                            subset = all_medians$gating == "gated",
                            data = all_medians,
                            ylim = yl_range,
                            xlab = "",
                            ylab = expression("Proteasome Activity (-log"["2"]*" RFP / GFP)"),
                            scales = list(tck = c(1, 0),
                                          alternating = F,
                                          x = list(labels = c("BY wild-type",
                                                              "BY edited",
                                                              "BY edited"),
                                                   cex = 1.25),
                                          y = list(cex = 1.25,
                                                   at = seq(from = 0.31, to = 0.42, by = 0.02))),
                            par.settings = list(box.dot = list(pch = "|"),
                                                box.umbrella = list(lty = 1,
                                                                    lwd = 1,
                                                                    col = gray(0.4)),
                                                box.rectangle = list(lty = 1,
                                                                     lwd = 1,
                                                                     col = gray(0.4),
                                                                     fill = gray(0.97)),
                                                strip.background = list(col = gray(0.9)),
                                                par.ylab.text = list(cex = 1.25),
                                                par.xlab.text = list(cex = 1.25),
                                                clip = list(panel = F)),
                            
                            panel = function(...) {

                                ## boxplot
                                panel.bwplot(...,
                                             ## pch = "|",
                                             box.width = 0.4,
                                             horizontal = F,
                                             do.out = F)
                                
                                ## thicker median lines
                                dat <- all_medians[all_medians$gating == "gated", ]
                                panel.segments(x0 = 1:length(levels(dat$genotype_factor)) - 0.2,
                                               x1 = 0.2 + 1:length(levels(dat$genotype_factor)),
                                               y0 = tapply(X = dat$TFT_loess,
                                                           INDEX = dat$genotype_factor,
                                                           FUN = median),
                                               y1 = tapply(X = dat$TFT_loess,
                                                           INDEX = dat$genotype_factor,
                                                           FUN = median),
                                               col = gray(0.4), lwd = 4)
                                panel.stripplot(...,
                                                pch = 21,
                                                cex = 1.1,
                                                fill = genotype_cols,
                                                col = "black",
                                                jitter.data = T,
                                                amount = 0.1,
                                                horizontal = F)
                                ## strain name and x axis labels 
                                panel.text(x = 1:3,
                                           y = rep(0.302, 3),
                                           labels = c("-",
                                                      expression(italic("RPT6")*" -175 BY"),
                                                      expression(italic("RPT6")*" -175 RM")),
                                           cex = 1.25)
                                panel.text(x = c(0.22, 0.1),
                                           y = c(0.3075, 0.302),
                                           labels = c("Strain",
                                                      "Allelic Edit"),
                                           cex = 1.25)
                                ## pvals and connecting segments
                                panel.text(x = c(2.5, 2.0),
                                           y = c(0.411, 0.4203),
                                           labels = c(expression(italic("p")*" = 2.8e-6"),
                                                      expression(italic("p")*" = 1.9e-7")),
                                           cex = 1.25)
                                panel.segments(x0 = c(2, 1), x1 = c(3, 3),
                                               y0 = c(0.415, 0.417), y1 = c(0.415, 0.417),
                                               lwd = 1.2, col = gray(0.4))
                                ## reporter name as title
                                panel.text(x = 2, y = 0.428,
                                           labels = "ODC TFT",
                                           cex = 1.25,
                                           fontface = "bold")
                            })

pdf(file = "~/emacs/ubi_QTL_paper/figures/per_genotype_plot_ODC_TFT_final.pdf")
print(per_genotype_ODC_plot)
dev.off()


## -----
## per strain plot
strain_cols <- ifelse(test = grepl(pattern = ".*BY.*",
                                     x = levels(all_medians$strain_factor)),
                        yes = col_by,
                        no = col_rm)

per_strain_ODC_plot <- xyplot(TFT_loess ~ strain_factor,
                          groups = strain_factor,
                          subset = all_medians$gating == "gated",
                          data = all_medians,
                          ylim = yl_range,
                          xlab = "",
                          ylab = expression("Proteasome Activity (-log"["2"]*" RFP / GFP)"),
                          scales = list(tck = c(1, 0),
                                        alternating = F,
                                        x = list(labels = c("BY wild-type",
                                                            "BY edited",
                                                            "BY edited",
                                                            "BY edited",
                                                            "BY edited"),
                                                 cex = 1.2),
                                        y = list(cex = 1.25,
                                                 at = seq(from = 0.31, to = 0.42, by = 0.02))),
                          par.settings = list(box.dot = list(pch = "|"),
                                              box.umbrella = list(lty = 1,
                                                                  lwd = 1,
                                                                  col = gray(0.4)),
                                              box.rectangle = list(lty = 1,
                                                                   lwd = 1,
                                                                   col = gray(0.4),
                                                                   fill = gray(0.97)),
                                              strip.background = list(col = gray(0.9)),
                                              par.ylab.text = list(cex = 1.25),
                                              par.xlab.text = list(cex = 1.25),
                                              clip = list(panel = F),
                                              layout.widths = list(left.padding = 2),
                                              layout.heights = list(bottom.padding = 5)),
                          panel = function(...) {
                              ## boxplot
                              panel.bwplot(...,
                                           ## pch = "|",
                                           box.width = 0.4,
                                           horizontal = F,
                                           do.out = F)
                              
                              ## thicker median lines
                              dat <- all_medians[all_medians$gating == "gated", ]
                              panel.segments(x0 = 1:length(levels(dat$strain_factor)) - 0.2,
                                             x1 = 0.2 + 1:length(levels(dat$strain_factor)),
                                             y0 = tapply(X = dat$TFT_loess,
                                                         INDEX = dat$strain_factor,
                                                         FUN = median),
                                             y1 = tapply(X = dat$TFT_loess,
                                                         INDEX = dat$strain_factor,
                                                         FUN = median),
                                             col = gray(0.4), lwd = 4)
                              panel.stripplot(...,
                                              pch = 21,
                                              cex = 1.1,
                                              fill = strain_cols,
                                              col = "black",
                                              jitter.data = T,
                                              amount = 0.1,
                                              horizontal = F)
                              ## strain name and x axis labels 
                              panel.text(x = c(1, 2.5, 4.5),
                                         y = rep(0.302, 3),
                                         labels = c("-",
                                                    expression(italic("RPT6")*" -175 BY"),
                                                    expression(italic("RPT6")*" -175 RM")),
                                         cex = 1.25)
                              ## gRNA
                              panel.text(x = 1:5,
                                         y = rep(0.297, 5),
                                         labels = c("-",
                                                    "1", "2",
                                                    "1", "2"),
                                         cex = 1.25)
                              ## pvals and connecting segments
                              panel.text(x = seq(from = 1.5, to = 3.0, by = 0.5),
                                         y = seq(from = 0.39, by = 0.01,
                                                 length.out = 4),
                                         labels = c(expression(italic("p")*" = 0.79"),
                                                    expression(italic("p")*" = 0.37"),
                                                    expression(italic("p")*" = 6.1e-3"),
                                                    expression(italic("p")*" = 4.3e-8")),
                                         cex = 1.25)
                              panel.segments(x0 = rep(1, 4),
                                             x1 = 2:5,
                                             y0 = seq(from = 0.387,
                                                      by = 0.01,
                                                      length.out = 4),
                                             y1 = seq(from = 0.387,
                                                      by = 0.01,
                                                      length.out = 4),
                                             lwd = 1.2, col = gray(0.4))
                              ## x axis descriptors
                              panel.text(x = c(0.07, -0.125, 0.08),
                                         y = c(0.3075, 0.302, 0.297),
                                         labels = c("Strain",
                                                    "Allelic Edit",
                                                    "gRNA"),
                                         cex = 1.25)
                              ## reporter name as title
                              panel.text(x = 3, y = 0.428,
                                         labels = "ODC TFT",
                                         cex = 1.25,
                                         fontface = "bold")
                          })

pdf(file = "~/emacs/ubi_QTL_paper/figures/per_strain_plot_ODC_TFT.pdf")
print(per_strain_ODC_plot)
dev.off()


## -----
## ANOVA and lmer analysis of:
## BY full vs. RM full
## BY full vs. BY

ODC_analysis_log <- paste0(base_dir, "/results/ODC_analysis_log")


## -----
## BY full vs. RM full

## ANOVA
subd <- all_medians[all_medians$strain != "BY_strain", ]
subd <- subd[subd$gating == "gated", ]
str(subd)

ODC_aov <- aov(formula = TFT_loess ~ genotype_factor * guide_factor,
                data = subd)

write(x = paste0("\n\n", Sys.time(),
                 " ANOVA of gated BY_full vs RM_full for ODC TFT:\n\n"),
      file = ODC_analysis_log,
      append = T)
capture.output(summary(ODC_aov),
               file = ODC_analysis_log,
               append = T)

## lmer
ODC_model <- lmer(TFT_loess ~ genotype_factor + guide_factor + (1|plate),
                       data = subd,
                       REML = F)
write(x = paste0("\n\n", Sys.time(),
                 " lmer of gated BY_full vs RM_full for ODC TFT:\n\n"),
      file = ODC_analysis_log,
      append = T)
capture.output(summary(ODC_model),
               file = ODC_analysis_log,
               append = T)


## -----
## BY wild-type vs. BY full 
## ANOVA
subd <- all_medians[all_medians$genotype != "edit_RM", ]
subd <- subd[subd$gating == "gated", ]
str(subd)

ODC_aov <- aov(formula = TFT_loess ~ genotype_factor,
                data = subd)

write(x = paste0("\n\n", Sys.time(),
                 " ANOVA of gated BY_wild_type vs BY_full for ODC TFT:\n\n"),
      file = ODC_analysis_log,
      append = T)
capture.output(summary(ODC_aov),
               file = ODC_analysis_log,
               append = T)

## lmer
ODC_model <- lmer(TFT_loess ~ genotype_factor + (1|plate),
                       data = subd,
                       REML = F)
write(x = paste0("\n\n", Sys.time(),
                 " lmer of gated BY_wild_type vs BY_full for ODC TFT:\n\n"),
      file = ODC_analysis_log,
      append = T)
capture.output(summary(ODC_model),
               file = ODC_analysis_log,
               append = T)
#+END_SRC

** RPT6 Fine-Mapping Pro Reporter
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-03-14 Mon 17:22]
   :END:

#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/pro_fine-mapping.R
## -----
## START USER INPUT
## no trailing '/' at the end!
base_dir  <- "~/data/flow/2022.03.10_RPT6_fine-mapping_pro_TFT_flow"
frame_dir <- paste0(base_dir, "/dataframes")
stats_log <- paste0(base_dir, "/results/stats_log")
## END USER INPUT 


## -----
## load packages and process fcs files 
source("~/emacs/R/functions/load_flow_packages.R")
source("~/emacs/R/functions/color_setup_BY_RM.R")
source("~/emacs/R/functions/auto_process_fcs_files.R")


## -----
## load the raw and processed data:
load(file = paste0(frame_dir, "/ungated_final.R"))
## load the directory structure for saving output:
load(file = paste0(frame_dir, "/dir_structure.R"))
## load the extracted median for ea. parameter and bio. replicate: 
load(file = paste0(frame_dir, "/all_medians.R"))


## -----
## inferential statistics using 'aov' and 'TukeyHSD':
source("~/emacs/R/functions/univariate_fcs_analysis.R")


## -----
## lmer regression analysis:
source("~/emacs/R/functions/lmer_RPT6_flow_analysis.R")


## -----
## by genotype plot

## addn. variable: genotype including edit 
all_medians$genotype <- ifelse(grepl(pattern = ".*RM.*",
                                     x = all_medians$strain),
                               "edit_RM",
                        ifelse(grepl(pattern = ".*gRNA.*",
                                     x = all_medians$strain),
                               "edit_BY", "BY"))
all_medians$genotype_factor <- as.factor(all_medians$genotype)

## guide RNA
all_medians$guide <- ifelse(!grepl(pattern = ".*gRNA.*",
                                   x = all_medians$strain),
                            "wild-type",
                     ifelse(grepl(pattern = ".*gRNA_02.*",
                                  x = all_medians$strain),
                            "gRNA_02", "gRNA_03"))
all_medians$guide_factor <- as.factor(all_medians$guide)

## relevel to make BY / wild-ytpe the reference level
all_medians$strain_factor <- relevel(x = all_medians$strain_factor,
                                     ref = "BY_strain")

genotype_cols <- ifelse(test = grepl(pattern = ".*BY",
                                     x = levels(all_medians$genotype_factor)),
                        yes = col_by,
                        no = col_rm)

## y axis ranges
TFT_l_range  <- range(all_medians$TFT_loess[all_medians$gating == "gated"])
l_down_range <- TFT_l_range[1] - (0.02 * TFT_l_range[1])
l_up_range   <- TFT_l_range[2] + (0.02 * TFT_l_range[2])
yl_range     <- c(l_down_range, 0.71)

per_genotype_pro_plot <- xyplot(TFT_loess ~ genotype_factor,
                                 groups = genotype_factor,
                                 subset = all_medians$gating == "gated",
                                 data = all_medians,
                                 ylim = yl_range,
                                 xlab = "",
                                 ylab = expression("Proteasome Activity (-log"["2"]*" RFP / GFP)"),
                                 scales = list(tck = c(1, 0),
                                               alternating = F,
                                               x = list(labels = c("BY wild-type",
                                                                   "BY edited",
                                                                   "BY edited"),
                                                        cex = 1.25),
                                               y = list(cex = 1.25)),
                                 ## at = seq(from = 0.31, to = 0.42, by = 0.02))),
                                 par.settings = list(box.dot = list(pch = "|"),
                                                     box.umbrella = list(lty = 1,
                                                                         lwd = 1,
                                                                         col = gray(0.4)),
                                                     box.rectangle = list(lty = 1,
                                                                          lwd = 1,
                                                                          col = gray(0.4),
                                                                          fill = gray(0.97)),
                                                     strip.background = list(col = gray(0.9)),
                                                     par.ylab.text = list(cex = 1.25),
                                                     par.xlab.text = list(cex = 1.25),
                                                     clip = list(panel = F)),
                                 
                                 panel = function(...) {

                                     ## boxplot
                                     panel.bwplot(...,
                                                  ## pch = "|",
                                                  box.width = 0.4,
                                                  horizontal = F,
                                                  do.out = F)
                                     
                                     ## thicker median lines
                                     dat <- all_medians[all_medians$gating == "gated", ]
                                     panel.segments(x0 = 1:length(levels(dat$genotype_factor)) - 0.2,
                                                    x1 = 0.2 + 1:length(levels(dat$genotype_factor)),
                                                    y0 = tapply(X = dat$TFT_loess,
                                                                INDEX = dat$genotype_factor,
                                                                FUN = median),
                                                    y1 = tapply(X = dat$TFT_loess,
                                                                INDEX = dat$genotype_factor,
                                                                FUN = median),
                                                    col = gray(0.4), lwd = 4)
                                     panel.stripplot(...,
                                                     pch = 21,
                                                     cex = 1.1,
                                                     fill = genotype_cols,
                                                     col = "black",
                                                     jitter.data = T,
                                                     amount = 0.1,
                                                     horizontal = F)
                                     
                                     ## strain name and x axis labels 
                                     panel.text(x = 1:3,
                                                y = rep(0.517, 3),
                                                labels = c("-",
                                                           expression(italic("RPT6")*" -175 BY"),
                                                           expression(italic("RPT6")*" -175 RM")),
                                                cex = 1.25)
                                     panel.text(x = c(0.22, 0.1),
                                                y = c(0.526, 0.517),
                                                labels = c("Strain",
                                                           "Allelic Edit"),
                                                cex = 1.25)
                                     ## [x] pvals and connecting segments
                                     panel.text(x = c(2.5, 2.0),
                                                y = c(0.69, 0.703),
                                                labels = c(expression(italic("p")*" = 2.1e-2"),
                                                           expression(italic("p")*" = 7.0e-3")),
                                                cex = 1.25)
                                     panel.segments(x0 = c(2, 1), x1 = c(3, 3),
                                                    y0 = c(0.685, 0.698), y1 = c(0.685, 0.698),
                                                    lwd = 1.2, col = gray(0.4))
                                     ## [x] reporter name as title
                                     panel.text(x = 2, y = 0.715,
                                                labels = "Pro TFT",
                                                cex = 1.25,
                                                fontface = "bold")
                                 })

pdf(file = "~/emacs/ubi_QTL_paper/figures/per_genotype_plot_pro_TFT_final.pdf")
print(per_genotype_pro_plot)
dev.off()


## -----
## per strain plot
strain_cols <- ifelse(test = grepl(pattern = ".*BY.*",
                                     x = levels(all_medians$strain_factor)),
                        yes = col_by,
                        no = col_rm)

per_strain_pro_plot <- xyplot(TFT_loess ~ strain_factor,
                               groups = strain_factor,
                               subset = all_medians$gating == "gated",
                               data = all_medians,
                               ylim = yl_range,
                               xlab = "",
                               ylab = expression("Proteasome Activity (-log"["2"]*" RFP / GFP)"),
                               scales = list(tck = c(1, 0),
                                             alternating = F,
                                             x = list(labels = c("BY wild-type",
                                                                 "BY edited",
                                                                 "BY edited",
                                                                 "BY edited",
                                                                 "BY edited"),
                                                      cex = 1.2),
                                             y = list(cex = 1.25)),
                               par.settings = list(box.dot = list(pch = "|"),
                                                   box.umbrella = list(lty = 1,
                                                                       lwd = 1,
                                                                       col = gray(0.4)),
                                                   box.rectangle = list(lty = 1,
                                                                        lwd = 1,
                                                                        col = gray(0.4),
                                                                        fill = gray(0.97)),
                                                   strip.background = list(col = gray(0.9)),
                                                   par.ylab.text = list(cex = 1.25),
                                                   par.xlab.text = list(cex = 1.25),
                                                   clip = list(panel = F),
                                                   layout.widths = list(left.padding = 5),
                                                   layout.heights = list(bottom.padding = 5)),
                               panel = function(...) {
                                   ## boxplot
                                   panel.bwplot(...,
                                                ## pch = "|",
                                                box.width = 0.4,
                                                horizontal = F,
                                                do.out = F)
                                   
                                   ## thicker median lines
                                   dat <- all_medians[all_medians$gating == "gated", ]
                                   panel.segments(x0 = 1:length(levels(dat$strain_factor)) - 0.2,
                                                  x1 = 0.2 + 1:length(levels(dat$strain_factor)),
                                                  y0 = tapply(X = dat$TFT_loess,
                                                              INDEX = dat$strain_factor,
                                                              FUN = median),
                                                  y1 = tapply(X = dat$TFT_loess,
                                                              INDEX = dat$strain_factor,
                                                              FUN = median),
                                                  col = gray(0.4), lwd = 4)
                                   panel.stripplot(...,
                                                   pch = 21,
                                                   cex = 1.1,
                                                   fill = strain_cols,
                                                   col = "black",
                                                   jitter.data = T,
                                                   amount = 0.1,
                                                   horizontal = F)
                                   ## strain name and x axis labels 
                                   panel.text(x = c(1, 2.5, 4.5),
                                              y = rep(0.517, 3),
                                              labels = c("-",
                                                         expression(italic("RPT6")*" -175 BY"),
                                                         expression(italic("RPT6")*" -175 RM")),
                                              cex = 1.25)
                                   ## gRNA
                                   panel.text(x = 1:5,
                                              y = rep(0.508, 5),
                                              labels = c("-",
                                                         "1", "2",
                                                         "1", "2"),
                                              cex = 1.25)
                                   ## pvals and connecting segments
                                   panel.text(x = seq(from = 1.5, to = 3.0, by = 0.5),
                                              y = seq(from = 0.681, by = 0.008,
                                                      length.out = 4),
                                              labels = c(expression(italic("p")*" = 0.14"),
                                                         expression(italic("p")*" = 0.85"),
                                                         expression(italic("p")*" = 0.049"),
                                                         expression(italic("p")*" = 2e-3")),
                                              cex = 1.25)
                                   panel.segments(x0 = rep(1, 4),
                                                  x1 = 2:5,
                                                  y0 = seq(from = 0.678,
                                                           by = 0.008,
                                                           length.out = 4),
                                                  y1 = seq(from = 0.678,
                                                           by = 0.008,
                                                           length.out = 4),
                                                  lwd = 1.2, col = gray(0.4))
                                   ## x axis descriptors
                                     panel.text(x = c(0.08, -0.14, 0.07),
                                                y = c(0.526, 0.517, 0.508),
                                                labels = c("Strain",
                                                           "Allelic Edit",
                                                           "gRNA"),
                                                cex = 1.25)
                                   ## reporter name as title
                                   panel.text(x = 3, y = 0.715,
                                              labels = "Pro TFT",
                                              cex = 1.25,
                                              fontface = "bold")
                               })

pdf(file = "~/emacs/ubi_QTL_paper/figures/per_strain_plot_pro_TFT.pdf")
print(per_strain_pro_plot)
dev.off()

## -----
## ANOVA and lmer analysis of:
## BY full vs. RM full
## BY full vs. BY

pro_analysis_log <- paste0(base_dir, "/results/pro_analysis_log")


## -----
## BY full vs. RM full

## ANOVA
subd <- all_medians[all_medians$strain != "BY_strain", ]
subd <- subd[subd$gating == "gated", ]
str(subd)
unique(subd$genotype)

pro_aov <- aov(formula = TFT_loess ~ genotype_factor * guide_factor,
                data = subd)

write(x = paste0("\n\n", Sys.time(),
                 " ANOVA of gated BY_full vs RM_full for pro TFT:\n\n"),
      file = pro_analysis_log,
      append = T)
capture.output(summary(pro_aov),
               file = pro_analysis_log,
               append = T)

## lmer
pro_model <- lmer(TFT_loess ~ genotype_factor + guide_factor + (1|plate),
                       data = subd,
                       REML = F)
write(x = paste0("\n\n", Sys.time(),
                 " lmer of gated BY_full vs RM_full for pro TFT:\n\n"),
      file = pro_analysis_log,
      append = T)
capture.output(summary(pro_model),
               file = pro_analysis_log,
               append = T)


## -----
## BY wild-type vs. BY full 
## ANOVA
subd <- all_medians[all_medians$genotype != "edit_RM", ]
subd <- subd[subd$gating == "gated", ]
str(subd)
unique(subd$genotype)

pro_aov <- aov(formula = TFT_loess ~ genotype_factor,
                data = subd)

write(x = paste0("\n\n", Sys.time(),
                 " ANOVA of gated BY_wild_type vs BY_full for pro TFT:\n\n"),
      file = pro_analysis_log,
      append = T)
capture.output(summary(pro_aov),
               file = pro_analysis_log,
               append = T)

## lmer
pro_model <- lmer(TFT_loess ~ genotype_factor + (1|plate),
                       data = subd,
                       REML = F)
write(x = paste0("\n\n", Sys.time(),
                 " lmer of gated BY_wild_type vs BY_full for pro TFT:\n\n"),
      file = pro_analysis_log,
      append = T)
capture.output(summary(pro_model),
               file = pro_analysis_log,
               append = T)
#+END_SRC

** RPT6 Fine-Mapping Thr Reporter
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-03-14 Mon 18:16]
   :END:

#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/thr_fine-mapping.R
## -----
## START USER INPUT
## no trailing '/' at the end!
base_dir  <- "~/data/flow/2022.03.10_RPT6_fine-mapping_thr_flow"
frame_dir <- paste0(base_dir, "/dataframes")
stats_log <- paste0(base_dir, "/results/stats_log")
## END USER INPUT 


## -----
## load packages and process fcs files 
source("~/emacs/R/functions/load_flow_packages.R")
source("~/emacs/R/functions/color_setup_BY_RM.R")
source("~/emacs/R/functions/auto_process_fcs_files.R")


## -----
## load the raw and processed data:
load(file = paste0(frame_dir, "/ungated_final.R"))
## load the directory structure for saving output:
load(file = paste0(frame_dir, "/dir_structure.R"))
## load the extracted median for ea. parameter and bio. replicate: 
load(file = paste0(frame_dir, "/all_medians.R"))


## -----
## inferential statistics using 'aov' and 'TukeyHSD':
source("~/emacs/R/functions/univariate_fcs_analysis.R")


## -----
## lmer regression analysis:
source("~/emacs/R/functions/lmer_RPT6_flow_analysis.R")


## -----
## by genotype plot

## addn. variable: genotype including edit 
all_medians$genotype <- ifelse(grepl(pattern = ".*RM.*",
                                     x = all_medians$strain),
                               "edit_RM",
                        ifelse(grepl(pattern = ".*gRNA.*",
                                     x = all_medians$strain),
                               "edit_BY", "BY"))
all_medians$genotype_factor <- as.factor(all_medians$genotype)

## guide RNA
all_medians$guide <- ifelse(!grepl(pattern = ".*gRNA.*",
                                   x = all_medians$strain),
                            "wild-type",
                     ifelse(grepl(pattern = ".*gRNA_02.*",
                                  x = all_medians$strain),
                            "gRNA_02", "gRNA_03"))
all_medians$guide_factor <- as.factor(all_medians$guide)

## relevel to make BY / wild-ytpe the reference level
all_medians$strain_factor <- relevel(x = all_medians$strain_factor,
                                     ref = "BY_strain")

genotype_cols <- ifelse(test = grepl(pattern = ".*BY",
                                     x = levels(all_medians$genotype_factor)),
                        yes = col_by,
                        no = col_rm)

## y axis ranges
TFT_l_range  <- range(all_medians$TFT_loess[all_medians$gating == "gated"])
l_down_range <- TFT_l_range[1] - (0.02 * TFT_l_range[1])
l_up_range   <- TFT_l_range[2] + (0.02 * TFT_l_range[2])
yl_range     <- c(0.168, 0.268)

per_genotype_thr_plot <- xyplot(TFT_loess ~ genotype_factor,
                                 groups = genotype_factor,
                                 subset = all_medians$gating == "gated",
                                 data = all_medians,
                                 ylim = yl_range,
                                 xlab = "",
                                 ylab = expression("Proteasome Activity (-log"["2"]*" RFP / GFP)"),
                                 scales = list(tck = c(1, 0),
                                               alternating = F,
                                               x = list(labels = c("BY wild-type",
                                                                   "BY edited",
                                                                   "BY edited"),
                                                        cex = 1.25),
                                               y = list(cex = 1.25)),
                                 ## at = seq(from = 0.31, to = 0.42, by = 0.02))),
                                 par.settings = list(box.dot = list(pch = "|"),
                                                     box.umbrella = list(lty = 1,
                                                                         lwd = 1,
                                                                         col = gray(0.4)),
                                                     box.rectangle = list(lty = 1,
                                                                          lwd = 1,
                                                                          col = gray(0.4),
                                                                          fill = gray(0.97)),
                                                     strip.background = list(col = gray(0.9)),
                                                     par.ylab.text = list(cex = 1.25),
                                                     par.xlab.text = list(cex = 1.25),
                                                     clip = list(panel = F)),
                                 
                                 panel = function(...) {

                                     ## boxplot
                                     panel.bwplot(...,
                                                  ## pch = "|",
                                                  box.width = 0.4,
                                                  horizontal = F,
                                                  do.out = F)
                                     
                                     ## thicker median lines
                                     dat <- all_medians[all_medians$gating == "gated", ]
                                     panel.segments(x0 = 1:length(levels(dat$genotype_factor)) - 0.2,
                                                    x1 = 0.2 + 1:length(levels(dat$genotype_factor)),
                                                    y0 = tapply(X = dat$TFT_loess,
                                                                INDEX = dat$genotype_factor,
                                                                FUN = median),
                                                    y1 = tapply(X = dat$TFT_loess,
                                                                INDEX = dat$genotype_factor,
                                                                FUN = median),
                                                    col = gray(0.4), lwd = 4)
                                     panel.stripplot(...,
                                                     pch = 21,
                                                     cex = 1.1,
                                                     fill = genotype_cols,
                                                     col = "black",
                                                     jitter.data = T,
                                                     amount = 0.1,
                                                     horizontal = F)
                                     
                                     ## strain name and x axis labels 
                                     panel.text(x = 1:3,
                                                y = rep(0.159, 3),
                                                labels = c("-",
                                                           expression(italic("RPT6")*" -175 BY"),
                                                           expression(italic("RPT6")*" -175 RM")),
                                                cex = 1.25)
                                     panel.text(x = c(0.22, 0.1),
                                                y = c(0.164, 0.159),
                                                labels = c("Strain",
                                                           "Allelic Edit"),
                                                cex = 1.25)
                                     ## [x] pvals and connecting segments
                                     panel.text(x = c(2.5, 2.0),
                                                y = c(0.257, 0.265),
                                                labels = c(expression(italic("p")*" = 5.0e-5"),
                                                           expression(italic("p")*" = 1.1e-3")),
                                                cex = 1.25)
                                     panel.segments(x0 = c(2, 1), x1 = c(3, 3),
                                                    y0 = c(0.26, 0.2625), y1 = c(0.26, 0.2625),
                                                    lwd = 1.2, col = gray(0.4))
                                     ## [x] reporter name as title
                                     panel.text(x = 2, y = 0.27,
                                                labels = "Thr TFT",
                                                cex = 1.25,
                                                fontface = "bold")
                                 })

pdf(file = "~/emacs/ubi_QTL_paper/figures/per_genotype_plot_thr_TFT_final.pdf")
print(per_genotype_thr_plot)
dev.off()


## -----
## per strain plot
strain_cols <- ifelse(test = grepl(pattern = ".*BY.*",
                                     x = levels(all_medians$strain_factor)),
                        yes = col_by,
                        no = col_rm)

per_strain_thr_plot <- xyplot(TFT_loess ~ strain_factor,
                               groups = strain_factor,
                               subset = all_medians$gating == "gated",
                               data = all_medians,
                               ylim = yl_range,
                               xlab = "",
                               ylab = expression("Proteasome Activity (-log"["2"]*" RFP / GFP)"),
                               scales = list(tck = c(1, 0),
                                             alternating = F,
                                             x = list(labels = c("BY wild-type",
                                                                 "BY edited",
                                                                 "BY edited",
                                                                 "BY edited",
                                                                 "BY edited"),
                                                      cex = 1.2),
                                             y = list(cex = 1.25)),
                               par.settings = list(box.dot = list(pch = "|"),
                                                   box.umbrella = list(lty = 1,
                                                                       lwd = 1,
                                                                       col = gray(0.4)),
                                                   box.rectangle = list(lty = 1,
                                                                        lwd = 1,
                                                                        col = gray(0.4),
                                                                        fill = gray(0.97)),
                                                   strip.background = list(col = gray(0.9)),
                                                   par.ylab.text = list(cex = 1.25),
                                                   par.xlab.text = list(cex = 1.25),
                                                   clip = list(panel = F),
                                                   layout.widths = list(left.padding = 5),
                                                   layout.heights = list(bottom.padding = 5)),
                               panel = function(...) {
                                   ## boxplot
                                   panel.bwplot(...,
                                                ## pch = "|",
                                                box.width = 0.4,
                                                horizontal = F,
                                                do.out = F)
                                   
                                   ## thicker median lines
                                   dat <- all_medians[all_medians$gating == "gated", ]
                                   panel.segments(x0 = 1:length(levels(dat$strain_factor)) - 0.2,
                                                  x1 = 0.2 + 1:length(levels(dat$strain_factor)),
                                                  y0 = tapply(X = dat$TFT_loess,
                                                              INDEX = dat$strain_factor,
                                                              FUN = median),
                                                  y1 = tapply(X = dat$TFT_loess,
                                                              INDEX = dat$strain_factor,
                                                              FUN = median),
                                                  col = gray(0.4), lwd = 4)
                                   panel.stripplot(...,
                                                   pch = 21,
                                                   cex = 1.1,
                                                   fill = strain_cols,
                                                   col = "black",
                                                   jitter.data = T,
                                                   amount = 0.1,
                                                   horizontal = F)
                                   ## strain name and x axis labels 
                                   panel.text(x = c(1, 2.5, 4.5),
                                              y = rep(0.159, 3),
                                              labels = c("-",
                                                         expression(italic("RPT6")*" -175 BY"),
                                                         expression(italic("RPT6")*" -175 RM")),
                                              cex = 1.25)
                                   ## gRNA
                                   panel.text(x = 1:5,
                                              y = rep(0.154, 5),
                                              labels = c("-",
                                                         "1", "2",
                                                         "1", "2"),
                                              cex = 1.25)
                                   ## pvals and connecting segments
                                   panel.text(x = seq(from = 1.5, to = 3.0, by = 0.5),
                                              y = c(0.246, 0.253, 0.265, 0.26),
                                              labels = c(expression(italic("p")*" = 0.58"),
                                                         expression(italic("p")*" = 0.85"),
                                                         expression(italic("p")*" = 6e-4"),
                                                         expression(italic("p")*" = 2e-3")),
                                              cex = 1.25)
                                   panel.segments(x0 = rep(1, 4),
                                                  x1 = 2:5,
                                                  y0 = c(0.244, 0.251, 0.263, 0.258),
                                                  y1 = c(0.244, 0.251, 0.263, 0.258),
                                                  lwd = 1.2, col = gray(0.4))
                                   ## x axis descriptors
                                     panel.text(x = c(0.08, -0.14, 0.07),
                                                y = c(0.164, 0.159, 0.154),
                                                labels = c("Strain",
                                                           "Allelic Edit",
                                                           "gRNA"),
                                                cex = 1.25)
                                   ## reporter name as title
                                   panel.text(x = 3, y = 0.27,
                                              labels = "Thr TFT",
                                              cex = 1.25,
                                              fontface = "bold")
                               })

pdf(file = "~/emacs/ubi_QTL_paper/figures/per_strain_plot_thr_TFT.pdf")
print(per_strain_thr_plot)
dev.off()


## -----
## ANOVA and lmer analysis of:
## BY full vs. RM full
## BY full vs. BY

thr_analysis_log <- paste0(base_dir, "/results/thr_analysis_log")


## -----
## BY full vs. RM full

## ANOVA
subd <- all_medians[all_medians$strain != "BY_strain", ]
subd <- subd[subd$gating == "gated", ]
str(subd)
unique(subd$genotype)
unique(subd$gating)

thr_aov <- aov(formula = TFT_loess ~ genotype_factor * guide_factor,
                data = subd)

write(x = paste0("\n\n", Sys.time(),
                 " ANOVA of gated BY_full vs RM_full for thr TFT:\n\n"),
      file = thr_analysis_log,
      append = T)
capture.output(summary(thr_aov),
               file = thr_analysis_log,
               append = T)

## lmer
thr_model <- lmer(TFT_loess ~ genotype_factor + guide_factor + (1|plate),
                       data = subd,
                       REML = F)
write(x = paste0("\n\n", Sys.time(),
                 " lmer of gated BY_full vs RM_full for thr TFT:\n\n"),
      file = thr_analysis_log,
      append = T)
capture.output(summary(thr_model),
               file = thr_analysis_log,
               append = T)


## -----
## BY wild-type vs. BY full 
## ANOVA
subd <- all_medians[all_medians$genotype != "edit_RM", ]
subd <- subd[subd$gating == "gated", ]
str(subd)
unique(subd$genotype)
unique(subd$gating)

thr_aov <- aov(formula = TFT_loess ~ genotype_factor,
                data = subd)

write(x = paste0("\n\n", Sys.time(),
                 " ANOVA of gated BY_wild_type vs BY_full for thr TFT:\n\n"),
      file = thr_analysis_log,
      append = T)
capture.output(summary(thr_aov),
               file = thr_analysis_log,
               append = T)

## lmer
thr_model <- lmer(TFT_loess ~ genotype_factor + (1|plate),
                       data = subd,
                       REML = F)
write(x = paste0("\n\n", Sys.time(),
                 " lmer of gated BY_wild_type vs BY_full for thr TFT:\n\n"),
      file = thr_analysis_log,
      append = T)
capture.output(summary(thr_model),
               file = thr_analysis_log,
               append = T)
#+END_SRC

** RPT6 Fine-Mapping Ser Reporter
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-03-16 Wed 10:52]
   :END:
#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/ser_fine-mapping.R
## -----
## START USER INPUT
## no trailing '/' at the end!
base_dir  <- "~/data/flow/2022.03.11_RPT6_fine-mapping_ser_flow"
frame_dir <- paste0(base_dir, "/dataframes")
stats_log <- paste0(base_dir, "/results/stats_log")
## END USER INPUT 


## -----
## load packages and process fcs files 
source("~/emacs/R/functions/load_flow_packages.R")
source("~/emacs/R/functions/color_setup_BY_RM.R")
source("~/emacs/R/functions/auto_process_fcs_files.R")


## -----
## load the raw and processed data:
load(file = paste0(frame_dir, "/ungated_final.R"))
## load the directory structure for saving output:
load(file = paste0(frame_dir, "/dir_structure.R"))
## load the extracted median for ea. parameter and bio. replicate: 
load(file = paste0(frame_dir, "/all_medians.R"))


## -----
## inferential statistics using 'aov' and 'TukeyHSD':
source("~/emacs/R/functions/univariate_fcs_analysis.R")


## -----
## lmer regression analysis:
source("~/emacs/R/functions/lmer_RPT6_flow_analysis.R")


## -----
## by genotype plot

## addn. variable: genotype including edit 
all_medians$genotype <- ifelse(grepl(pattern = ".*RM.*",
                                     x = all_medians$strain),
                               "edit_RM",
                        ifelse(grepl(pattern = ".*gRNA.*",
                                     x = all_medians$strain),
                               "edit_BY", "BY"))
all_medians$genotype_factor <- as.factor(all_medians$genotype)

## guide RNA
all_medians$guide <- ifelse(!grepl(pattern = ".*gRNA.*",
                                   x = all_medians$strain),
                            "wild-type",
                     ifelse(grepl(pattern = ".*gRNA_02.*",
                                  x = all_medians$strain),
                            "gRNA_02", "gRNA_03"))
all_medians$guide_factor <- as.factor(all_medians$guide)

## relevel to make BY / wild-ytpe the reference level
all_medians$strain_factor <- relevel(x = all_medians$strain_factor,
                                     ref = "BY_strain")

genotype_cols <- ifelse(test = grepl(pattern = ".*BY",
                                     x = levels(all_medians$genotype_factor)),
                        yes = col_by,
                        no = col_rm)

## y axis ranges
TFT_l_range  <- range(all_medians$TFT_loess[all_medians$gating == "gated"])
l_down_range <- TFT_l_range[1] - (0.02 * TFT_l_range[1])
l_up_range   <- TFT_l_range[2] + (0.03 * TFT_l_range[2])
yl_range     <- c(l_down_range, l_up_range)

per_genotype_ser_plot <- xyplot(TFT_loess ~ genotype_factor,
                                 groups = genotype_factor,
                                 subset = all_medians$gating == "gated",
                                 data = all_medians,
                                 ylim = yl_range,
                                 xlab = "",
                                 ylab = expression("Proteasome Activity (-log"["2"]*" RFP / GFP)"),
                                 scales = list(tck = c(1, 0),
                                               alternating = F,
                                               x = list(labels = c("BY wild-type",
                                                                   "BY edited",
                                                                   "BY edited"),
                                                        cex = 1.25),
                                               y = list(cex = 1.25,
                                                        at = seq(from = 0.65,
                                                                 to = 0.78,
                                                                 by = 0.03))),
                                 par.settings = list(box.dot = list(pch = "|"),
                                                     box.umbrella = list(lty = 1,
                                                                         lwd = 1,
                                                                         col = gray(0.4)),
                                                     box.rectangle = list(lty = 1,
                                                                          lwd = 1,
                                                                          col = gray(0.4),
                                                                          fill = gray(0.97)),
                                                     strip.background = list(col = gray(0.9)),
                                                     par.ylab.text = list(cex = 1.25),
                                                     par.xlab.text = list(cex = 1.25),
                                                     clip = list(panel = F)),
                                 
                                 panel = function(...) {

                                     ## boxplot
                                     panel.bwplot(...,
                                                  ## pch = "|",
                                                  box.width = 0.4,
                                                  horizontal = F,
                                                  do.out = F)
                                     
                                     ## thicker median lines
                                     dat <- all_medians[all_medians$gating == "gated", ]
                                     panel.segments(x0 = 1:length(levels(dat$genotype_factor)) - 0.2,
                                                    x1 = 0.2 + 1:length(levels(dat$genotype_factor)),
                                                    y0 = tapply(X = dat$TFT_loess,
                                                                INDEX = dat$genotype_factor,
                                                                FUN = median),
                                                    y1 = tapply(X = dat$TFT_loess,
                                                                INDEX = dat$genotype_factor,
                                                                FUN = median),
                                                    col = gray(0.4), lwd = 4)
                                     panel.stripplot(...,
                                                     pch = 21,
                                                     cex = 1.1,
                                                     fill = genotype_cols,
                                                     col = "black",
                                                     jitter.data = T,
                                                     amount = 0.1,
                                                     horizontal = F)
                                     
                                     ## strain name and x axis labels 
                                     panel.text(x = 1:3,
                                                y = rep(0.629, 3),
                                                labels = c("-",
                                                           expression(italic("RPT6")*" -175 BY"),
                                                           expression(italic("RPT6")*" -175 RM")),
                                                cex = 1.25)
                                     panel.text(x = c(0.22, 0.098),
                                                y = c(0.6365, 0.629),
                                                labels = c("Strain",
                                                           "Allelic Edit"),
                                                cex = 1.25)
                                     ## [x] pvals and connecting segments
                                     panel.text(x = c(2.5, 2.0),
                                                y = c(0.77, 0.779),
                                                labels = c(expression(italic("p")*" = 1.1e-3"),
                                                           expression(italic("p")*" = 1.0e-4")),
                                                cex = 1.25)
                                     panel.segments(x0 = c(2, 1), x1 = c(3, 3),
                                                    y0 = c(0.766, 0.775),
                                                    y1 = c(0.766, 0.775),
                                                    lwd = 1.2, col = gray(0.4))
                                     ## [x] reporter name as title
                                     panel.text(x = 2, y = 0.787,
                                                labels = "Ser TFT",
                                                cex = 1.25,
                                                fontface = "bold")
                                })

pdf(file = "~/emacs/ubi_QTL_paper/figures/per_genotype_plot_ser_TFT_final.pdf")
print(per_genotype_ser_plot)
dev.off()


## -----
## per strain plot
strain_cols <- ifelse(test = grepl(pattern = ".*BY.*",
                                     x = levels(all_medians$strain_factor)),
                        yes = col_by,
                        no = col_rm)

yl_range <- c(yl_range[1], 0.791)

per_strain_ser_plot <- xyplot(TFT_loess ~ strain_factor,
                               groups = strain_factor,
                               subset = all_medians$gating == "gated",
                               data = all_medians,
                               ylim = yl_range,
                               xlab = "",
                               ylab = expression("Proteasome Activity (-log"["2"]*" RFP / GFP)"),
                               scales = list(tck = c(1, 0),
                                             alternating = F,
                                             x = list(labels = c("BY wild-type",
                                                                 "BY edited",
                                                                 "BY edited",
                                                                 "BY edited",
                                                                 "BY edited"),
                                                      cex = 1.2),
                                             y = list(cex = 1.25,
                                                        at = seq(from = 0.65,
                                                                 to = 0.78,
                                                                 by = 0.03))),
                               par.settings = list(box.dot = list(pch = "|"),
                                                   box.umbrella = list(lty = 1,
                                                                       lwd = 1,
                                                                       col = gray(0.4)),
                                                   box.rectangle = list(lty = 1,
                                                                        lwd = 1,
                                                                        col = gray(0.4),
                                                                        fill = gray(0.97)),
                                                   strip.background = list(col = gray(0.9)),
                                                   par.ylab.text = list(cex = 1.25),
                                                   par.xlab.text = list(cex = 1.25),
                                                   clip = list(panel = F),
                                                   layout.widths = list(left.padding = 5),
                                                   layout.heights = list(bottom.padding = 5)),
                               panel = function(...) {
                                   ## boxplot
                                   panel.bwplot(...,
                                                ## pch = "|",
                                                box.width = 0.4,
                                                horizontal = F,
                                                do.out = F)
                                   
                                   ## thicker median lines
                                   dat <- all_medians[all_medians$gating == "gated", ]
                                   panel.segments(x0 = 1:length(levels(dat$strain_factor)) - 0.2,
                                                  x1 = 0.2 + 1:length(levels(dat$strain_factor)),
                                                  y0 = tapply(X = dat$TFT_loess,
                                                              INDEX = dat$strain_factor,
                                                              FUN = median),
                                                  y1 = tapply(X = dat$TFT_loess,
                                                              INDEX = dat$strain_factor,
                                                              FUN = median),
                                                  col = gray(0.4), lwd = 4)
                                   panel.stripplot(...,
                                                   pch = 21,
                                                   cex = 1.1,
                                                   fill = strain_cols,
                                                   col = "black",
                                                   jitter.data = T,
                                                   amount = 0.1,
                                                   horizontal = F)
                                   ## strain name and x axis labels 
                                   panel.text(x = c(1, 2.5, 4.5),
                                                y = rep(0.629, 3),
                                                labels = c("-",
                                                           expression(italic("RPT6")*" -175 BY"),
                                                           expression(italic("RPT6")*" -175 RM")),
                                                cex = 1.25)
                                   ## gRNA
                                   panel.text(x = 1:5,
                                              y = rep(0.6215, 5),
                                              labels = c("-",
                                                         "1", "2",
                                                         "1", "2"),
                                              cex = 1.25)
                                   ## pvals and connecting segments
                                   panel.text(x = seq(from = 1.5, to = 3.0, by = 0.5),
                                              y = seq(from = 0.763, by = 0.008,
                                                      length.out = 4),
                                              labels = c(expression(italic("p")*" = 0.41"),
                                                         expression(italic("p")*" = 0.21"),
                                                         expression(italic("p")*" = 9e-4"),
                                                         expression(italic("p")*" = 3e-4")),
                                              cex = 1.25)
                                   panel.segments(x0 = rep(1, 4),
                                                  x1 = 2:5,
                                                  y0 = seq(from = 0.761,
                                                           by = 0.008,
                                                           length.out = 4),
                                                  y1 = seq(from = 0.761,
                                                           by = 0.008,
                                                           length.out = 4),
                                                  lwd = 1.2, col = gray(0.4))
                                   ## x axis descriptors
                                     panel.text(x = c(0.08, -0.14, 0.07),
                                                y = c(0.6365, 0.629, 0.6215),
                                                labels = c("Strain",
                                                           "Allelic Edit",
                                                           "gRNA"),
                                                cex = 1.25)
                                   ## reporter name as title
                                   panel.text(x = 3, y = 0.7945,
                                              labels = "Ser TFT",
                                              cex = 1.25,
                                              fontface = "bold")
                              })
 
                              
pdf(file = "~/emacs/ubi_QTL_paper/figures/per_strain_plot_ser_TFT.pdf")
print(per_strain_ser_plot)
dev.off()


## -----
## ANOVA and lmer analysis of:
## BY full vs. RM full
## BY full vs. BY

ser_analysis_log <- paste0(base_dir, "/results/ser_analysis_log")


## -----
## BY full vs. RM full

## ANOVA
subd <- all_medians[all_medians$strain != "BY_strain", ]
subd <- subd[subd$gating == "gated", ]
str(subd)
unique(subd$genotype)
unique(subd$gating)

ser_aov <- aov(formula = TFT_loess ~ genotype_factor * guide_factor,
                data = subd)

write(x = paste0("\n\n", Sys.time(),
                 " ANOVA of gated BY_full vs RM_full for ser TFT:\n\n"),
      file = ser_analysis_log,
      append = T)
capture.output(summary(ser_aov),
               file = ser_analysis_log,
               append = T)

## lmer
ser_model <- lmer(TFT_loess ~ genotype_factor + guide_factor + (1|plate),
                       data = subd,
                       REML = F)
write(x = paste0("\n\n", Sys.time(),
                 " lmer of gated BY_full vs RM_full for ser TFT:\n\n"),
      file = ser_analysis_log,
      append = T)
capture.output(summary(ser_model),
               file = ser_analysis_log,
               append = T)


## -----
## BY wild-type vs. BY full 
## ANOVA
subd <- all_medians[all_medians$genotype != "edit_RM", ]
subd <- subd[subd$gating == "gated", ]
str(subd)
unique(subd$genotype)
unique(subd$gating)

ser_aov <- aov(formula = TFT_loess ~ genotype_factor,
                data = subd)

write(x = paste0("\n\n", Sys.time(),
                 " ANOVA of gated BY_wild_type vs BY_full for ser TFT:\n\n"),
      file = ser_analysis_log,
      append = T)
capture.output(summary(ser_aov),
               file = ser_analysis_log,
               append = T)

## lmer
ser_model <- lmer(TFT_loess ~ genotype_factor + (1|plate),
                       data = subd,
                       REML = F)
write(x = paste0("\n\n", Sys.time(),
                 " lmer of gated BY_wild_type vs BY_full for ser TFT:\n\n"),
      file = ser_analysis_log,
      append = T)
capture.output(summary(ser_model),
               file = ser_analysis_log,
               append = T)
#+END_SRC

** RPT6 Fine-Mapping Trp Reporter
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-03-14 Mon 17:22]
   :END:
#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/trp_fine-mapping.R
## -----
## START USER INPUT
## no trailing '/' at the end!
base_dir  <- "~/data/flow/2022.03.11_RPT6_fine-mapping_trp_flow"
frame_dir <- paste0(base_dir, "/dataframes")
stats_log <- paste0(base_dir, "/results/stats_log")
## END USER INPUT 


## -----
## load packages and process fcs files 
source("~/emacs/R/functions/load_flow_packages.R")
source("~/emacs/R/functions/color_setup_BY_RM.R")
source("~/emacs/R/functions/auto_process_fcs_files.R")


## -----
## load the raw and processed data:
load(file = paste0(frame_dir, "/ungated_final.R"))
## load the directory structure for saving output:
load(file = paste0(frame_dir, "/dir_structure.R"))
## load the extracted median for ea. parameter and bio. replicate: 
load(file = paste0(frame_dir, "/all_medians.R"))


## -----
## inferential statistics using 'aov' and 'TukeyHSD':
source("~/emacs/R/functions/univariate_fcs_analysis.R")


## -----
## lmer regression analysis:
source("~/emacs/R/functions/lmer_RPT6_flow_analysis.R")


## -----
## by genotype plot

## y axis ranges
TFT_l_range  <- range(all_medians$TFT_loess[all_medians$gating == "gated"])
l_down_range <- TFT_l_range[1] - (0.02 * TFT_l_range[1])
l_up_range   <- TFT_l_range[2] + (0.02 * TFT_l_range[2])
## modify slightly for trp reporter 
yl_range     <- c(l_down_range, 0.495)

## addn. variable: genotype including edit 
all_medians$genotype <- ifelse(grepl(pattern = ".*RM.*",
                                     x = all_medians$strain),
                               "edit_RM",
                        ifelse(grepl(pattern = ".*gRNA.*",
                                     x = all_medians$strain),
                               "edit_BY", "BY"))
all_medians$genotype_factor <- as.factor(all_medians$genotype)

## guide RNA
all_medians$guide <- ifelse(!grepl(pattern = ".*gRNA.*",
                                   x = all_medians$strain),
                            "wild-type",
                     ifelse(grepl(pattern = ".*gRNA_02.*",
                                  x = all_medians$strain),
                            "gRNA_02", "gRNA_03"))
all_medians$guide_factor <- as.factor(all_medians$guide)

## relevel to make BY / wild-ytpe the reference level
all_medians$strain_factor <- relevel(x = all_medians$strain_factor,
                                     ref = "BY_strain")

genotype_cols <- ifelse(test = grepl(pattern = ".*BY",
                                     x = levels(all_medians$genotype_factor)),
                        yes = col_by,
                        no = col_rm)

per_genotype_trp_plot <- xyplot(TFT_loess ~ genotype_factor,
                            groups = genotype_factor,
                            subset = all_medians$gating == "gated",
                            data = all_medians,
                            ylim = yl_range,
                            xlab = "",
                            ylab = expression("Proteasome Activity (log"["2"]*" RFP / GFP)"),
                            scales = list(tck = c(1, 0),
                                          alternating = F,
                                          x = list(labels = c("BY wild-type",
                                                              "BY edited",
                                                              "BY edited"),
                                                   cex = 1.25),
                                          y = list(cex = 1.25)),
                            par.settings = list(box.dot = list(pch = "|"),
                                                box.umbrella = list(lty = 1,
                                                                    lwd = 1,
                                                                    col = gray(0.4)),
                                                box.rectangle = list(lty = 1,
                                                                     lwd = 1,
                                                                     col = gray(0.4),
                                                                     fill = gray(0.97)),
                                                strip.background = list(col = gray(0.9)),
                                                par.ylab.text = list(cex = 1.25),
                                                par.xlab.text = list(cex = 1.25),
                                                clip = list(panel = F)),
                            
                            panel = function(...) {

                                ## boxplot
                                panel.bwplot(...,
                                             ## pch = "|",
                                             box.width = 0.4,
                                             horizontal = F,
                                             do.out = F)
                                
                                ## thicker median lines
                                dat <- all_medians[all_medians$gating == "gated", ]
                                panel.segments(x0 = 1:length(levels(dat$genotype_factor)) - 0.2,
                                               x1 = 0.2 + 1:length(levels(dat$genotype_factor)),
                                               y0 = tapply(X = dat$TFT_loess,
                                                           INDEX = dat$genotype_factor,
                                                           FUN = median),
                                               y1 = tapply(X = dat$TFT_loess,
                                                           INDEX = dat$genotype_factor,
                                                           FUN = median),
                                               col = gray(0.4), lwd = 4)

                                panel.stripplot(...,
                                                pch = 21,
                                                cex = 1.1,
                                                fill = genotype_cols,
                                                col = "black",
                                                jitter.data = T,
                                                amount = 0.1,
                                                horizontal = F)
                                ## strain name and x axis labels 
                                panel.text(x = 1:3,
                                           y = rep(0.395, 3),
                                           labels = c("-",
                                                      expression(italic("RPT6")*" -175 BY"),
                                                      expression(italic("RPT6")*" -175 RM")),
                                           cex = 1.25)
                                panel.text(x = c(0.22, 0.1),
                                           y = c(0.4, 0.395),
                                           labels = c("Strain",
                                                      "Allelic Edit"),
                                           cex = 1.25)
                                ## pvals and connecting segments
                                panel.text(x = c(2.0),
                                           y = c(0.47),
                                           labels = c(expression(italic("p")*" = 7.3e-3")),
                                           cex = 1.25)
                                panel.segments(x0 = c(1), x1 = c(3),
                                               y0 = c(0.467), y1 = c(0.467),
                                               lwd = 1.2, col = gray(0.4))
                                ## reporter name as title
                                panel.text(x = 2, y = 0.4976,
                                           labels = "Trp TFT",
                                           cex = 1.25,
                                           fontface = "bold")
                            })
## code end

pdf(file = "~/emacs/ubi_QTL_paper/figures/per_genotype_plot_trp_TFT_final.pdf")
print(per_genotype_trp_plot)
dev.off()


## -----
## per strain plot
strain_cols <- ifelse(test = grepl(pattern = ".*BY.*",
                                     x = levels(all_medians$strain_factor)),
                        yes = col_by,
                        no = col_rm)

per_strain_trp_plot <- xyplot(TFT_loess ~ strain_factor,
                          groups = strain_factor,
                          subset = all_medians$gating == "gated",
                          data = all_medians,
                          ylim = yl_range,
                          xlab = "",
                          ylab = expression("Proteasome Activity (log"["2"]*" RFP / GFP)"),
                          scales = list(tck = c(1, 0),
                                        alternating = F,
                                        x = list(labels = c("BY wild-type",
                                                            "BY edited",
                                                            "BY edited",
                                                            "BY edited",
                                                            "BY edited"),
                                                 cex = 1.2),
                                        y = list(cex = 1.25)),
                          par.settings = list(box.dot = list(pch = "|"),
                                              box.umbrella = list(lty = 1,
                                                                  lwd = 1,
                                                                  col = gray(0.4)),
                                              box.rectangle = list(lty = 1,
                                                                   lwd = 1,
                                                                   col = gray(0.4),
                                                                   fill = gray(0.97)),
                                              strip.background = list(col = gray(0.9)),
                                              par.ylab.text = list(cex = 1.25),
                                              par.xlab.text = list(cex = 1.25),
                                              clip = list(panel = F),
                                              layout.widths = list(left.padding = 2),
                                              layout.heights = list(bottom.padding = 5)),
                          panel = function(...) {
                              ## boxplot
                              panel.bwplot(...,
                                           ## pch = "|",
                                           box.width = 0.4,
                                           horizontal = F,
                                           do.out = F)
                              
                              ## thicker median lines
                              dat <- all_medians[all_medians$gating == "gated", ]
                              panel.segments(x0 = 1:length(levels(dat$strain_factor)) - 0.2,
                                             x1 = 0.2 + 1:length(levels(dat$strain_factor)),
                                             y0 = tapply(X = dat$TFT_loess,
                                                         INDEX = dat$strain_factor,
                                                         FUN = median),
                                             y1 = tapply(X = dat$TFT_loess,
                                                         INDEX = dat$strain_factor,
                                                         FUN = median),
                                             col = gray(0.4), lwd = 4)
                              panel.stripplot(...,
                                              pch = 21,
                                              cex = 1.1,
                                              fill = strain_cols,
                                              col = "black",
                                              jitter.data = T,
                                              amount = 0.1,
                                              horizontal = F)
                              ## strain name and x axis labels 
                              panel.text(x = c(1, 2.5, 4.5),
                                         y = rep(0.395, 3),
                                         labels = c("-",
                                                    expression(italic("RPT6")*" -175 BY"),
                                                    expression(italic("RPT6")*" -175 RM")),
                                         cex = 1.2)
                              panel.text(x = c(0.1, -0.1, 0.11),
                                         y = c(0.3994, 0.395, 0.3906),
                                         labels = c("Strain",
                                                    "Allelic Edit",
                                                    "gRNA"),
                                         cex = 1.2)
                              panel.text(x = 1:5,
                                         y = rep(0.3906, 5),
                                         labels = c("-",
                                                    "1", "2",
                                                    "1", "2"),
                                         cex = 1.2)
                              ## pvals and connecting segments
                              panel.text(x = seq(from = 1.5, to = 3.0, by = 0.5),
                                         y = seq(from = 0.462,
                                                 by = 0.008,
                                                 length.out = 4),
                                         labels = c(expression(italic("p")*" = 0.47"),
                                                    expression(italic("p")*" = 0.58"),
                                                    expression(italic("p")*" = 0.39"),
                                                    expression(italic("p")*" = 1.6e-3")),
                                         cex = 1.25)
                              panel.segments(x0 = rep(1, 4),
                                             x1 = 2:5,
                                             y0 = seq(from = 0.459,
                                                      by = 0.008,
                                                      length.out = 4),
                                             y1 = seq(from = 0.459,
                                                      by = 0.008,
                                                      length.out = 4),
                                             lwd = 1.2, col = gray(0.4))
                              ## reporter name as title
                              panel.text(x = 3.0, y = 0.4976,
                                         labels = "Trp TFT",
                                         cex = 1.25,
                                         fontface = "bold")
                          })

pdf(file = "~/emacs/ubi_QTL_paper/figures/per_strain_plot_trp_TFT.pdf")
print(per_strain_trp_plot)
dev.off()


## -----
## ANOVA and lmer analysis of:
## BY full vs. RM full
## BY full vs. BY

trp_analysis_log <- paste0(base_dir, "/results/trp_analysis_log")

## -----
## BY full vs. RM full

## ANOVA
subd <- all_medians[all_medians$strain != "BY_strain", ]
subd <- subd[subd$gating == "gated", ]
str(subd)
unique(subd$genotype)
unique(subd$gating)

trp_aov <- aov(formula = TFT_loess ~ genotype_factor * guide_factor,
                data = subd)

write(x = paste0("\n\n", Sys.time(),
                 " ANOVA of gated BY_full vs RM_full for trp TFT:\n\n"),
      file = trp_analysis_log,
      append = T)
capture.output(summary(trp_aov),
               file = trp_analysis_log,
               append = T)

## lmer
trp_model <- lmer(TFT_loess ~ genotype_factor + guide_factor + (1|plate),
                       data = subd,
                       REML = F)
write(x = paste0("\n\n", Sys.time(),
                 " lmer of gated BY_full vs RM_full for trp TFT:\n\n"),
      file = trp_analysis_log,
      append = T)
capture.output(summary(trp_model),
               file = trp_analysis_log,
               append = T)


## -----
## BY wild-type vs. BY full 
## ANOVA
subd <- all_medians[all_medians$genotype != "edit_RM", ]
subd <- subd[subd$gating == "gated", ]
str(subd)
unique(subd$genotype)
unique(subd$gating)

trp_aov <- aov(formula = TFT_loess ~ genotype_factor,
                data = subd)

write(x = paste0("\n\n", Sys.time(),
                 " ANOVA of gated BY_wild_type vs BY_full for trp TFT:\n\n"),
      file = trp_analysis_log,
      append = T)
capture.output(summary(trp_aov),
               file = trp_analysis_log,
               append = T)

## lmer
trp_model <- lmer(TFT_loess ~ genotype_factor + (1|plate),
                       data = subd,
                       REML = F)
write(x = paste0("\n\n", Sys.time(),
                 " lmer of gated BY_wild_type vs BY_full for trp TFT:\n\n"),
      file = trp_analysis_log,
      append = T)
capture.output(summary(trp_model),
               file = trp_analysis_log,
               append = T)
#+END_SRC

** RPT6 Fine-Mapping All Reporters Boxplot
   :LOGBOOK:
   - State "DONE"       from              [2022-06-07 Tue 12:04]
   :END:
#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/all_reporters_fine-mapping_boxplots.R
## -----
base_dir  <- "~/data/flow/"
individual_dirs <- sapply(X = c("2022.03.09_RPT6_fine-mapping_ODC_TFT_flow",
                                "2022.03.09_RPT6_fine-mapping_rpn4_TFT_flow",
                                "2022.03.10_RPT6_fine-mapping_pro_TFT_flow",
                                "2022.03.10_RPT6_fine-mapping_thr_flow",
                                "2022.03.11_RPT6_fine-mapping_ser_flow",
                                "2022.03.11_RPT6_fine-mapping_trp_flow"),
                                FUN = function(x) {
                                    paste0(base_dir, x)
                          })

## make sure we have the data for each reporter:
sapply(X = individual_dirs,
       FUN = function(x,...) {
           stopifnot(file.exists(paste0(x, "/dataframes/all_medians.R")))
})



## -----
## load packages
source("~/emacs/R/functions/load_flow_packages.R")
source("~/emacs/R/functions/color_setup_BY_RM.R")

## -----
## create lists for storing datasets

## 'all' lists contain all data points
all_genotype_list <- list()
all_strain_list   <- list()


## -----
## load in the data for each reporter
i <- 1
for(i in 1:length(individual_dirs)) {

    ## for each reporter, load the object 'all_medians',
    ## a dataset containing the median of independent
    ## biological replicates for 1e4 cells analyzed by flow
    load(paste0(individual_dirs[i], "/dataframes/all_medians.R"))

    
    
    ## use gated cells for analysis
    all_gated <- all_medians[all_medians$gating == "gated", ]
    all_gated <- all_gated[all_gated$strain != "BY_strain", ]
    ## 2 strains * 2 gRNAs * 24 bio. replicates = 96

    ## convert TFT ratios to z-scores and scale rel. to BY full median
    all_gated$genotype <- ifelse(test = grepl(pattern = "BY.*",
                                              x = all_gated$strain),
                                 yes = "BY",
                                 no = "RM")

    scale_val <- median(all_gated$TFT_loess[all_gated$genotype == "BY"])
    all_gated$TFT_scaled <- as.vector(scale(x = all_gated$TFT_loess,
                                            center = scale_val,
                                            scale = T))
    
    all_genotype_list[[i]] <- all_gated

}
 
## (6 reporters * 4 strains * 24 replicates) = 576 obs
all_genotype_data <- do.call("rbind", all_genotype_list)
all_genotype_data$genotype_factor <- as.factor(all_genotype_data$genotype)

## levels(all_genotype_data$reporter_factor)
col_by <- "#2166ACFF"
col_rm <- "#BF3232FF"

reporter_titles <- gsub(pattern = "ODC_TFT",
                        replacement = "ODC TFT",
                        x = all_genotype_data$reporter_factor)

reporter_titles <- gsub(pattern = "rpn4_TFT",
                        replacement = "Rpn4 TFT",
                        x = reporter_titles)

reporter_titles <- gsub(pattern = "pro_TFT",
                        replacement = "Pro TFT",
                        x = reporter_titles)

reporter_titles <- gsub(pattern = "thr_TFT",
                        replacement = "Thr TFT",
                        x = reporter_titles)

reporter_titles <- gsub(pattern = "ser_TFT",
                        replacement = "Ser TFT",
                        x = reporter_titles)

reporter_titles <- gsub(pattern = "trp_TFT",
                        replacement = "Trp TFT",
                        x = reporter_titles) 

all_genotype_data$reporter_titles <- as.factor(reporter_titles)

## 4 x 12 layout
## save.session(file = "~/Desktop/2022.06.05_RPT6_combined_boxplot.Rsession")

## use this w/ 'index.cond' below: 
## levels(all_genotype_data$reporter_titles)[c(1, 3, 2, 4, 5, 6)]

pdf(file = "~/emacs/ubi_QTL_paper/results/RPT6_all_reporters_boxplot.pdf",
    height = 4, width = 12)
print(
xyplot(TFT_scaled ~ genotype_factor | reporter_titles,
       groups = genotype_factor,
       index.cond = list(c(1, 3, 2, 4, 5, 6)),
       data = all_genotype_data,
       ylim = c(-2.5, 3.6),
       xlab = "",
       layout = c(6, 1),
       ylab = "",
       scales = list(tck = c(1, 0),
                     alternating = F,
                     x = list(labels = c("BY", "RM"),
                              cex = 1.45,
                              rot = 0),
                     y = list(cex = 1.45)),
       par.strip.text = list(cex = 1.35),
       par.settings = list(box.dot = list(pch = "|"),
                           box.umbrella = list(lty = 1,
                                               lwd = 1,
                                               col = gray(0.4)),
                           box.rectangle = list(lty = 1,
                                                lwd = 1,
                                                col = gray(0.4),
                                                fill = gray(0.97)),
                           strip.background = list(col = gray(0.9)),
                           par.ylab.text = list(cex = 1.45),
                           par.xlab.text = list(cex = 1.45),
                           layout.widths = list(left.padding = 9),
                           clip = list(panel = F)),
       panel = function(subscripts, ...) {
           ## 0 line
           panel.abline(h = 0, lty = 2, col = gray(0.7))
           
           ## boxplot
           panel.bwplot(...,
                        subscripts = subscripts,
                        ## pch = "|",
                        box.width = 0.6,
                        horizontal = F,
                        do.out = F)

           ## BY median lines
           panel.segments(x0 = 0.7,
                          x1 = 1.3,
                          y0 = tapply(X = all_genotype_data$TFT_scaled[all_genotype_data$genotype == "BY"],
                                      INDEX = all_genotype_data$reporter_titles[all_genotype_data$genotype == "BY"],
                                      FUN = median)[which.packet()],
                          y1 = tapply(X = all_genotype_data$TFT_scaled[all_genotype_data$genotype == "BY"],
                                      INDEX = all_genotype_data$reporter_titles[all_genotype_data$genotype == "BY"],
                                      FUN = median)[which.packet()],
                          lwd = 2.5,
                          col = "black")
           
           ## RM median lines
           panel.segments(x0 = 1.7,
                          x1 = 2.3,
                          y0 = tapply(X = all_genotype_data$TFT_scaled[all_genotype_data$genotype == "RM"],
                                      INDEX = all_genotype_data$reporter_titles[all_genotype_data$genotype == "RM"],
                                      FUN = median)[which.packet()],
                          y1 = tapply(X = all_genotype_data$TFT_scaled[all_genotype_data$genotype == "RM"],
                                      INDEX = all_genotype_data$reporter_titles[all_genotype_data$genotype == "RM"],
                                      FUN = median)[which.packet()],
                          lwd = 2.5,
                          col = "black")
           
           ## all data points
           panel.stripplot(...,
                           subscripts = subscripts,
                           pch = 21,
                           cex = 0.8,
                           fill = c(col_by, col_rm),
                           col = "black",
                           jitter.data = T,
                           amount = 0.14,
                           horizontal = F)
           ## pvals for BY_full vs. RM_full lmer:
           ## ODC = 2.84e-06
           ## rpn4 = 0.415
           ## pro = 0.0209
           ## thr = 4.99e-05
           ## ser = 0.001053
           ## trp = 0.06220
           panel.text(x = 1.5,
                      y = 3.2,
                      fontface = "plain",
                      srt = 0,
                      cex = 1.3,
                      labels = c(expression(italic(p)*" = 2.8e-6"),
                                 expression(italic(p)*" = 0.021"),
                                 expression(italic(p)*" = 0.42"),
                                 expression(italic(p)*" = 1.1e-3"),
                                 expression(italic(p)*" = 4.9e-5"),
                                 expression(italic(p)*" = 0.062"))[packet.number()])
           ## genotype indicator 
           panel.text(x = -0.45,
                      y = -3.05,
                      fontface = "plain",
                      srt = 0,
                      cex = 1.45,
                      labels = c(expression(italic("RPT6")*" -175"),
                                 rep("", 5))[packet.number()])
           ## y axis label
           panel.text(x = c(-0.8, rep(-10, 5)),
                      y = 1,
                      fontface = "plain",
                      srt = 90,
                      cex = 1.45,
                      labels = c("Proteasome Activity Relative",
                                 rep("", 5))[packet.number()])
           panel.text(x = c(-0.4, rep(-10, 5)),
                      y = 1,
                      fontface = "plain",
                      srt = 90,
                      cex = 1.45,
                      labels = c("to BY median (SD units)",
                                 rep("", 5))[packet.number()])
       })
## code end
)
dev.off()

#+END_SRC

** QTL Specificity Analysis
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-05-26 Thu 12:07]
   - State "TODO"       from              [2022-05-18 Wed 14:46]
   :END:
#+BEGIN_SRC R :tangle ~/emacs/proteasome_QTL_paper/scripts/QTL_specificity_analysis.R
## -----
## start w/ all peaks, then subset per N-end rule branch
## save.session(file = "~/emacs/ubi_QTL_paper/results/QTL_sharing_session.RSession")
## library("session")
## restore.session(file = "~/emacs/ubi_QTL_paper/results/QTL_sharing_session.RSession")

## -----
## setup and read in data
library("lattice")
base_dir    <- "~/emacs/UPS_QTL_paper/tables_final/"
peaks_table <- "supplementary_table_02_merged_replicating_TFT_QTLs.csv"
peaks <- read.csv(file = paste0(base_dir, peaks_table),
                  header = T, stringsAsFactors = F)



## -----
## background
## consider peaks shared when:
## [1] they're on the same chromosome
## [2] they're w/in 100 kb of ea. other
## [3] they have the same direction of effect


## -----
## 'overlap_test'
## function to test whether two peaks overlap
overlap_test <- function(row_one, row_two, ...) {
    ifelse(test =
               ## QTL on same chromosome
               row_one$chr == row_two$chr &
               ## less than 100 kb apart
               abs(row_one$max_Index - row_two$max_Index) < 1e5 &
               ## same direction of effect 
               (row_one$delta_AF * row_two$delta_AF) > 0,
           yes = 1, 
           no = 0)
}

## make sure the function works as we intend:
## true positive
overlap_test(peaks[1, ], peaks[38, ])

## true negative
overlap_test(peaks[1, ], peaks[2, ])

## -----
## take only reporters w/ at least 7 QTLs:
out_list <- list()

i <- 1
for(i in 1:length(unique(peaks$reporter))) {

    curr_reporter <- unique(peaks$reporter)[i]
    curr_peaks    <- peaks[peaks$reporter == curr_reporter, ]

    ## skip to the next loop iteration if
    ## we don't have enough QTLs for a reporter
    if(nrow(curr_peaks) < 7) {
        next
    }

    out_list[[i]] <- curr_peaks

    }

out_peaks <- do.call("rbind", out_list)
path_frame
length(unique(out_peaks$reporter))
## 14 reporters w/ at least 7 peaks


## -----
## compute overlap fractions:
out_sub_peaks <- out_peaks
overlap_results <- list()

i <- 1
j <- 1
for(i in 1:(length(unique(out_sub_peaks$reporter)))) {

    ref_reporter  <- unique(out_sub_peaks$reporter)[1]
    ref_peaks     <- out_sub_peaks[out_sub_peaks$reporter == ref_reporter, ]
    ref_n_peaks   <- nrow(ref_peaks)

    out <- data.frame(ref_reporter  = vector(),
                      ref_n_peaks   = vector(),
                      test_reporter = vector(),
                      test_n_peaks  = vector(),
                      total_peaks   = vector(),
                      overlaps      = vector(),
                      overlap_frac  = vector())

    for(j in 1:length(unique(out_sub_peaks$reporter))) {

        test_reporter   <- unique(out_sub_peaks$reporter)[j]
        test_peaks      <- out_sub_peaks[out_sub_peaks$reporter == test_reporter, ]
        test_n_peaks    <- nrow(test_peaks)
        total_peaks     <- ref_n_peaks + test_n_peaks
        overlap         <- sum(sapply(X = 1:nrow(ref_peaks),
                                 FUN = function(x) {
                                     sum(sapply(X = 1:nrow(test_peaks),
                                                FUN = function(y) {
                                                    overlap_test(ref_peaks[x, ], test_peaks[y, ])}))
                                 }))
        overlap_frac    <- overlap / (total_peaks - overlap)
        out[j, ] <- c(ref_reporter,
                      ref_n_peaks,
                      test_reporter,
                      test_n_peaks,
                      total_peaks,
                      overlap,
                      overlap_frac)
    }

    overlap_results[[i]] <- out
    out_sub_peaks <- out_sub_peaks[out_sub_peaks$reporter != ref_reporter, ]
 
}

overlap_results

overlap_frame  <- do.call("rbind", overlap_results)
overlap_subset <- overlap_frame$ref_reporter != overlap_frame$test_reporter
overlap_frame  <- overlap_frame[overlap_subset, ]

## now add the proteasome activity reporters:
overlap_frame[1 + nrow(overlap_frame), ] <- c("Rpn4_TFT", 7, "ODC_TFT", 11, 18, 3, (3 / (18 - 3)))

ord1 <- order(overlap_frame$overlap_frac,
              decreasing = F)

overlap_frame[ord1, ]

xyplot(as.numeric(overlap_frame$overlap_frac[ord1]) ~ 1:nrow(overlap_frame),
       type = c("p", "g"),
       xlim = c(-1, 93),
       ylim = c(-0.025, 0.825),
       ylab = "Fraction of Overlapping QTLs",
       xlab = "Reporter Pairs Ordered by Overlap Fraction",
       scales = list(x = list(at = c(-10, 101)),
                     y = list(at = seq(from = 0, to = 1, by = 0.1),
                              cex = 1.25),
                     tck = c(1, 0)),
       par.settings = list(par.ylab.text = list(cex = 1.25),
                           par.xlab.text = list(cex = 1.25)),
       panel = function(...) {
           panel.xyplot(...)
           panel.points(x = 51,
                        y = 0.2,
                        col = "Firebrick1",
                        pch = 19,
                        cex = 1.25)
})
## code end

## -----
## Arg/N-end rule only
library("lattice")
base_dir    <- "~/emacs/UPS_QTL_paper/tables_final/"
peaks_table <- "supplementary_table_02_merged_replicating_TFT_QTLs.csv"
peaks <- read.csv(file = paste0(base_dir, peaks_table),
                  header = T, stringsAsFactors = F)

path_test <- function(x) {
    ifelse(x == "Ala" | x == "Cys" | x == "Gly" |
           x == "Met" | x == "Pro" | x == "Ser" |
           x == "Thr" | x == "Val",
           "Ac/N-end Pathway", "Arg/N-end Pathway")
}

path_subset <- path_test(gsub(pattern = "_TFT",
                              replacement = "",
                              x = peaks$reporter))

arg_subset <- path_subset == "Arg/N-end Pathway"

peaks <- peaks[arg_subset, ]

## -----
## take only reporters w/ at least 7 QTLs:
out_list <- list()

i <- 1
for(i in 1:length(unique(peaks$reporter))) {

    curr_reporter <- unique(peaks$reporter)[i]
    curr_peaks    <- peaks[peaks$reporter == curr_reporter, ]

    ## skip to the next loop iteration if
    ## we don't have enough QTLs for a reporter
    if(nrow(curr_peaks) < 7) {
        next
    }

    out_list[[i]] <- curr_peaks

    }


out_peaks <- do.call("rbind", out_list)

length(unique(peaks$reporter))
length(unique(out_peaks$reporter))
## 12 Arg/N-degrons; 7 w/ >= 7 QTLs 


## -----
## compute overlap fractions:
out_sub_peaks <- out_peaks
overlap_results <- list()

i <- 1
j <- 1
for(i in 1:(length(unique(out_sub_peaks$reporter)))) {

    ref_reporter  <- unique(out_sub_peaks$reporter)[1]
    ref_peaks     <- out_sub_peaks[out_sub_peaks$reporter == ref_reporter, ]
    ref_n_peaks   <- nrow(ref_peaks)

    out <- data.frame(ref_reporter  = vector(),
                      ref_n_peaks   = vector(),
                      test_reporter = vector(),
                      test_n_peaks  = vector(),
                      total_peaks   = vector(),
                      overlaps      = vector(),
                      overlap_frac  = vector())

    for(j in 1:length(unique(out_sub_peaks$reporter))) {

        test_reporter   <- unique(out_sub_peaks$reporter)[j]
        test_peaks      <- out_sub_peaks[out_sub_peaks$reporter == test_reporter, ]
        test_n_peaks    <- nrow(test_peaks)
        total_peaks     <- ref_n_peaks + test_n_peaks
        overlap         <- sum(sapply(X = 1:nrow(ref_peaks),
                                 FUN = function(x) {
                                     sum(sapply(X = 1:nrow(test_peaks),
                                                FUN = function(y) {
                                                    overlap_test(ref_peaks[x, ], test_peaks[y, ])}))
                                 }))
        overlap_frac    <- overlap / (total_peaks - overlap)
        out[j, ] <- c(ref_reporter,
                      ref_n_peaks,
                      test_reporter,
                      test_n_peaks,
                      total_peaks,
                      overlap,
                      overlap_frac)
    }

    overlap_results[[i]] <- out
    out_sub_peaks <- out_sub_peaks[out_sub_peaks$reporter != ref_reporter, ]
 
}

overlap_results

overlap_frame     <- do.call("rbind", overlap_results)
overlap_subset    <- overlap_frame$ref_reporter != overlap_frame$test_reporter
arg_overlap_frame <- overlap_frame[overlap_subset, ]
arg_overlap_frame$path <- "Arg/N-end"


## -----
## Ac/N-end rule only
library("lattice")
base_dir    <- "~/emacs/UPS_QTL_paper/tables_final/"
peaks_table <- "supplementary_table_02_merged_replicating_TFT_QTLs.csv"
peaks <- read.csv(file = paste0(base_dir, peaks_table),
                  header = T, stringsAsFactors = F)

path_test <- function(x) {
    ifelse(x == "Ala" | x == "Cys" | x == "Gly" |
           x == "Met" | x == "Pro" | x == "Ser" |
           x == "Thr" | x == "Val",
           "Ac/N-end Pathway", "Arg/N-end Pathway")
}

path_subset <- path_test(gsub(pattern = "_TFT",
                              replacement = "",
                              x = peaks$reporter))

ac_subset <- path_subset == "Ac/N-end Pathway"

peaks <- peaks[ac_subset, ]

## -----
## take only reporters w/ at least 7 QTLs:
out_list <- list()

i <- 1
for(i in 1:length(unique(peaks$reporter))) {

    curr_reporter <- unique(peaks$reporter)[i]
    curr_peaks    <- peaks[peaks$reporter == curr_reporter, ]

    ## skip to the next loop iteration if
    ## we don't have enough QTLs for a reporter
    if(nrow(curr_peaks) < 7) {
        next
    }

    out_list[[i]] <- curr_peaks

    }


out_peaks <- do.call("rbind", out_list)

length(unique(peaks$reporter))
length(unique(out_peaks$reporter))
## 8 Ac/N-degrons; 7 w/ >= 7 QTLs 


## -----
## compute overlap fractions:
out_sub_peaks <- out_peaks
overlap_results <- list()

i <- 1
j <- 1
for(i in 1:(length(unique(out_sub_peaks$reporter)))) {

    ref_reporter  <- unique(out_sub_peaks$reporter)[1]
    ref_peaks     <- out_sub_peaks[out_sub_peaks$reporter == ref_reporter, ]
    ref_n_peaks   <- nrow(ref_peaks)

    out <- data.frame(ref_reporter  = vector(),
                      ref_n_peaks   = vector(),
                      test_reporter = vector(),
                      test_n_peaks  = vector(),
                      total_peaks   = vector(),
                      overlaps      = vector(),
                      overlap_frac  = vector())

    for(j in 1:length(unique(out_sub_peaks$reporter))) {

        test_reporter   <- unique(out_sub_peaks$reporter)[j]
        test_peaks      <- out_sub_peaks[out_sub_peaks$reporter == test_reporter, ]
        test_n_peaks    <- nrow(test_peaks)
        total_peaks     <- ref_n_peaks + test_n_peaks
        overlap         <- sum(sapply(X = 1:nrow(ref_peaks),
                                 FUN = function(x) {
                                     sum(sapply(X = 1:nrow(test_peaks),
                                                FUN = function(y) {
                                                    overlap_test(ref_peaks[x, ], test_peaks[y, ])}))
                                 }))
        overlap_frac    <- overlap / (total_peaks - overlap)
        out[j, ] <- c(ref_reporter,
                      ref_n_peaks,
                      test_reporter,
                      test_n_peaks,
                      total_peaks,
                      overlap,
                      overlap_frac)
    }

    overlap_results[[i]] <- out
    out_sub_peaks <- out_sub_peaks[out_sub_peaks$reporter != ref_reporter, ]
 
}

overlap_results

overlap_frame     <- do.call("rbind", overlap_results)
overlap_subset    <- overlap_frame$ref_reporter != overlap_frame$test_reporter
ac_overlap_frame  <- overlap_frame[overlap_subset, ]
ac_overlap_frame$path <- "Ac/N-end"

## -----
## now bind into a single dataframe
path_lists <- list()
path_lists[[1]] <- arg_overlap_frame
path_lists[[2]] <- ac_overlap_frame
path_frame <- do.call("rbind", path_lists)

path_frame[1 + nrow(path_frame), ] <- c("Rpn4_TFT", 7,
                                         "ODC_TFT", 11,
                                         18, 3, (3 / (18 - 3)),
                                         "Proteasome")


## -----
## where is 0.2 in the distribution?
mean(path_frame$overlap_frac < 0.2)
## [1] 0.2325581



## -----
## color setup
path_frame$col <- ifelse(test = path_frame$path == "Arg/N-end",
                         yes = "slategray1", 
                         no = ifelse(test = path_frame$path == "Ac/N-end",
                                     yes = "plum2", 
                                     no = "darkviolet")) 

ord1 <- order(path_frame$overlap_frac)
path_ord_frame <- path_frame[ord1, ]
path_ord_frame$n <- 1:nrow(path_ord_frame)

pdf(file = "~/emacs/ubi_QTL_paper/results/overlap_plot_by_branch.pdf")
xyplot(overlap_frac ~ n,
       groups = path,
       data = path_ord_frame,
       col = c("deeppink2", "navy", "firebrick1"),
       type = c("p"),
       xlim = c(-1, 44),
       ylim = c(-0.025, 0.825),
       cex = 1.5,
       key = list(corner = c(0.01, 0.99),
                  points = list(col = c("firebrick1", "navy", "deeppink2"),
                                pch = c(19, 1, 1),
                                cex = 2),
                  text = list(labels = c("Proteasome",
                                         "Arg/N-end Rule",
                                         "Ac/N-end Rule")),
                  between = 1,
                  background = gray(1, alpha = 0.5),
                  padding.text = 2.5),
       ylab = "Fraction of Overlapping QTLs",
       xlab = "",
       scales = list(x = list(at = c(-10, 101)),
                     y = list(at = seq(from = 0, to = 1, by = 0.1),
                              cex = 1.25),
                     tck = c(1, 0)),
       par.settings = list(par.ylab.text = list(cex = 1.25),
                           par.xlab.text = list(cex = 1.25),
                           clip = list(panel = F)),
       panel = function(...) {
           panel.abline(h = seq(from = 0, to = 1, by = 0.1),
                        v = seq(from = 0, to = 50, by = 5),
                        col = gray(0.9))
           panel.xyplot(...)
           panel.points(x = 11,
                        y = 0.2,
                        col = "Firebrick1",
                        pch = 19,
                        cex = 1.25)
           panel.text(x = 21.5,
                      y = -0.06,
                      fontface = "plain",
                      srt = 0,
                      cex = 1.25,
                      labels = "Reporter Pairs Ordered by Overlap Fraction")
       })
## code end 
dev.off()

## -----
## implementation
## randomly sample 18 QTLs, then split into
## two sets of 7 and 11 QTLs.  Calculate overlaps.
## The QTLs in each set need to be non-overlapping

## numbers we'll sample from 
peak_index <- as.numeric(rownames(peaks))


## initialize an empty dataframe
sample_set_full <- data.frame(reporter = character(),
                              chr = integer(),
                              LOD = numeric(),
                              delta_AF = numeric(),
                              left_Index = numeric(),
                              max_Index = numeric(),
                              right_Index = numeric(),
                              stringsAsFactors = F)

## let's get
overlap_dist <- vector()

for(w in 1:20) {
    for(i in 1:18) {

        ## grab a sample of 18 peaks
        sample_set_full[i, ] <- peaks[sample(x = peak_index,
                                             size = 1,
                                             replace = F), ]

        ## split the set of sampled peaks into
        ## two smaller subsets that have the
        ## same number of peaks we obtained
        ## with the Rpn4 and ODC TFTs, respectively
        sample_set_sm <- sample_set_full[1:7, ]
        sample_set_lg <- sample_set_full[8:18, ]

        ## test whether we get duplicated 
        ## peaks in the small set of QTLs 
        sm_test <- vector()
        
        for(j in 1:nrow(sample_set_sm)) {

            sm_test[j] <- sum(sapply(X = 1:nrow(sample_set_sm),
                                     FUN = function(y) {
                                         overlap_test(sample_set_sm[j, ], sample_set_sm[y, ])
                                     }))
        }

        ## start a new loop if we have overlapping
        ## peaks in the small peak set
        if(sum(sm_test) > 7) {
            next
        }

        ## test whether we get duplicated 
        ## peaks in the large set of QTLs 
        lg_test <- vector()
        
        for(j in 1:nrow(sample_set_lg)) {

            lg_test[j] <- sum(sapply(X = 1:nrow(sample_set_lg),
                                     FUN = function(y) {
                                         overlap_test(sample_set_lg[j, ], sample_set_lg[y, ])
                                     }))
        }

        ## start a new loop if we have overlapping
        ## peaks in the large peak set
        if(sum(lg_test) > 11) {
            next
        }

        ## test whether we have the same peak in both sets
        ## delta_AF can be used to test this 
        ## length(unique(peaks$delta_AF)) = 149
        sm_afd <- sample_set_sm$delta_AF
        lg_afd <- sample_set_lg$delta_AF

        dup_out <- vector()
        for(k in 1:length(sm_afd)) {
            dup_out[k] <- sum(sapply(X = lg_afd,
                                     FUN = function(d) {
                                         ifelse(test = sm_afd[k] == d,
                                                yes = 1, 
                                                no = 0)
                                     }))
        }

        ## start a new loop if we have duplicated peaks
        if(sum(dup_out > 0)) {
            next
        }

        ## now, compute the overlaps
        overlap_out <- vector()
        for(l in 1:length(sample_set_sm)) {
            overlap_out[l] <- sum(sapply(X = 1:length(sample_set_lg$LOD),
                                         FUN = function(p) {
                                             overlap_test(sample_set_sm[l, ], sample_set_lg[p, ])
                                         }))
        }

    overlap_frac <- sum(overlap_out) / 18

    overlap_dist[w] <- overlap_frac
    
}}


median(as.numeric(ac_overlap_frame$overlap_frac))
## [1] 0.5384615
median(as.numeric(arg_overlap_frame$overlap_frac))
## [1] 0.2142857

overlap_dist

1:7 / 18

## -----
##
n_degrons <- unique(peaks$reporter)

peak_counts <- sapply(X = n_degrons,
                      FUN = function(x) {
                          nrow(peaks[peaks$reporter == x, ])
})

reporters <- data.frame(n_degrons, peak_counts, row.names = NULL)
#+END_SRC

